install.packages("rgdal", repos="http://R-Forge.R-project.org")#
require(rgdal)
R CMD INSTALL ~/Downloads/rgdal_0.9-1.tar.gz --configure-args='--with-gdal-config=/Library/Frameworks/GDAL.framework/Programs/gdal-config#
 --with-proj-include=/Library/Frameworks/PROJ.framework/Headers#
 --with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib'
R CMD INSTALL ~/Downloads/rgdal_0.9-1.tar.gz --configure-args='--with-gdal-config=/Library/Frameworks/GDAL.framework/Programs/gdal-config--with-proj-include=/Library/Frameworks/PROJ.framework/Headers--with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib'
library(lme3)
library(lme4)
300/241
.244*30
1.25*300
1.25*240
7*12
7849-7527
322/1353
8028-7527
501/1353
8028-7957
1353-501
852/71
7956-7878
8176-8029
8176-8092
250*.75
250*.25
42*2 + 17*2
118/19
21/6.2
59.5*.75
59.5*.5 + 59.5
71/12
597/80
597/8
432/8
15*8 + 9*3
?seq_len
7.25/3
7.25/4
for(i in 0:9){x=cos(2*pi/10*i);y=x+1;z=(y-2)*22;pie(c(y,8-y),col=c(0,7),init.angl=135-z,bo=F,la=NA)}
install.packages("ProjectTemplate")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("data.table")
install.packages("corrgram")
install.packages("survival")
install.packages("shapefiles")
install.packages("rgdal")
install.packages("PBSmapping")
install.packages("sp")
install.packages("gdistance")
install.packages("chron")
install.packages("unmarked")
install.packages("lme4")
install.packages("rgeos", repos="http://R-Forge.R-project.org", type="source")#
require(rgeos)
install.packages('rgdal',repos="http://www.stats.ox.ac.uk/pub/RWin")
library(rgdal)
install.packages("http://cran.r-project.org/src/contrib/rgdal_0.9-1.tar.gz", repos = NULL, type="source", configure.args = "--with-gdal-config=/Library/Frameworks/GDAL.framework/Versions/1.10/unix/bin/gdal-config --with-proj-include=/Library/Frameworks/PROJ.framework/unix/include --with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib")
18/1.618
189+114
library(lubridate)
library(magrittr)
seasons <- data.frame(#
	   SE = as.POSIXct(c("2009-3-20", "2010-3-20", "2011-3-20", "2012-3-20", #
            "2013-3-20", "2014-3-20"), format="%Y-%m-%d"),#
	   SS = as.POSIXct(c("2009-6-21", "2010-6-21", "2011-6-21", "2012-6-20",#
            "2013-6-20", "2014-6-20"), format="%Y-%m-%d"),#
	   FE = as.POSIXct(c("2009-9-22", "2010-9-23", "2011-9-23", "2012-9-22",#
            "2013-9-22", "2014-9-22"), format="%Y-%m-%d"),#
	   WS = as.POSIXct(c("2009-12-21", "2010-12-21", "2011-12-22", "2012-12-21", #
            "2013-12-21", "2014-12-21"), format="%Y-%m-%d")#
    )#
#
    assignSeason <- function(dat, SeasonStarts=seasons) {#
	    dat %<>% mutate(#
		    Season = lapply(Date,#
				function(x) {#
					findInterval(#
						x, #
						SeasonStarts[which(year(x)==year(SeasonStarts$WS)), ]#
					)#
				}#
			) %>% unlist	#
		)#
	    dat[which(dat$Season==0 | dat$Season==4), ]$Season 	<- "Winter"#
	    dat[which(dat$Season==1), ]$Season 					<- "Spring"#
	    dat[which(dat$Season==2), ]$Season 					<- "Summer"#
	    dat[which(dat$Season==3), ]$Season 					<- "Fall"#
	    return(dat)#
    }
dat = data.frame(#
	    Date = as.POSIXct(strptime(as.Date("2011-12-01", format = "%Y-%m-%d") + #
            (0:10)*30, format="%Y-%m-%d" ))#
    )#
    dat %>% assignSeason
library(dplyr)
dat = data.frame(#
	    Date = as.POSIXct(strptime(as.Date("2011-12-01", format = "%Y-%m-%d") + #
            (0:10)*30, format="%Y-%m-%d" ))#
    )#
    dat %>% assignSeason
library(devtoolks)
library(devtools)
?install_github
devtools::install_github("ksauby/ACSampling", auth_token="2ab30a602e52fae481f4249cc25e892c0a9ccfc7", subdir="/code/Restricted_ACS_Simulations/ACSampling", repos=NULL)
devtools::install_github("ksauby/ACSampling", auth_token="2794c3f10db92f525181a0b1f6c19064fe3a2ef3", subdir="/code/Restricted_ACS_Simulations/ACSampling", repos=NULL)
devtools::install("~/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="~/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="~/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install_local(path="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
library(devtools)
devtools::install_local(path="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
install.packages("~/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
??limit
37-13
24/37
37-13
26/37
25/37
23/37
29/37
30/37
22/37
30/37
29/37
28/37
27/37
35/37
30/37
29/37
26/37
26/37 - .6757
28/37
30/37
29/37
37-12
25/37
219*.8
219*.8 - 17
26/3
17/900
42/900
49/900
29/40
1/25
8/25
10/25
(7.5 + 3.75)/15
12*0.75
11 * 0.75
11/15
11*0.25
11/15 * 6
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis')
library(ProjectTemplate)#
#
# when working on a Windows computer#
# setwd("C:/Users/KSauby/Dropbox/gradschool/Research/Projects/sampling")#
#
# load project#
load.project()
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Appendix/Survival')
temp <- with(#
	Plant_Surveys_by_Year, #
	table(Species, ME_t_1, Alive)#
) %>% #
	as.data.frame %>% #
	dcast(., Species + Alive ~ ME_t_1) %>%#
	rowwise() %>%#
	mutate(#
		Total = `0` + `1`,#
		`Percentage of Observations with\nNative Moth at time t` = round(`1`/Total,4) * 100#
	) %>%#
	setnames("Alive", "Alive at time t+1?") %>%#
	setnames("0", "Native Moth Absent at time t,\nNumber of Observations") %>%#
	setnames("1", "Native Moth Present at time t,\nNumber of Observations") %>%#
	as.data.frame#
temp$`Alive at time t+1?` %<>% as.factor#
levels(temp$`Alive at time t+1?`) <- c("no", "yes")#
#
temp %>% dplyr::select(-Total) %>%#
pandoc.table(#
	split.tables=700,#
	split.cells=30,#
	keep.line.breaks = T#
)
str(Plant_Surveys_by_Year)
str(Plant.Surveys.by.Year)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Appendix/Survival')
temp <- with(#
	Plant.Surveys.by.Year, #
	table(Species, Old_Moth_Evidence_t_1, Alive)#
) %>% #
	as.data.frame %>% #
	dcast(., Species + Alive ~ Old_Moth_Evidence_t_1) %>%#
	rowwise() %>%#
	mutate(#
		Total = `0` + `1`,#
		`Percentage of Observations with\Moth Damage at time t` = round(`1`/Total,4) * 100#
	) %>%#
	setnames("Alive", "Alive at time t+1?") %>%#
	setnames("0", "Moth Damage Absent at time t,\nNumber of Observations") %>%#
	setnames("1", "Moth Damage Present at time t,\nNumber of Observations") %>%#
	as.data.frame#
temp$`Alive at time t+1?` %<>% as.factor#
levels(temp$`Alive at time t+1?`) <- c("no", "yes")#
#
temp %>% dplyr::select(-Total) %>%#
pandoc.table(#
	split.tables=700,#
	split.cells=30,#
	keep.line.breaks = T#
)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Appendix/Survival')
with(#
	Plant.Surveys.by.Year, #
	table(Species, Old_Moth_Evidence_t_1, Alive)#
)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Appendix/Survival')
with(#
	Plant.Surveys.by.Year, #
	table(Species, Old_Moth_Evidence_t_1, Alive)#
) %>% #
	as.data.frame %>% #
	dcast(., Species + Alive ~ Old_Moth_Evidence_t_1)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Appendix/Survival')
with(#
	Plant.Surveys.by.Year, #
	table(Species, Old_Moth_Evidence_t_1, Alive)#
) %>% #
	as.data.frame %>% #
	dcast(., Species + Alive ~ Old_Moth_Evidence_t_1) %>%#
	rowwise() %>%#
	mutate(#
		Total = `0` + `1`,#
		`Percentage of Observations with\Moth Damage at time t` = round(`1`/Total,4) * 100#
	)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Appendix/Survival')
with(#
	Plant.Surveys.by.Year, #
	table(Species, Old_Moth_Evidence_t_1, Alive)#
) %>% #
	as.data.frame %>% #
	dcast(., Species + Alive ~ Old_Moth_Evidence_t_1) %>%#
	rowwise() %>%#
	mutate(#
		Total = `0` + `1`,#
		`Percentage of Observations with\nMoth Damage at time t` = round(`1`/Total,4) * 100#
	) %>%#
	setnames("Alive", "Alive at time t+1?") %>%#
	setnames("0", "Moth Damage Absent at time t,\nNumber of Observations") %>%#
	setnames("1", "Moth Damage Present at time t,\nNumber of Observations") %>%#
	as.data.frame
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Appendix/Survival')
temp$`Alive at time t+1?` %<>% as.factor#
levels(temp$`Alive at time t+1?`) <- c("no", "yes")#
#
temp %>% dplyr::select(-Total) %>%#
pandoc.table(#
	split.tables=700,#
	split.cells=30,#
	keep.line.breaks = T#
)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Appendix/Survival')
temp <- with(#
	Plant.Surveys.by.Year, #
	table(Species, Old_Moth_Evidence_t_1, Alive)#
) %>% #
	as.data.frame %>% #
	dcast(., Species + Alive ~ Old_Moth_Evidence_t_1) %>%#
	rowwise() %>%#
	mutate(#
		Total = `0` + `1`,#
		`Percentage of Observations with\nMoth Damage at time t` = round(`1`/Total,4) * 100#
	) %>%#
	setnames("Alive", "Alive at time t+1?") %>%#
	setnames("0", "Moth Damage Absent at time t,\nNumber of Observations") %>%#
	setnames("1", "Moth Damage Present at time t,\nNumber of Observations") %>%#
	as.data.frame#
temp$`Alive at time t+1?` %<>% as.factor#
levels(temp$`Alive at time t+1?`) <- c("no", "yes")#
#
temp %>% dplyr::select(-Total) %>%#
pandoc.table(#
	split.tables=700,#
	split.cells=30,#
	keep.line.breaks = T#
)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Appendix/Survival')
temp <- with(#
	Plant.Surveys.by.Year, #
	table(Species, OldMothhistory, Alive)#
) %>% #
	as.data.frame %>% #
	dcast(., Species + Alive ~ OldMothhistory) %>%#
	rowwise() %>%#
	mutate(#
		Total = `0` + `1`,#
		`Percentage of Observations with\nHistory of Moth Damage` = round(`1`/Total,4) * 100#
	) %>%#
	setnames("Alive", "Alive at time t+1?") %>%#
	setnames("0", "No History of Moth Damage,\nNumber of Observations") %>%#
	setnames("1", "History of Moth Damage,\nNumber of Observations") %>%#
	as.data.frame#
temp$`Alive at time t+1?` %<>% as.factor#
levels(temp$`Alive at time t+1?`) <- c("no", "yes")#
#
temp %>% dplyr::select(-Total) %>%#
pandoc.table(#
	split.tables=700,#
	split.cells=30,#
	keep.line.breaks = T#
)
ls()
str(Plant.Info.Survival.stricta)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Appendix/Survival')
ggplot(Plant.Info.Survival.stricta %>% filter(!is.na(Species)), aes(DaysAlive)) + geom_histogram() + facet_wrap(~Species) + KEStheme()
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Appendix/Survival')
```{r, echo=F, message=F, warning=F, fig.width=8, fig.height=6}#
ggplot(Plant.Info.Survival.pusilla %>% filter(!is.na(Species)), aes(DaysAlive)) + geom_histogram() + facet_wrap(~Species) + KEStheme()#
```
str(Plant_Info)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Info_Analysis <- Plant_Info %>%#
	group_by(PlantID) %>%#
	summarise(#
		Island = Island[1],#
		Network = Network[1],#
		Species = Species[1],#
		RecruitmentMode = RecruitmentMode[1],#
		Parent = Parent[1],#
		DaysAlive = DaysAlive[1],#
		Dead = min(ConfirmedDeadMissing),#
		First.Survey.Date = min(First.Survey.Date)#
	) %>%#
	filter(!is.na(Network))#
Plant_Info_Analysis$DaysAlive %<>% as.numeric
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
Plant_Surveys_All <- Demographic.Plant.Surveys#
Plant_Info_All <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# those marked dead/missing, then not dead/missing#
# find a 10 in concatenated?#
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
if (dim(dups)[1] > 0) {stop("Duplicates observations for a PlantID, Date combination are present in the dataset.")}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% filter(is.na(PlantID))#
if (dim(dups)[1] > 0) {stop("NA values for PlantID.")}#
# --------------- Demographic Plot Surveys ---------------------------------- ##
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
# --------------- Demographic Plant Surveys --------------------------------- ##
Plant_Surveys %<>% processPlantSurveys#
# --------------- Demographic Plant Info ------------------------------------ ##
Plant_Info %<>% processPlantInfo(Plot_Info)#
#
Plant_Info$RecruitmentMode <- Plant_Info$ReproductiveMode#
Plant_Info[which(Plant_Info$ReproductiveMode=="WoodyTrunk"), ]$RecruitmentMode <- "Unknown"#
Plant_Info[which(is.na(Plant_Info$ReproductiveMode)), ]$RecruitmentMode <- "Unknown"#
#
# --------------- Demographic Plant Surveys --------------------------------- ##
Plant_Surveys %<>% mergePlantSurveysPlantInfo(Plant_Info)#
Plant_Surveys %<>% processPlantSurveysafterMergewPlantInfo %>%#
	filter(InDemographicStudy=="yes")#
Plant_Surveys_by_Plant <- Plant_Surveys %>% processSurveysMergedbyPlant#
Plant_Surveys_by_Plant[which(Plant_Surveys_by_Plant$RecruitmentMode=="ClonalUnknown"), ]$RecruitmentMode <- "Clonal"#
Plant_Surveys_by_Plant[which(Plant_Surveys_by_Plant$RecruitmentMode=="UnknownClonal"), ]$RecruitmentMode <- "Clonal"#
#
# --------------------------------------------------------------------------- ##
# Moth Evidence - ANY evidence of moths, including moth presence or daa#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Plant %<>% mutate(#
	Moth_Evidence_t = max(#
		CA_t,#
		ME_t,#
		Old_Moth_Evidence_t,#
		Unknown_Moth_t,#
		na.rm=T#
	),#
	Insect_Evidence_t = max(#
		CA_t,#
		ME_t,#
		Old_Moth_Evidence_t,#
		Unknown_Moth_t,#
		Gerstaeckeria_t,#
		CH_t,#
		DA_t,#
		na.rm=T#
	)#
)#
# --------------------------------------------------------------------------- ##
# create Fecundity and RGR dataset - only measured size during the spring and summer#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year <- Plant_Surveys_by_Plant %>% #
	group_by(SamplingYear, PlantID) %>%#
	summarise(#
		Species = Species[1],#
		Network = Network[1],#
		Island = Island[1],#
		RecruitmentMode = RecruitmentMode[1],#
		Date = min(Date),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		Fruit_Flowers_t = max(Fruit_Flowers_t, na.rm=T),#
		FruitFlowerPres_t = max(FruitFlowerPres_t, na.rm=T),#
		Size_t = max(Size_t, na.rm=T),#
		Height_t = max(Height_t, na.rm=T),#
		Fruit_t = max(Fruit_t, na.rm=T),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		CA_t = max(CA_t, na.rm=T),#
		ME_t = max(ME_t, na.rm=T),#
		DA_t = max(DA_t, na.rm=T),#
		CH_t = max(CH_t, na.rm=T),#
		Gerstaeckeria_t = max(Gerstaeckeria_t, na.rm=T),#
		Unknown_Moth_t = max(Unknown_Moth_t, na.rm=T),#
		Old_Moth_Evidence_t = max(Old_Moth_Evidence_t, na.rm=T),#
		Moth_Evidence_t = max(Moth_Evidence_t, na.rm=T),#
		Insect_Evidence_t = max(Insect_Evidence_t, na.rm=T),#
		Dead = max(Dead, na.rm=T),#
		Missing = max(Missing, na.rm=T)#
	) %>% #
	mutate(PrevSamplingYear = SamplingYear - 1)#
# --------------------------------------------------------------------------- ##
# create PrevYear#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$Year <- year(Plant_Surveys_by_Year$Date)#
Plant_Surveys_by_Year$PrevYear <- year(Plant_Surveys_by_Year$Date) - 1#
#
# --------------------------------------------------------------------------- ##
# Insect Presence During the Study - for Datasets for Life Table Response Experiments#
# --------------------------------------------------------------------------- ##
network_summary_time_t <- Plant_Surveys_by_Year %>%#
	group_by(Network, Year) %>%#
	summarise(#
		OldMothNetworkPres_t = max(Old_Moth_Evidence_t, na.rm=T),#
		#InsectNetworkPres = max(Insect_t, na.rm=T),#
		MENetworkPres_t = max(ME_t, na.rm=T),#
		CANetworkPres_t = max(CA_t, na.rm=T),#
		MothNetworkPres_t = max(Moth_Evidence_t, na.rm=T)#
	) %>%#
	calculateLagGroupedDF(#
		vars=c("OldMothNetworkPres_t", "MENetworkPres_t", "CANetworkPres_t", "MothNetworkPres_t"), #
		arrange.variable="Year", #
		grouping.variable=c("Network")#
	)#
network_summary <- Plant_Surveys_by_Year %>%#
	group_by(Network) %>%#
	summarise(#
		OldMothNetworkPres = max(Old_Moth_Evidence_t, na.rm=T),#
		#InsectNetworkPres = max(Insect_t, na.rm=T),#
		MENetworkPres = max(ME_t, na.rm=T),#
		CANetworkPres = max(CA_t, na.rm=T),#
		MothNetworkPres = max(Moth_Evidence_t, na.rm=T)#
	)#
Plant_summary <- Plant_Surveys_by_Year %>%#
	group_by(PlantID) %>%#
	summarise(#
		OldMothPlantPres = max(Old_Moth_Evidence_t, na.rm=T),#
		#InsectPlantPres = max(Insect_t, na.rm=T),#
		MEPlantPres = max(ME_t, na.rm=T),#
		CAPlantPres = max(CA_t, na.rm=T),#
		MothPlantPres = max(Moth_Evidence_t, na.rm=T)#
	)#
Plant_Surveys_by_Year %<>% #
	merge(network_summary, by="Network") %>% #
	merge(Plant_summary, by="PlantID") %>%#
	merge(network_summary_time_t, by=c("Year", "Network"))#
#
# --------------------------------------------------------------------------- ##
# Patch Names#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$IslandFullNames <- Plant_Surveys_by_Year$Island#
levels(Plant_Surveys_by_Year$IslandFullNames) <- c(#
	 "Island 1",#
	 "Island 2",#
	 "Island 3",#
	 "Island 4",#
	 "Island 5",#
	 "Coastal\nGrassland",#
	 "Beach\nDunes"#
)#
# --------------------------------------------------------------------------- ##
# Insect Presence/Absence#
# --------------------------------------------------------------------------- ##
#
Plant_Surveys_by_Year$MothOccupancy_t <- with(#
	Plant_Surveys_by_Year, #
	paste(CA_t, ME_t, Old_Moth_Evidence_t, Unknown_Moth_t, sep="")#
)#
#
# No insects#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="NANANANA"), ]$MothOccupancy_t <- "No Insects Observed"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="0000"), ]$MothOccupancy_t <- "No Insects Observed"#
#
# Insect damage only#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="0010"), ]$MothOccupancy_t <- "Moth Damage Only,\nNo Insects Observed"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="NANA1NA"), ]$MothOccupancy_t <- "Moth Damage Only,\nNo Insects Observed"#
#
# Invasive Moth only#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="1NANANA"), ]$MothOccupancy_t <- "Invasive Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="1NA1NA"), ]$MothOccupancy_t <- "Invasive Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="1000"), ]$MothOccupancy_t <- "Invasive Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="1010"), ]$MothOccupancy_t <- "Invasive Moth"#
#
# Native Moth Only#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="0110"), ]$MothOccupancy_t <- "Native Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="0100"), ]$MothOccupancy_t <- "Native Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="NA1NANA"), ]$MothOccupancy_t <- "Native Moth"#
#
# Native and Invasive Moths#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="1100"), ]$MothOccupancy_t <- "Invasive and Native Moths"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="1110"), ]$MothOccupancy_t <- "Invasive and Native Moths"#
#
Plant_Surveys_by_Year$MothOccupancy_t %<>% factor(levels=c(#
	"No Insects Observed",             #
	"Moth Damage Only,\nNo Insects Observed",#
	"Native Moth",                           #
	"Invasive Moth",                         #
	"Invasive and Native Moths"#
))#
# --------------------------------------------------------------------------- ##
# Insect Presence/Absence During Study#
# --------------------------------------------------------------------------- ##
#
Plant_Surveys_by_Year$MothOccupancy <- with(#
	Plant_Surveys_by_Year, #
	paste(CAPlantPres, MEPlantPres, OldMothPlantPres, sep="")#
)#
#
# No insects#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="NANANA"), ]$MothOccupancy <- "No Insects Observed"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="000"), ]$MothOccupancy <- "No Insects Observed"#
#
# Insect damage only#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="001"), ]$MothOccupancy <- "Moth Damage Only,\nNo Insects Observed"#
#
# Invasive Moth only#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="100"), ]$MothOccupancy <- "Invasive Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="101"), ]$MothOccupancy <- "Invasive Moth"#
#
# Native Moth Only#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="011"), ]$MothOccupancy <- "Native Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="010"), ]$MothOccupancy <- "Native Moth"#
#
# Native and Invasive Moths#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="110"), ]$MothOccupancy <- "Invasive and Native Moths"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="111"), ]$MothOccupancy <- "Invasive and Native Moths"#
#
Plant_Surveys_by_Year$MothOccupancy %<>% factor(levels=c(#
	"No Insects Observed",             #
	"Moth Damage Only,\nNo Insects Observed",#
	"Native Moth",                           #
	"Invasive Moth",                         #
	"Invasive and Native Moths"#
))#
# --------------------------------------------------------------------------- ##
# Second Plant ID#
# --------------------------------------------------------------------------- ##
#
Plant_Surveys_by_Year %<>% mutate(#
	PlantIDb = paste(#
		Island,#
		PlantID,#
		sep=", "#
	),#
	PlantIDc = paste(#
		Island,#
		PlantID,#
		sep="\n"#
	)#
)#
# --------------------------------------------------------------------------- ##
# Alive Variable#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$Alive <- abs(Plant_Surveys_by_Year$Dead - 1)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Info_Analysis <- Plant_Info %>%#
	group_by(PlantID) %>%#
	summarise(#
		Island = Island[1],#
		Network = Network[1],#
		Species = Species[1],#
		RecruitmentMode = RecruitmentMode[1],#
		Parent = Parent[1],#
		DaysAlive = DaysAlive[1],#
		Dead = min(ConfirmedDeadMissing),#
		First.Survey.Date = min(First.Survey.Date)#
	) %>%#
	filter(!is.na(Network))#
Plant_Info_Analysis$DaysAlive %<>% as.numeric
Plant_Info_Analysis$RecruitmentMode %>% unique
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Info_Analysis %<>% mutate(#
	Parent = replace(#
		Parent,#
		which(is.na(Parent)),#
		"Unknown"#
	)#
)	#
Plant_Info_Analysis %<>% arrange(desc(Island), desc(Parent))#
# -----------------------------------------------------------------
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Info_Analysis %<>% #
	merge(network_summary, by="Network") %>%#
	merge(Plant_summary, by="PlantID")#
#
Plant_Info_Analysis$Parent %<>% NA_Function#
Plant_Info_Analysis$Parent[which(Plant_Info_Analysis$Parent=="")] <- NA
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
First_Size <- Plant_Surveys_by_Year %>%#
	group_by(PlantID) %>%#
	summarise(#
		First.Survey.Date = min(Date),#
		First_Size = Size_t[which(Date==First.Survey.Date)],#
		min.Size = min(Size_t, na.rm=T),#
		max.Size = max(Size_t, na.rm=T)#
	)#
#
Plant_Info_Analysis %<>% merge(First_Size, by=c("First.Survey.Date", "PlantID"))
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Info_stricta <- Plant_Info_Analysis %>% filter(Species=="stricta")#
Plant_Info_pusilla <- Plant_Info_Analysis %>% filter(Species=="pusilla")#
#
write.csv(Plant_Info_Analysis, "../data/Plant_Info_Analysis.csv")#
write.csv(Plant_Info_stricta, "../data/Plant_Info_Analysis_stricta.csv")#
write.csv(Plant_Info_pusilla, "../data/Plant_Info_Analysis_pusilla.csv")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Info_Analysis$MothOccupancy <- with(#
	Plant_Info_Analysis, #
	paste(CAPlantPres, MEPlantPres, OldMothPlantPres, sep="")#
)#
#
# No insects#
Plant_Info_Analysis[which(Plant_Info_Analysis$MothOccupancy=="NANANA"), ]$MothOccupancy <- "No Insects Observed"#
Plant_Info_Analysis[which(Plant_Info_Analysis$MothOccupancy=="000"), ]$MothOccupancy <- "No Insects Observed"#
#
# Insect damage only#
Plant_Info_Analysis[which(Plant_Info_Analysis$MothOccupancy=="001"), ]$MothOccupancy <- "Moth Damage Only,\nNo Insects Observed"#
#
# Invasive Moth only#
Plant_Info_Analysis[which(Plant_Info_Analysis$MothOccupancy=="100"), ]$MothOccupancy <- "Invasive Moth"#
Plant_Info_Analysis[which(Plant_Info_Analysis$MothOccupancy=="101"), ]$MothOccupancy <- "Invasive Moth"#
#
# Native Moth Only#
Plant_Info_Analysis[which(Plant_Info_Analysis$MothOccupancy=="011"), ]$MothOccupancy <- "Native Moth"#
Plant_Info_Analysis[which(Plant_Info_Analysis$MothOccupancy=="010"), ]$MothOccupancy <- "Native Moth"#
#
# Native and Invasive Moths#
Plant_Info_Analysis[which(Plant_Info_Analysis$MothOccupancy=="110"), ]$MothOccupancy <- "Invasive and Native Moths"#
Plant_Info_Analysis[which(Plant_Info_Analysis$MothOccupancy=="111"), ]$MothOccupancy <- "Invasive and Native Moths"#
#
Plant_Info_Analysis$MothOccupancy %<>% factor(levels=c(#
	"No Insects Observed",             #
	"Moth Damage Only,\nNo Insects Observed",#
	"Native Moth",                           #
	"Invasive Moth",                         #
	"Invasive and Native Moths"#
))
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Info_Survival <- Plant_Info_Analysis %>% #
	filter(DaysAlive!=0) %>%#
	dplyr::select(-c(First_Size, Parent)) %>% #
	.[complete.cases(.),] %>%#
	renameSpecies#
Plant_Info_Survival$Island %<>% as.factor#
Plant_Info_Survival$IslandFullNames <- Plant_Info_Survival$Island#
levels(Plant_Info_Survival$IslandFullNames) <- c(#
	 "Island 1",#
	 "Island 2",#
	 "Island 3",#
	 "Island 4",#
	 "Island 5",#
	 "Coastal\nGrassland",#
	 "Beach\nDunes"#
)#
Plant_Info_Survival$DeadFactor <- factor(#
	Plant_Info_Survival$Dead, #
	levels=c("0","1"), #
	ordered=T#
)#
levels(Plant_Info_Survival$DeadFactor) <- c("No","Yes")#
Plant_Info_Survival_stricta <- Plant_Info_Survival %>% #
	filter(Species=="Opuntia stricta")#
Plant_Info_Survival_pusilla <- Plant_Info_Survival %>% #
	filter(Species=="Opuntia pusilla")#
#
write.csv(Plant_Info_Survival_stricta, "../data/Plant_Info_Survival_stricta.csv")#
write.csv(Plant_Info_Survival_pusilla, "../data/Plant_Info_Survival_pusilla.csv")
str(Plant_Surveys_by_Year)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Appendix/Survival')
temp <- Plant_Surveys_by_Year %>%#
	filter(!is.na(Alive)) %>%#
	filter(!is.na(Species))#
ggplot(temp, aes(factor(Alive), RecruitmentMode)) + #
	geom_hline(yintercept=0) +#
	geom_boxplot(position="dodge") + #
	facet_wrap(~Species) +#
	KEStheme() +#
	xlab("Native Moth Present at time t?") + ylab("Annual RGR")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Appendix/Survival')
temp <- Plant_Surveys_by_Year %>%#
	filter(!is.na(Alive)) %>%#
	filter(!is.na(Species))#
ggplot(temp, aes(factor(Alive), RecruitmentMode)) + #
	geom_hline(yintercept=0) +#
	geom_boxplot(position="dodge")
str(Plant_Info_Survival_stricta)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Appendix/Survival')
temp <- Plant_Info_Survival_stricta %>%#
	filter(!is.na(RecruitmentMode)) %>%#
	filter(!is.na(Species))#
ggplot(temp, aes(factor(RecruitmentMode), DaysAlive)) + #
	geom_hline(yintercept=0) +#
	geom_boxplot(position="dodge")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Appendix/Survival')
temp <- Plant_Info_Survival_stricta %>%#
	filter(!is.na(RecruitmentMode)) %>%#
	filter(!is.na(Species))#
ggplot(temp, aes(factor(RecruitmentMode), DaysAlive)) + #
	geom_hline(yintercept=0) +#
	geom_boxplot(position="dodge") + #
	facet_wrap(~Species) +#
	KEStheme() +#
	xlab("Recruitment Mode") + ylab("Days Alive During the Study\n(Max. Days Alive = 1000)")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Appendix/Survival')
temp <- Plant_Info_Survival_stricta %>%#
	filter(!is.na(RecruitmentMode)) %>%#
	filter(!is.na(Species))#
ggplot(temp, aes(factor(RecruitmentMode), DaysAlive)) + #
	geom_hline(yintercept=0) +#
	geom_boxplot(position="dodge") + #
	facet_wrap(~Species) +#
	KEStheme() +#
	scale_y_continuous(limits=c(0,1000)) +#
	xlab("Recruitment Mode") + ylab("Days Alive During the Study\n(Max. Days Alive = 1000)")
str(Plant_Info_Survival_stricta)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Appendix/Survival')
temp <- Plant_Info_Survival_stricta %>%#
	filter(!is.na(RecruitmentMode)) %>%#
	filter(!is.na(Species))#
ggplot(temp, aes(factor(RecruitmentMode), DaysAlive, fill=factor(DeadFactor))) + #
	geom_hline(yintercept=0) +#
	geom_boxplot(position="dodge") + #
	facet_wrap(~Species) +#
	KEStheme() +#
	scale_y_continuous(limits=c(0,1000)) +#
	xlab("Recruitment Mode") + ylab("Days Alive During the Study\n(Max. Days Alive = 1000)")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Appendix/Survival')
temp <- Plant_Info_Survival_stricta %>%#
	filter(!is.na(RecruitmentMode)) %>%#
	filter(!is.na(Species))#
ggplot(temp, aes(factor(RecruitmentMode), DaysAlive, fill=factor(DeadFactor))) + #
	geom_hline(yintercept=0) +#
	geom_boxplot(position="dodge") + #
	facet_wrap(~Species) +#
	KEStheme() +#
	scale_y_continuous(limits=c(0,1000)) +#
	xlab("Recruitment Mode") + ylab("Days Alive During the Study\n(Max. Days Alive = 1000)") +#
	guides(fill=guide_legend(title="Died During Study?"))
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Appendix/Survival')
temp <- Plant_Info_Survival_stricta %>%#
	filter(!is.na(RecruitmentMode)) %>%#
	filter(!is.na(Species))#
ggplot(temp, aes(factor(RecruitmentMode), DaysAlive, fill=factor(DeadFactor))) + #
	geom_hline(yintercept=0) +#
	geom_boxplot(position="dodge") + #
	facet_wrap(~Species) +#
	KEStheme() +#
	scale_y_continuous(limits=c(0,1000)) +#
	xlab("Recruitment Mode") + ylab("Days Alive During the Study\n(Max. Days Alive = 1000)") +#
	guides(fill=guide_legend(title="Died During Study?")) +#
	theme(legend.position="bottom")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Appendix/Survival')
temp <- Plant_Info_Survival_pusilla %>%#
	filter(!is.na(RecruitmentMode)) %>%#
	filter(!is.na(Species))#
ggplot(temp, aes(factor(RecruitmentMode), DaysAlive, fill=factor(DeadFactor))) + #
	geom_hline(yintercept=0) +#
	geom_boxplot(position="dodge") + #
	facet_wrap(~Species) +#
	KEStheme() +#
	scale_y_continuous(limits=c(0,1000)) +#
	xlab("Recruitment Mode") + ylab("Days Alive During the Study\n(Max. Days Alive = 1000)") +#
	guides(fill=guide_legend(title="Died During Study?")) +#
	theme(legend.position="bottom")
str(Plant.Surveys.by.Year)
ls()
str(Plant.Surveys.RGR.pusilla)
setwd('/Users/KSauby/Documents/Projects/ACSampling_project')
library(ProjectTemplate)#
#
# when working on a Windows computer#
# setwd("C:/Users/KSauby/Dropbox/gradschool/Research/Projects/sampling")#
#
# load project#
load.project()
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript')
rmarkdown::render('Manuscript.Rmd')
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
source("1_set_variables.R")#
source("2_create_realizations.R")#
source("3_summarise_network_information.R")#
source("4_calculate_realization_summary_statistics.R")#
Sys.time()#
#source("5_run_simulations.R")#
source("6_merge_simulation_results.R")#
source("7_simulation_summary_statistics.R")#
source("8_number_of_bootstraps_per_realization_sampling.R")
head(patch_data)
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
# -----------------------------------------------------------------------------##
# ABUNDANCE VARIABLES#
# -----------------------------------------------------------------------------##
# -----------------------------------------------------------------------------##
# OCCUPANCY VARIABLES#
# -----------------------------------------------------------------------------##
ovar <- c(#
	"Stricta",#
	"Pusilla",#
	"Cactus"#
)#
# -----------------------------------------------------------------------------##
# RATIO VARIABLES#
# -----------------------------------------------------------------------------##
rvar <- c(#
	"MEPR_on_Stricta",#
	"CACA_on_Stricta",#
	"Percent_Cover_Stricta",#
	"Height_Stricta",#
	"Old_Moth_Evidence_Pusilla",#
	"Old_Moth_Evidence_Stricta"#
)#
#
# "Percent_Cover_Pusilla",#
# "Height_Pusilla",#
# )#
ratio.variables <- c("MEPR_on_Stricta", "CACA_on_Stricta")
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
# REALIZATION DATA#
x_start 		<- 1#
x_end 			<- 30#
y_start 		<- 1#
y_end 			<- 30#
n.networks 		<- c(5, 15, 10, 20, 30, 40)#
n.realizations 	<- 1#
SpeciesInfo 	<- PlotSurveys_season1#
buffer			<- 5#
start.seed		<- 1#
variables		<- ovar#
#
# CREATE REALIZATIONS#
patch_data <- createSpeciesPatchRealizations(#
	x_start, #
	x_end,#
	y_start, #
	y_end, #
	buffer, #
	n.networks, #
	n.realizations, #
	SpeciesInfo, #
	start.seed,#
	variables#
)#
#
# convert NAs to zeros#
patch_data[,c(#
	"CACA_on_Pusilla",#
	"CACA_on_Stricta",#
	"MEPR_on_Pusilla",#
	"MEPR_on_Stricta",#
	"Old_Moth_Evidence_Pusilla",#
	"Old_Moth_Evidence_Stricta",#
	"Percent_Cover_Pusilla",#
	"Percent_Cover_Stricta",#
	"Height_Pusilla",#
	"Height_Stricta"#
)] %<>% apply(., 2, NA_is_Zero_Function)
head(SpeciesInfo)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
x <- y <- Rel_x <- Rel_y <- NetworkID <- m <- NULL#
	network.length = length(n.networks)#
	seed = seq(start.seed, start.seed + 2*n.realizations + #
		sum(n.networks)*n.realizations*2 + 1, by=1)#
    grid <- createPopulation(#
		x_start + buffer, #
		x_end - buffer, #
		y_start + buffer, #
		y_end - buffer#
	)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
patch.array <- vector("list", network.length)#
	for (i in 1:length(n.networks)) { 	#
		patch.array[[i]] <- list()#
		for (j in 1:n.realizations) { 			#
			patch = createSpeciesPatch(#
				grid, #
				n.networks[i], #
				seed, #
				cluster.info=SpeciesInfo, #
				x=x, #
				y=y, #
				Rel_x=Rel_x, #
				Rel_y=Rel_y#
			)	#
			# fill in absence data#
			population = createPopulation(#
				x_start, #
				x_end, #
				y_start, #
				y_end#
			)#
			patch %<>% merge(population, by=c("x", "y"), all=T)#
			for (k in 1:length(variables)) {#
				patch[which(is.na(patch[,variables[k]])), #
					variables[k]] <- 0#
			}#
			patch[which(is.na(patch$NetworkID)), ]$NetworkID <- seq(#
				max(patch$NetworkID, na.rm=T) + 1,#
				length(patch[which(is.na(patch$NetworkID)), ]$NetworkID) + #
					max(patch$NetworkID, na.rm=T), #
				by=1#
			) #
			# other info#
			patch.array[[i]][[j]] <- patch#
			patch.array[[i]][[j]]$n.networks <- n.networks[i]#
			patch.array[[i]][[j]]$realization <- j#
			# fill in missing m values#
			patch.array[[i]][[j]] %<>% #
				group_by(NetworkID) %>% #
				mutate(m = length(m))#
		}#
		max.seed = max(patch$rotation.seed, na.rm=T)#
		if (is.na(n.networks[i+1])) {seed = NA} else {#
			seed = seq(max.seed, max.seed + 2*n.realizations + #
				sum(n.networks)*n.realizations*2 + 1, by=1)#
		}#
	}	#
	# compress list of patch data to dataframe
i
setwd('/Users/KSauby/Documents/Projects/ACS/R')
patch.array[[i]] <- list()
j
setwd('/Users/KSauby/Documents/Projects/ACS/R')
patch = createSpeciesPatch(#
				grid, #
				n.networks[i], #
				seed, #
				cluster.info=SpeciesInfo, #
				x=x, #
				y=y, #
				Rel_x=Rel_x, #
				Rel_y=Rel_y#
			)	#
			# fill in absence data#
			population = createPopulation(#
				x_start, #
				x_end, #
				y_start, #
				y_end#
			)
str(SpeciesInfo)
n.networks[i]
setwd('/Users/KSauby/Documents/Projects/ACS/R')
patch = createSpeciesPatch(#
				grid, #
				n.networks[i], #
				seed, #
				cluster.info=SpeciesInfo, #
				x=x, #
				y=y, #
				Rel_x=Rel_x, #
				Rel_y=Rel_y#
			)
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
cluster.info=SpeciesInfo
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
n.networks=n.networks[i]
setwd('/Users/KSauby/Documents/Projects/ACS/R')
NetworkID <- temp_coords <- NULL#
	cluster.centers <- filter(cluster.info, Rel_x==0 & Rel_y==0)#
	# determine locations and species information for stage 1 plots#
	n1plots = sampleGridPopulation(grid, n.networks, cluster.centers, seed)#
	seed = seed[-(1:2)]
grid
setwd('/Users/KSauby/Documents/Projects/ACS/R')
cluster.centers
setwd('/Users/KSauby/Documents/Projects/ACS/R')
n.networks
setwd('/Users/KSauby/Documents/Projects/ACS/R')
seed
setwd('/Users/KSauby/Documents/Projects/ACS/R')
n1plots = sampleGridPopulation(grid, n.networks, cluster.centers, seed)
library(ACS)
setwd('/Users/KSauby/Documents/Projects')
setwd("./ACS")#
#setwd("./modresproc")#
devtools::test()#
devtools::document()#
devtools::install()#
devtools::build()#
devtools::RCMD()
library(testthat)
setwd('/Users/KSauby/Documents/Projects')
setwd("./ACS")#
#setwd("./modresproc")#
devtools::test()
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
test_that("x_HT, Horvitz-Thompson Mean Estimator", {#
	# Ch. 24, Exercise #2, p. 307, from Thompson (2002)#
	expect_that(#
		round(#
			x_HT(#
				N = 1000, #
				n1 = 100, #
				m = c(2,3,rep(1,98)), #
				y = c(3,6,rep(0, 98)), #
				sampling = "SRSWOR", #
				criterion = 0#
			)*1000, 0#
		),#
		equals(38)#
	)#
	# Example from Thompson (1990), end of second full paragraph, p. 1055#
	mk <- c(1,0,2,2)#
	y_value <- c(1,2,10,1000)#
	sampling <- c("S","C","S","C")#
	dat <- data.frame(mk, y_value, sampling)#
	dat$mk %<>% as.numeric#
	dat$y_value %<>% as.numeric#
	dat_filter <- dat %>% filter(sampling=="S" | y_value > 4)#
	expect_that(#
		round(#
			x_HT(#
				N = 5, #
				m = dat_filter$mk, #
				n1 = 2, #
				y = dat_filter$y_value#
			), 2#
		),#
		equals(289.07)#
	)#
})
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
expect_that(#
		round(#
			x_HT(#
				N = 1000, #
				n1 = 100, #
				m = c(2,3,rep(1,98)), #
				x = c(3,6,rep(0, 98)), #
				sampling = "SRSWOR", #
				criterion = 0#
			)*1000, 0#
		),#
		equals(38)#
	)
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
x_HT(#
				N = 1000, #
				n1 = 100, #
				m = c(2,3,rep(1,98)), #
				x = c(3,6,rep(0, 98)), #
				sampling = "SRSWOR", #
				criterion = 0#
			)*1000, 0
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
round(#
			x_HT(#
				N = 1000, #
				n1 = 100, #
				m = c(2,3,rep(1,98)), #
				x = c(3,6,rep(0, 98)), #
				sampling = "SRSWOR", #
				criterion = 0#
			)*1000, 0#
		)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
#' Calculate the Horvitz-Thompson mean of an adaptive cluster sample.#
#' #
#' @param pi_i_values vector of inclusion probabilities, if not calculated using this function. Default is \code{NULL}.#
#' @param N Population size. #
#' @param m Number of units satisfying the ACS criterion in network $i$.#
#' @param n1 Initial sample size.#
#' @param y Attribute data about species of interest (e.g., abundance, presence/absence).#
#' @param sampling A vector (\code{character} format) describing whether units were included in the initial sample or subsequent ACS sample. Units selected in the initial sample should be given the value "Initial_Sample" in the \code{sampling} vector.#
#' @param criterion The threshold value of \code{y} that triggers adaptive cluster sampling.#
#' @description This calculate the Horvitz-Thompson mean of an adaptive cluster sample done by sampling without replacement.#
#'#
#'where $v$ is the number of distinct units in the sample and#
#'$J_k$ is an indicator variable, equalling 0 if the $k$ th unit in the sample does not satisfy the condition and was not selected in the initial sample; otherwise, $J_k = 1$.#
#' #
#' @return The Horvitz-Thompson mean.#
#' @references Sauby, K.E and Christman, M.C. \emph{In preparation.} Restricted adaptive cluster sampling.#
#'#
#' Thompson, S. (1990). Adaptive Cluster Sampling. \emph{Journal of the American Statistical Association}, 85(412): 1050--1059.#
#' @examples #
#' library(magrittr)#
#' library(plyr)#
#' library(dplyr)#
#' library(ggplot2)#
#'#
#' # EXAMPLE 1: Sampling of population from Figure 1, Thompson (1990)#
#'#
#' data(Thompson1990Figure1Population)#
#' data(Thompson1990Figure1Sample)#
#' #
#' # plot sample overlaid onto population#
#' ggplot() +#
#' 	geom_point(data=Thompson1990Figure1Population, aes(x,y, size=factor(y_value),#
#' 		shape=factor(y_value))) +#
#' 	scale_shape_manual(values=c(1, rep(16, length(2:13)))) +#
#' 	geom_point(data=Thompson1990Figure1Sample, aes(x,y), shape=0, size=7)#
#' #
#' # REPLACE WITH CREATEACS FUNCTION#
#'#
#' # INITIATE ACS#
#' # assign species information to units in the initial sample#
#' S = merge(#
#' 	Thompson1990Figure1Population,#
#' 	Thompson1990Figure1Sample, #
#' 	all.y=TRUE#
#' )#
#' #
# create list of neighboring ("cluster") plots#
#' Z = list()  					#
#' S$Sampling <- "Initial_Sample"#
#' # add the rest of the units for each network in the initial sample#
#' Z = rbind.fill(S, Thompson1990Figure1Population %>% #
#' 	filter(Thompson1990Figure1Population$NetworkID %in% S$NetworkID))#
#' Z[which(is.na(Z$Sampling)), ]$Sampling <- "Cluster"#
#' Networks = filter(Z, y_value > 0)#
#' # fill in edge units#
#' E = as.data.frame(cbind(#
#' 	x = rowSums(expand.grid(Networks$x, c(1,-1,0,0))),#
#' 	y = rowSums(expand.grid(Networks$y, c(0,0,1,-1)))#
#' )) %>% #
#' mutate(Sampling="Edge")#
#' # remove duplicate units#
#' Z %<>% rbind.fill(E) %>%#
#' mutate(temp_coords = paste(x, y, sep=""))#
#' Z =  Z[!duplicated(Z$temp_coords),]#
#' Z %<>% dplyr::select(-temp_coords)#
#' # fill in y_value#
#' Z[which(is.na(Z$y_value)), ]$y_value <- 0#
#' # fill in m#
#' Z[which(Z$y_value==0 & Z$Sampling=="Edge"), ]$m <- 0#
#' #
#' 	N = dim(Thompson1990Figure1Population)[1] #
#' 	n1 = dim(Thompson1990Figure1Sample)[1]#
#' 	m = Z$m#
#' 	y = Z$y_value#
#' 	sampling = Z$Sampling#
#' 	criterion=0#
#
#' # CALCULATE x_HT#
#' x_HT(#
#' 	N = N, #
#' 	n1 = n1,#
#' 	m = m, #
#' 	y = y, #
#' 	sampling = Z$Sampling,#
#' 	criterion=0#
#' ) #
#'#
#' # EXAMPLE 2: Table 1 from Thompson (1990)#
#' data(Thompson1990Table1data)#
#' (Thompson1990Table1 = Thompson1990Table1data %>%#
#' group_by(sampling_effort) %>%#
#' summarise(#
#' 	`y (added through SRSWOR)` = toString(y_value[which(sampling=="SRSWOR")]),#
#' 	`y (added through ACS)` = toString(y_value[which(sampling=="ACS")]),#
#' 	y_bar_1 = mean(y_value[which(sampling=="SRSWOR")]),#
#' 	x_HT = round(x_HT(N, n1, m, y_value, sampling, 5), 2),#
#' 	y_bar = round(mean(y_value),2)#
#' 	)#
#' )#
#' #
#' # EXAMPLE 3: #
#' # data(cactus_realizations)#
#' # realization = cactus_realizations %>% filter(n.networks==40)#
#
#' # EXAMPLE 4:#
#' # Ch. 24, Exercise #2, p. 307, from Thompson (2002)#
#' # Horvitz-Thompson mean times the population size; should equal 38#
#' x_HT(#
#'     N 		= 1000, #
#'     n1 		= 100, #
#'     m 		= c(2,3,rep(1,98)), #
#'     y 		= c(3,6,rep(0, 98)),#
#'     sampling = "SRSWOR",#
#'     criterion =0#
#' )*1000 %>% round(0)#
#
#' @export#
#
x_HT <- function(x, N, n1, pi_i_values=NULL, m=NULL, sampling=NULL, criterion=NULL) {#
	if (!(is.null(sampling)) & !(is.null(criterion))) {#
		J = ifelse(y >= criterion | sampling=="SRSWOR", 1, 0)#
	} else {#
		J = 1#
	}#
	if (is.null(pi_i_values)) {#
		pi_i_values = pi_i(N, n1, m)#
	}#
	x_HT = sum(x*J/pi_i_values, na.rm=T)/N#
	return(x_HT)	#
}
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
round(#
			x_HT(#
				N = 1000, #
				n1 = 100, #
				m = c(2,3,rep(1,98)), #
				x = c(3,6,rep(0, 98)), #
				sampling = "SRSWOR", #
				criterion = 0#
			)*1000, 0#
		)

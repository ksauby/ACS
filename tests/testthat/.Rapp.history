94.93*.1170+90.24*5+(92.13+6+87.2)/3*.833
94.93*.1170+90.24*.05+(92.13+6+87.2)/3*.833
94.93*.1170+90.24*.05+(92.13+6+87.2+79.5)/3*.833
.117*94.93+.05*90.24+.833*(92.13+87.2+6)/3
.117*94.93+.05*90.24+.833*(92.13+87.2+6+79.4)/3
.117+.05+.833
20000/11.26
60000/11.26
.58+4.66+11.64
.29*3
88-4-3-1-16
2.03*.8
*.84.07
4.07*.8
4.95*.8
4.95*.9
42+1+5+6
5.82+2.32
8.14*4
24.44/250
68/500
install.packages("blogdown")
blogdown::install_hugo()
library(blogdown)
blogdown::install_hugo()
library(blogdown)
blogdown::install_hugo()
blogdown::new_site()
library(dplyr)
.libPaths()
library(dplyr)
library(plotly)
library(magrittr)
.libPaths()
41180-35583
41200-35583
6+3.17+5
11.64*.7
.75*4
.85*4
.85*5
.9*5
.9*4
1+2+5+17+12+19
.29*4
.41*6
.41*10
2.89/6
2.89/6*10
.29*4
.58*4
.58*10
.43*4
.43*10
.48*10
.48*4
.39*4
.39*8
.39*10
4*.22
8*.22
4*.29
8*.29
4*.35
8*.35
1.74*5
1.74*5*.9
.58*20
5.99*.95
5.99*.95 - .2
286*.13
6*8*.13
15*.32
33+29
33+29+25
33+29+25+13
1.15-.87
1.15-.62
50+.29+.33
1.15 - .50-.29-.33
8.27+.69
7.76+.69
19+13+7
233.27*11
19+13+7
3081.26-926.29
70.50-52.75
70.50-52.75-.99
70.50-52.75
6.7+3.75
10.79-10.45
39.99*.6
80/3
263.50/541.71
485.04/541.71
263.50/541.71
397.07/541.71
3/75
25.5/75
2.5/75
32/500
5.82/4*10
5.82/4*10*.7
5.82/4*10*.6
5.82/4*10*.65
5.82/4*6*.65
5.82/4*4*.65
5.82/4*4*.6
5.82/4*6*.6
4.94*.8
4.66*.8
4.66*.7
4.66*.75
3.48/4
3.48/4*12
3.48/4*12*.9
3.48/4*12*.8
.29+.32+.05+.05
2.91/2
3.49/2
6.97/2
(3.49+5.82)/2
3.49/2
4.94/2
2.32+14.83
17.15/2
7.57/2
6.99/2
9.31/2
11.64/2
4.66/2
11.64/2
7.57/2
4.66/2
(1.74+2.61+12.21)/2
.04*4+.2*4+.32+.37+.1
.04*4+.2*4+.32+.37+.1+.8+.25+.25+.48+.45+.6+.17+.22+.08
.04*4+.2*4+.32+.37+.1+.8+.25+.25+.48+.45+.6+.17+.22+.08+.13*8
.04*4+.2*4+.32+.37+.1+.8+.25+.25+.48+.45+.6+.17+.22+.08+.13*8+.32+.32+.29+.33+.32
.04*4+.2*4+.32+.37+.1+.8+.25+.25+.48+.45+.6+.17+.22+.08+.13*8+.32+.32+.29+.33+.32+1+.5+.45+.03+.11+.02
12.9-9.78
.22+.08+.25+.17+.6+.25+.32+.33+.29+.32+.32+1+.5+2+1+.04*4+.2*4+.1+.45+.37+.32+.8+.48+.13*8+.12+.03+.11+.02+.45
candidates <- c( Sys.getenv("R_PROFILE"),#
                 file.path(Sys.getenv("R_HOME"), "etc", "Rprofile.site"),#
                 Sys.getenv("R_PROFILE_USER"),#
                 file.path(getwd(), ".Rprofile") )#
#
Filter(file.exists, candidates)
file.path(Sys.getenv("HOME"), ".Rprofile")
.libPaths()[2]
.libPaths()
.libPaths()[2]
.libPaths(.libPaths())
.libPaths()
1.99*6
8.7*.8
8.7*.7
8.7*.75
1+.29+.2+.19+.15
2.13-1.83
1+.2+.19+.15+.6
1+.2+.15+.6
2.13-1.95
1+.2+.6+.15+.18
.4+.13+.18
.29+.29+.04+.04
setwd('/Users/KSauby/Documents/Projects/ACS/R')
#' Create a Simple Random Sample Without Replacement.#
#' #
#' @param population_data grid of population to be sampled.#
#' @param seed vector of numbers to feed to \code{set.seed()} so that the sampling is reproducible. Defaults to NA so that it is not necessary to specific a random number seed.#
#' @param n1 initial sample size (sampled according to simple random sampling without replacement).#
#' @param wreplacement Should sampling be done with replacement? Defaults to FALSE.#
#' @return A restricted adaptive cluster sample.#
#' @examples#
#' # example#
#' # create the population#
#' # create the patch#
#' # then sample#
#' #
#' data(Thompson1990Figure1Population)#
#' data(Thompson1990Figure1Sample)#
#' Z = createSRS(Thompson1990Figure1Population, seed=2, n1=10)#
#' @export#
#
createSRS <- function(population_data, n1, seed=NA, wreplacement=F) {#
	if (!is.na(seed)) {set.seed(seed)}#
	sample <- population_data[sample(#
		x 		= 1:dim(population_data)[1], #
		size 	= n1, #
		replace = wreplacement#
	), ]#
	if (wreplacement==F) {#
		sample$Sampling <- "SRSWOR"#
	} else {#
		sample$Sampling <- "SRSWR"#
	}#
	return(sample)		#
}
library(magrittr)
library(dplyr)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
#' Assign network membership of adaptive cluster sample units.#
#
#' @param dataframe Dataset to be used, containing information about units containing the species of interest, including x and y coordinates.#
#' @param plot.size The length and width of plots, in coordinate units. Defaults to 1.#
#
#' @description This function assigns network membership to units in an adaptive cluster sample; if units are neighbors, they are assigned to the same network ID. #
#
#' @return Returns dataframe with a new column for Network ID as well as a column for m, the number of units in the network.#
#
#' @references Sauby, K.E and Christman, M.C. \emph{In preparation.} Restricted adaptive cluster sampling.#
#
#' @examples#
#' data(Thompson1990Figure1Population)#
#' #
#' # plot species abundance#
#' library(magrittr)#
#' library(ggplot2)#
#' library(dplyr)#
#' ggplot(data=Thompson1990Figure1Population %>% #
#' 	filter(y_value > 0), aes(x,y, size=factor(y_value))) + geom_point()#
#' #
#' # assign network membership of units containing the species of interest#
#' P_networks <- assignNetworkMembership(Thompson1990Figure1Population %>%#
#' 	 filter(y_value > 0))#
#' #
#' # plot networks#
#' ggplot(#
#' 	data=P_networks, #
#' 	aes(x,y, size=factor(y_value), shape=factor(NetworkID))#
#' ) + geom_point()#
#' # coordinates should be given as x and y#
#
#' @export#
#' @importFrom intergraph asIgraph#
#' @importFrom magrittr %>%#
#' @importFrom magrittr %<>%#
#' @importFrom dplyr group_by#
#' @importFrom dplyr mutate#
#' @importFrom stats dist#
#' @importFrom dplyr summarise_each#
#' @importFrom dplyr filter#
#' @importFrom magrittr %$%#
#' @importFrom dplyr arrange#
#' @importFrom dplyr select#
#' @importFrom network network#
#' @importFrom igraph clusters#
#
assignNetworkMembership <- function(dataframe, plot.size=1) {#
	NetworkID <- x <- NULL#
	D <- as.matrix(dist(cbind(dataframe$x, dataframe$y), method="euclidian"))#
	D = ifelse(D > plot.size, 0, D)#
	D %<>% as.data.frame#
	G <- network(D, directed=FALSE) %>% asIgraph()#
	dataframe$NetworkID <- clusters(G)$membership#
	dataframe %<>%#
		group_by(NetworkID) %>%#
		mutate(m = length(x)) %>%#
		as.data.frame#
	return(dataframe)#
}
library(intergraph)
library(igraph)
library(stats)
library(network)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
#' Create the population displayed in Figure 1 from Thompson (1990)#
#' #
#' @return The population displayed in Figure 1 from Thompson (1990).#
#' @examples #
#' library(ggplot2)#
#' library(magrittr)#
#' library(dplyr)#
#' Thompson1990Figure1Population <- createThompson1990Figure1Population()#
#' p <- ggplot(Thompson1990Figure1Population %>% filter(m>1), aes(x, y, #
#' 	colour=NetworkID, label=NetworkID))#
#' p + annotate("rect", xmin=1, xmax=20, ymin=1, ymax=20, alpha=0, #
#' colour="grey") + #
#' 	geom_point(aes(size=factor(y_value))) + #
#' 	scale_colour_gradientn(colours = rainbow(7))#
#
#' @references Sauby, K.E and Christman, M.C. \emph{In preparation.} Restricted adaptive cluster sampling.#
#' Thompson, S. (1990). Adaptive Cluster Sampling. \emph{Journal of the American Statistical Association}, 85(412): 1050--1059.#
#' @export#
#
createThompson1990Figure1Population <- function() {#
	y_value <- NetworkID <- x <- y <- m <- NULL#
	# create population#
	empty = rep(0,20)#
	P = rbind(#
		c(rep(0,4),5,13,3,rep(0,13)),#
		c(rep(0,4),2,11,2,rep(0,13)),#
		as.data.frame(sapply(empty, rep, 11)), # rows 3-13#
		c(rep(0,9),3,1,rep(0,9)),#
		c(rep(0,8),5,39,10,rep(0,9)),#
		c(rep(0,8),5,13,4,rep(0,9)),#
		c(rep(0,7),2,22,3,rep(0,10)),#
		c(rep(0,12),10,8,rep(0,6)),#
		c(rep(0,12),7,22,rep(0,6)),#
		c(rep(0,20))#
	)#
	# add x and y coordinates#
	P = cbind(#
		expand.grid(x = rev(1:20), y = 1:20), #
		y_value = as.vector(unlist(P))#
		) #%>%#
		#filter(y_value > 0)#
	names(P)[1:2] <- c("y", "x")#
	# assign network membership of units containing the species of interest#
	P_networks <- assignNetworkMembership(P %>% filter(y_value > 0), plot.size=1)#
	# fill in m values#
	P = merge(P, P_networks, all=T)#
	P[which(P$y_value==0), ]$m <- 1#
	# fill in NetworkIDs#
	maxID <- max(P$NetworkID, na.rm=T)#
	P[which(is.na(P$NetworkID)), ]$NetworkID <- seq(from=(maxID + 1), #
		to=(maxID + length(which(is.na(P$NetworkID)))), by=1)#
	P %<>% #
		arrange(NetworkID) %>%#
		dplyr::select(x, y, NetworkID, m, y_value)#
	return(P)#
}
Thompson1990Figure1Population <- createThompson1990Figure1Population()
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
population_data=Thompson1990Figure1Population
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
n1=10
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
y_variable="y_value"
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
seed=5
setwd('/Users/KSauby/Documents/Projects/ACS/R')
f_max=2
setwd('/Users/KSauby/Documents/Projects/ACS/R')
initial_sample=NULL
setwd('/Users/KSauby/Documents/Projects/ACS/R')
condition=0
setwd('/Users/KSauby/Documents/Projects/ACS/R')
y_value <- x <- y <- Sampling <- NetworkID <- m <- NULL#
	# get primary sample#
	if (is.data.frame(initial_sample)) {#
		S = merge(population_data, initial_sample, all.y=TRUE) 	#
		S$Sampling <- "Primary Sample"#
		S$step <- 0#
		} else {#
			if (!is.na(seed)) {set.seed(seed)}#
				S <- createSRS(population_data, n1)#
				S$step <- 0#
	}#
	# filter out primary samples that satisfy the condition#
	Networks <- S %>% #
		filter_(interp(~y_variable > condition))
library(lazyeval)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
y_value <- x <- y <- Sampling <- NetworkID <- m <- NULL#
	# get primary sample#
	if (is.data.frame(initial_sample)) {#
		S = merge(population_data, initial_sample, all.y=TRUE) 	#
		S$Sampling <- "Primary Sample"#
		S$step <- 0#
		} else {#
			if (!is.na(seed)) {set.seed(seed)}#
				S <- createSRS(population_data, n1)#
				S$step <- 0#
	}#
	# filter out primary samples that satisfy the condition#
	Networks <- S %>% #
		filter_(interp(~y_variable > condition))
Networks
y_variable
condition
interp(~y_variable > condition)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
Networks <- S %>% #
		filter_(y_variable > condition)
Networks
setwd('/Users/KSauby/Documents/Projects/ACS/R')
Networks <- S %>% #
		filter(y_variable > condition)
Networks
S
setwd('/Users/KSauby/Documents/Projects/ACS/R')
S[which(y_variable > condition), ]
setwd('/Users/KSauby/Documents/Projects/ACS/R')
y_variable
str(S)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
Networks <- S[which("y_value" > 0), ]
Networks
Networks <- S[which("y_value" == 0), ]
Networks
Networks <- S[which(S$y_value == 0), ]
Networks
setwd('/Users/KSauby/Documents/Projects/ACS/R')
Networks <- S %>% #
		filter_(interp(~.data$y_variable > condition))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
Networks <- S %>% #
		filter_(interp(~y_variable) > condition)
Networks
Networks <- S %>% #
		filter_(interp(~y_variable) = condition)
Networks <- S %>% #
		filter_(interp(~y_variable) == condition)
Networks
setwd('/Users/KSauby/Documents/Projects/ACS/R')
interp(~y_variable > condition)
condition
y_variable
interp(~ y_variable > condition)
interp(~ y_variable > quote(condition))
interp(~ y_variable > condition, condition=quote(condition))
interp (~ x > y, .values=list(x=y_variable, y=condition))
interp (~ .data$x > y, .values=list(x=y_variable, y=condition))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
Networks <- S %>% #
		filter_(interp (~ .data$x > y, .values=list(x=y_variable, y=condition)))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
dim(Networks)[1] > 0
setwd('/Users/KSauby/Documents/Projects')
setwd("./ACS")#
#setwd("./modresproc")#
#devtools::test()#
devtools::check()
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
S <- createSRS(Thompson1990Figure1Population, 10, seed=2)#
	S[5, c("x", "y")] <- c(10,6)#
	init <- S[, c("x", "y")]#
	Z <- createRACS(Thompson1990Figure1Population, 10, "y_value", #
		initial_sample=init)
Z
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
dim(Z[which(Z$y_value > 0), ])[1]
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
test_that("createRACS, Does the function work when providing the initial sample?", {#
	S <- createSRS(Thompson1990Figure1Population, 10, seed=2)#
	S[5, c("x", "y")] <- c(10,6)#
	init <- S[, c("x", "y")]#
	Z <- createRACS(Thompson1990Figure1Population, 10, "y_value", #
		initial_sample=init) #
	expect_equal(#
		dim(Z[which(Z$y_value > 0), ])[1],#
		9#
	)#
})
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
S <- createSRS(Thompson1990Figure1Population, 10, seed=2)#
	S[5, c("x", "y")] <- c(10,6)#
	init <- S[, c("x", "y")]#
	Z <- createRACS(Thompson1990Figure1Population, 10, "y_value", #
		initial_sample=init) #
	expect_equal(#
		dim(Z[which(Z$y_value > 0), ])[1],#
		9#
	)
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
dim(Z[which(Z$y_value > 0), ])[1]

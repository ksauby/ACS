var
setwd('/Users/KSauby/Documents/Projects/ACS/R')
mean_of_observed_means = interp(#
					~mean(var, na.rm = TRUE), #
					var = dplyr::sym(#
						as.name(#
							paste(#
								variables[i],#
								"_mean_observed",#
								sep=""#
							)#
						)#
					),#
				sample_size = interp(#
					~length(var[which(!is.na(var))]), #
					var = as.name(#
						paste(#
							variables[i],#
							"_mean_observed",#
							sep=""#
						)#
					)#
				)#
			)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
mean_of_observed_means
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp %>%#
			summarise(#
				mean_of_observed_means = interp(#
					~mean(var, na.rm = TRUE), #
					var = dplyr::sym(#
						as.name(#
							paste(#
								variables[i],#
								"_mean_observed",#
								sep=""#
							)#
						)#
					),#
				sample_size = interp(#
					~length(var[which(!is.na(var))]), #
					var = as.name(#
						paste(#
							variables[i],#
							"_mean_observed",#
							sep=""#
						)#
					)#
				)#
			)
)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
mean_of_observed_means = dplyr::sym(interp(#
					~mean(var, na.rm = TRUE), #
					var = as.name(#
						paste(#
							variables[i],#
							"_mean_observed",#
							sep=""#
						)#
					)#
				))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
interp(#
					~mean(var, na.rm = TRUE), #
					var = as.name(#
						paste(#
							variables[i],#
							"_mean_observed",#
							sep=""#
						)#
					)#
				)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp %>%#
			summarise(#
				mean_of_observed_means = !!! interp(#
					mean(var, na.rm = TRUE), #
					var = as.name(#
						paste(#
							variables[i],#
							"_mean_observed",#
							sep=""#
						)#
					)#
				)
)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
as.name(#
						paste(#
							variables[i],#
							"_mean_observed",#
							sep=""#
						)
)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
interp(#
					mean(var, na.rm = TRUE), #
					var = as.name(#
						paste(#
							variables[i],#
							"_mean_observed",#
							sep=""#
						)#
					)
)
str(temp)
? summarise_at
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp %>%#
			summarise_at(#
				#mean_of_observed_means = #
				vars(var), mean, na.rm=T#
			)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
var = as.name(#
			paste(#
				variables[i],#
				"_mean_observed",#
				sep=""#
			)#
		)
var
setwd('/Users/KSauby/Documents/Projects/ACS/R')
C[[i]] <- temp %>%#
			summarise_at(#
				#mean_of_observed_means = #
				vars(var), mean, na.rm=T#
			)
rlang::last_error()
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp %>%#
			summarise_at(#
				#mean_of_observed_means = #
				var, mean, na.rm=T#
			)
var
as.vector(var)
vector(Var)
vector(var)
class(var)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
var = paste(#
			variables[i],#
			"_mean_observed",#
			sep=""#
		)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp %>%#
			summarise_at(#
				#mean_of_observed_means = #
				var, mean, na.rm=T#
			)
temp %>%#
			summarise_at(#
				#mean_of_observed_means = #
				var, mean, na.rm=T#
			) %>% as.data.frame %>% head
?enquo
setwd('/Users/KSauby/Documents/Projects/ACS/R')
var = paste(#
			variables[i],#
			"_mean_observed",#
			sep=""#
		) %>%#
		enquo
var
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp %>%#
			summarise(#
				mean_of_observed_means = mean(!!var, na.rm=T)#
			)
warnings()
setwd('/Users/KSauby/Documents/Projects/ACS/R')
var = as.name(#
			paste(#
			variables[i],#
			"_mean_observed",#
			sep=""#
		)) %>%#
		enquo
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp %>%#
			summarise(#
				mean_of_observed_means = mean(!!var, na.rm=T)#
			)
var
setwd('/Users/KSauby/Documents/Projects/ACS/R')
as.name(#
			paste(#
			variables[i],#
			"_mean_observed",#
			sep=""#
		))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
var = as.name(#
			paste(#
			variables[i],#
			"_mean_observed",#
			sep=""#
		)) %>%#
		dplyr::enquo
setwd('/Users/KSauby/Documents/Projects/ACS/R')
var = as.name(#
			paste(#
			variables[i],#
			"_mean_observed",#
			sep=""#
		)) %>%#
		dplyr::enquo()
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp %>%#
			summarise(#
				mean_of_observed_means = mean(!!var, na.rm=T)#
			)
traceback()
setwd('/Users/KSauby/Documents/Projects/ACS/R')
interp(#
			paste(#
			variables[i],#
			"_mean_observed",#
			sep=""#
		))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
var = interp(#
			paste(#
			variables[i],#
			"_mean_observed",#
			sep=""#
		)) %>%#
		dplyr::enquo()
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp %>%#
			summarise(#
				mean_of_observed_means = mean(!!var, na.rm=T)#
			)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
var = enquo(Cactus_mean_observed)
var = enquo("Cactus_mean_observed")
quo <- quo(letters)
quo
setwd('/Users/KSauby/Documents/Projects/ACS/R')
quo(#
			paste(#
			variables[i],#
			"_mean_observed",#
			sep=""#
		))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
var = quo(#
			paste(#
			variables[i],#
			"_mean_observed",#
			sep=""#
		))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp %>%#
			summarise(#
				mean_of_observed_means = mean(!!var, na.rm=T)#
			)
traceback()
setwd('/Users/KSauby/Documents/Projects/ACS/R')
sym(#
			paste(#
			variables[i],#
			"_mean_observed",#
			sep=""#
		))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
var = sym(#
			paste(#
			variables[i],#
			"_mean_observed",#
			sep=""#
		))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp %>%#
			summarise(#
				mean_of_observed_means = mean(!!var, na.rm=T)#
			)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp %>%#
			summarise(#
				mean_of_observed_means = mean(!!var, na.rm=T),#
				sample_size = ~length(!!var[which(!is.na(!!var))])#
			)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp %>%#
			summarise(#
				mean_of_observed_means = mean(!!var, na.rm=T),#
				sample_size = length(!!var[which(!is.na(!!var))])#
			)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp %>%#
			summarise(#
				mean_of_observed_means = mean(!!var, na.rm=T),#
				sample_size = length(filter(!is.na(!!var))
)
)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp %>%#
			summarise(#
				mean_of_observed_means = mean(!!var, na.rm=T),#
				sample_size = length(!is.na(!!var))
)
) %>% as.data.frame %>% head
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp %>%#
			summarise(#
				mean_of_observed_means = mean(!!var, na.rm=T),#
				sample_size = length(!is.na(!!var))#
			) %>% as.data.frame %>% head
?setnames
setwd('/Users/KSauby/Documents/Projects/ACS/R')
C[[i]] <- temp %>%#
			summarise(#
				mean_of_observed_means = mean(!!var, na.rm=T),#
				sample_size = length(!is.na(!!var))#
			) %>%#
			setnames(#
		      	.,#
		      	"mean_of_observed_means",#
		      	paste(#
		      		variables[i],#
		      		"_mean_of_observed_means",#
		      		sep=""#
				)#
			) %>%#
			setnames(#
		      	.,#
		      	"sample_size",#
		      	paste(#
		      		variables[i],#
		      		"_mean_of_observed_means_n",#
		      		sep=""#
				)#
			)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
calculateMeanofObservedMeans <- function(dataframe, variables, nsims, population.grouping.variables, sampling.grouping.variables) {#
	# group data to prep for processing by #
	#		population.grouping.variables, #
	#		sampling.grouping.variables, and#
	#		n_sims#
	temp <- dataframe %>% group_by_(.dots = c(#
		population.grouping.variables, #
		sampling.grouping.variables, #
		"n_sims"#
	))#
	# list for saving results#
	C <- vector("list", length(variables))#
	# for each of the population.grouping.variables and sampling.grouping.variables, calculate:#
	#	mean of observed means#
	#	sample size used for those calculations#
	for (i in 1:length(variables)) {#
		C[[i]] <- list()#
		# observed mean#
		var = sym(#
				paste(#
					variables[i],#
					"_mean_observed",#
					sep=""#
				)#
			)		#
		C[[i]] <- temp %>%#
			summarise(#
				mean_of_observed_means = mean(!!var, na.rm=T),#
				sample_size = length(!is.na(!!var))#
			) %>%#
			setnames(#
		      	.,#
		      	"mean_of_observed_means",#
		      	paste(#
		      		variables[i],#
		      		"_mean_of_observed_means",#
		      		sep=""#
				)#
			) %>%#
			setnames(#
		      	.,#
		      	"sample_size",#
		      	paste(#
		      		variables[i],#
		      		"_mean_of_observed_means_n",#
		      		sep=""#
				)#
			)#
	}#
	D <- Reduce(#
		function(x, y) merge(#
			x, y,#
			by=c(#
				population.grouping.variables, #
				sampling.grouping.variables, #
				"n_sims"#
			)#
		),#
		C#
	)#
	dataframe %<>% merge(#
		D, #
		by=c(#
			population.grouping.variables, #
			sampling.grouping.variables,#
			"n_sims"#
		)#
	)#
	return(dataframe)#
}#
#
#'
setwd('/Users/KSauby/Documents/Projects/ACS/R')
## quiets concerns of R CMD check re: the .'s that appear in pipelines#
if(getRversion() >= "2.15.1")  utils::globalVariables(c("."))#
#
calculatedSquaredDifferences <- function(dataframe, variables) {#
	# for each simulation and variable, calculate:#
	#	(observed mean - true mean)^2#
	for (i in 1:length(variables)) {#
		dataframe %<>%#
			mutate(#
				observed_minus_true_squared = #
						# observed -#
						(eval(#
							parse(#
								text=paste(#
									variables[i], #
									"_mean_observed", #
									sep=""#
								)#
							)#
						) - #
						# true#
						eval(#
							parse(#
								text = paste(#
								variables[i], #
								"_mean", #
								sep=""#
							)#
						)#
						)#
				)^2#
			) %>%#
			setnames(#
				., #
				"observed_minus_true_squared", #
				paste(#
					variables[i], #
					"_mean_observed_minus_true_squared", #
					sep=""#
				)#
			)#
	}#
	return(dataframe)#
}#
calculateDifferencesinMeans <- function(dataframe, variables) {#
	# for each simulation and variable, calculate:#
	#	observed mean - mean of observed means#
	for (i in 1:length(variables)) {#
		dataframe %<>%#
			mutate(#
				observed_minus_mean_of_observed_means = #
						# (observed -#
						eval(#
							parse(#
								text = paste(#
									variables[i], #
									"_mean_observed", #
									sep=""#
								)#
							)#
						) - #
						# true)#
						eval(#
							parse(#
								text = paste(#
									variables[i], #
									"_mean_of_observed_means", #
									sep=""#
								)#
							)#
						)#
			) %>%#
			setnames(#
				., #
				"observed_minus_mean_of_observed_means", #
				paste(#
					variables[i], #
					"_observed_minus_mean_of_observed_means", #
					sep=""#
				)#
			)#
	}#
	return(dataframe)#
}#
#
#' @importFrom dplyr summarise_ n#
#' @importFrom lazyeval interp#
#' @importFrom rlang .data#
#' @importFrom data.table setnames#
#
calculateBiasComponents	<- function(dataframe, resultslist, variables) {#
	for (i in 1:length(variables)) {#
		resultslist[[i]] <- list()#
		resultslist[[i]] <- dataframe %>%#
			summarise_(.,#
				# save true mean#
				mean_RB_true_mean = interp(#
					~var[1], #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean", #
							sep=""#
						)#
					)#
				),#
				# calculate mean of observed means#
				mean_RB_mean_of_observed_means = interp(#
					~mean(var, na.rm = TRUE), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed",#
							sep=""#
						)#
					)#
				),#
				# sample size used to calculate mean of observed means#
				RB_n = interp(#
					~length(var[which(!is.na(var))]), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed",#
							sep=""#
						)#
					)#
				),#
				# calculate MSE#
				MSE_sum_of_observed_minus_true_sqrd = interp(#
					~sum(var, na.rm = TRUE), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed_minus_true_squared",#
							sep=""#
						)#
					)#
				),#
				# sample size used to calculate MSE#
				MSE_n_sims = interp(#
					~length(var[which(!is.na(var))]), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed_minus_true_squared",#
							sep=""#
						)#
					)#
				),#
				# for var_RB: calculate mean of simulated HT variance estimates#
				var_RB_mean_of_var_estimates = interp(#
					~mean(var, na.rm = TRUE), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_var_observed",#
							sep=""#
						)#
					)#
				),#
				# for var_RB: sample size used to calculate mean of simulated HT variance estimates#
				var_RB_mean_of_var_estimates_n = interp(#
					~length(var[which(!is.na(var))]), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_var_observed",#
							sep=""#
						)#
					)#
				),#
				# for var_RB: calculate variance of _mean_observed#
				var_RB_var_of_mean_estimates = interp(#
					~var(variable, na.rm = TRUE), #
					variable = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed",#
							sep=""#
						)#
					)#
				),#
				# for var_RB: calculate sample size used to calculate variance of _mean_observed#
				var_RB_var_of_mean_estimates_n = interp(#
					~length(var[which(!is.na(var))]), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed",#
							sep=""#
						)#
					)#
				)#
			) %>%#
			as.data.frame#
		resultslist[[i]] %<>% #
			mutate(#
				RB = 100 * #
					(.data$mean_RB_mean_of_observed_means - .data$mean_RB_true_mean) / #
					.data$mean_RB_true_mean,#
				MSE = .data$MSE_sum_of_observed_minus_true_sqrd/.data$MSE_n_sims,#
				var_RB = 100 *#
				(.data$var_RB_mean_of_var_estimates - .data$var_RB_var_of_mean_estimates) / #
					.data$var_RB_var_of_mean_estimates,#
				var_RB_n = min(#
					.data$var_RB_mean_of_var_estimates_n, #
					.data$var_RB_var_of_mean_estimates_n#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"mean_RB_true_mean",#
	      		paste(#
	      			variables[i],#
	      			"_true_mean",#
	      			sep=""#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"RB",#
	      		paste(#
	      			variables[i],#
	      			"_mean_RB",#
	      			sep=""#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"MSE",#
	      		paste(#
	      			variables[i],#
	      			"_mean_MSE",#
	      			sep=""#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"var_RB",#
	      		paste(#
	      			variables[i],#
	      			"_var_RB",#
	      			sep=""#
				)#
			) %>%#
			# rename sample size variables#
			setnames(#
	      		.,#
	      		"RB_n",#
	      		paste(#
	      			variables[i],#
	      			"_mean_RB_n",#
	      			sep=""#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"MSE_n_sims",#
	      		paste(#
	      			variables[i],#
	      			"_mean_MSE_n",#
	      			sep=""#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"var_RB_n",#
	      		paste(#
	      			variables[i],#
	      			"_var_RB_n",#
	      			sep=""#
				)#
			) %>%#
			dplyr::select(-c(#
				.data$mean_RB_mean_of_observed_means,#
				.data$MSE_sum_of_observed_minus_true_sqrd,#
				.data$var_RB_mean_of_var_estimates,#
				.data$var_RB_mean_of_var_estimates_n,#
				.data$var_RB_var_of_mean_estimates,#
				.data$var_RB_var_of_mean_estimates_n#
			))#
	}#
	return(resultslist)#
}#
calculateMeanofObservedMeans <- function(dataframe, variables, nsims, population.grouping.variables, sampling.grouping.variables) {#
	# group data to prep for processing by #
	#		population.grouping.variables, #
	#		sampling.grouping.variables, and#
	#		n_sims#
	temp <- dataframe %>% group_by_(.dots = c(#
		population.grouping.variables, #
		sampling.grouping.variables, #
		"n_sims"#
	))#
	# list for saving results#
	C <- vector("list", length(variables))#
	# for each of the population.grouping.variables and sampling.grouping.variables, calculate:#
	#	mean of observed means#
	#	sample size used for those calculations#
	for (i in 1:length(variables)) {#
		C[[i]] <- list()#
		# observed mean#
		var = sym(#
				paste(#
					variables[i],#
					"_mean_observed",#
					sep=""#
				)#
			)		#
		C[[i]] <- temp %>%#
			summarise(#
				mean_of_observed_means = mean(!!var, na.rm=T),#
				sample_size = length(!is.na(!!var))#
			) %>%#
			setnames(#
		      	.,#
		      	"mean_of_observed_means",#
		      	paste(#
		      		variables[i],#
		      		"_mean_of_observed_means",#
		      		sep=""#
				)#
			) %>%#
			setnames(#
		      	.,#
		      	"sample_size",#
		      	paste(#
		      		variables[i],#
		      		"_mean_of_observed_means_n",#
		      		sep=""#
				)#
			)#
	}#
	D <- Reduce(#
		function(x, y) merge(#
			x, y,#
			by=c(#
				population.grouping.variables, #
				sampling.grouping.variables, #
				"n_sims"#
			)#
		),#
		C#
	)#
	dataframe %<>% merge(#
		D, #
		by=c(#
			population.grouping.variables, #
			sampling.grouping.variables,#
			"n_sims"#
		)#
	)#
	return(dataframe)#
}#
#
#' Calculate Simulation Data Sampling Bias#
#' #
#' @param population_data_summary Summary statistics on the species patch realizations of patches (created by \code{calculateRealizationSummaryStatistics} function).#
#' @param simulation_data Simulation data on sampling of the multiple patch realizations.#
#' @param population.grouping.variables Categorical variables with which to group the population data (e.g., artificial population number if there are more than 1)#
#' @param sampling.grouping.variables Categorical variables with which to group the simulation data (e.g., sampling design used, number of primary samples).#
#' @param ovar Vector of variables for which sampling bias should be estimated.#
#' @param o_rvar Vector of variables for which secondary variables should be estimated. Can be identical to ovar or a subset.#
#' @param rvar Variables for which to use ratio estimators#
#
#' @description Calculate the sampling bias of different sampling designs from simulation data.#
#
#' @return Dataframe including simulation data summary statistics, including relative bias and mean squared error (MSE) of the mean and variance.#
#
#' @examples#
#' # Create realizations#
#' x_start = 1#
#' x_end = 30#
#' y_start = 1#
#' y_end = 30#
#' n.networks = c(5, 15, 10, 20, 30, 40)#
#' n.realizations = 1#
#' SpeciesInfo = PlotSurveys_season1#
#' Species.Fields = c("Stricta", "Pusilla", "Cactus")#
#' cactus.realizations = createSpeciesPatchRealizations(x_start, x_end,#
#' 	y_start, y_end, buffer=5, n.networks, n.realizations, SpeciesInfo, #
#' 	start.seed=1, Species.Fields)#
#' #
#' # Sample from the realizations#
#' simulations=1#
#' nsamples=c(5,10,20,40)#
#' population <- createPopulation(x_start = 1, x_end = 30, y_start = 1, #
#' 	y_end = 30)#
#' abundance.variables = NULL#
#' occupancy.variables = c(#
#' 	"Stricta",#
#' 	"Pusilla",#
#' 	"Cactus",#
#' 	"CACA_on_Pusilla",#
#' 	"CACA_on_Stricta",#
#' 	"MEPR_on_Pusilla",#
#' 	"MEPR_on_Stricta",#
#' 	"Old_Moth_Evidence_Pusilla",#
#' 	"Old_Moth_Evidence_Stricta"#
#' 	# "Percent_Cover_Pusilla", # how do I do these? they are occupancy nor abundance#
#' 	# "Percent_Cover_Stricta",#
#' 	# "Height_Pusilla",#
#' 	# "Height_Stricta",#
#' )		#
#' patch_data = cactus.realizations#
#' # simulation_data <- sampleSpeciesPatchRealizations(patch_data, simulations, #
#' #	nsamples, population, abundance.variables, occupancy.variables)#
#' #
#' # summary.variables = occupancy.variables#
#' # grouping.variables = c("n.networks", "realization")#
#' # dataset = cactus.realizations#
#' # patch_data_summary <- calculateRealizationSummaryStatistics(dataset, #
#' # 	summary.variables, grouping.variables)#
#' # avar = NULL#
#' @export#
#
calculateSamplingBias <- function(#
	population_data_summary, #
	simulation_data, #
	population.grouping.variables, #
	sampling.grouping.variables,#
	ovar,#
	o_rvar,#
	rvar#
)#
{#
	rvar_variables <- paste(rvar, "_ratio", sep="")#
	. <- n_sims <- A <- B <- C <- D <- E <- I <- G <- H <- NULL#
	A <- merge(#
		population_data_summary, #
		simulation_data, #
		by=population.grouping.variables#
	)#
	# ------------------------------------------------------------------------ ##
	# OCCUPANCY VARIABLES	#
	# ------------------------------------------------------------------------ ##
	B <- A #
	# add number of simulations to dataset#
	B %<>% #
		group_by(.dots = c(#
			population.grouping.variables, #
			sampling.grouping.variables#
		)) %>%#
		mutate(n_sims = n())#
	B %<>% calculateMeanofObservedMeans(dataframe=B, variables=ovar)#
	# WHY IS IT ONLY CALC MEAN OF OBS MEANS FOR RVAR?#
	# ------------------------------------------------------------------------ ##
	# RATIO VARIABLES	#
	# ------------------------------------------------------------------------ ##
	E <- A#
	# E %<>% filter(Stricta_mean_observed!=0)#
	E %<>% calculateMeanofObservedMeans(dataframe=B, variables=c(rvar_variables))#
	E %<>% calculatedSquaredDifferences(variables=c(o_rvar, rvar_variables))#
	E %<>% calculateDifferencesinMeans(variables=c(o_rvar, rvar_variables))#
#
	B %<>% calculatedSquaredDifferences(variables=ovar)#
	B %<>% calculateDifferencesinMeans(variables=ovar)#
	# calculate bias and MSE#
	# occupancy variables#
	H <- vector("list", length(ovar))#
	X.grp <- B %>% #
		group_by_(.dots=c(#
			population.grouping.variables, #
			sampling.grouping.variables, #
			"n_sims"#
		)) %>% #
		calculateBiasComponents(., resultslist=H, variables=ovar)#
	Y <- Reduce(#
		function(x, y) merge(#
			x, y,#
			by=c(#
				population.grouping.variables, #
				sampling.grouping.variables, #
				"n_sims"#
			)#
		),#
		X.grp#
	) %>%#
		setnames("n_sims", "ovar_n_sims")#
	# ratio variables#
	H <- vector("list", length(rvar))#
	X.grp <- E %>% #
		group_by_(.dots=c(#
			population.grouping.variables, #
			sampling.grouping.variables, #
			"n_sims"#
		)) %>% #
		calculateBiasComponents(., resultslist=H, variables=rvar_variables)#
	Z <- Reduce(#
		function(x, y) merge(#
			x, y,#
			by=c(#
				population.grouping.variables, #
				sampling.grouping.variables, #
				"n_sims"#
			)#
		),#
		X.grp#
	) %>%#
		setnames("n_sims", "rvar_n_sims")#
	Y %<>% merge(Z, #
		by=c(#
			population.grouping.variables, #
			sampling.grouping.variables#
		),#
		all=T#
	)#
	return(Y)#
}
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
simulation_data_summary_table_original_yHT = calculateSamplingBias(#
	population_data_summary	= patch_data_summary_wide, #
	simulation_data		= simdata_all, #
	sampling.grouping.variables	= sampling.grouping.variables, #
	population.grouping.variables = population.grouping.variables,#
	ovar			= ovar, #
	rvar			= rvar,#
	o_rvar			= "Stricta"#
)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
## quiets concerns of R CMD check re: the .'s that appear in pipelines#
if(getRversion() >= "2.15.1")  utils::globalVariables(c("."))#
#
calculatedSquaredDifferences <- function(dataframe, variables) {#
	# for each simulation and variable, calculate:#
	#	(observed mean - true mean)^2#
	for (i in 1:length(variables)) {#
		dataframe %<>%#
			mutate(#
				observed_minus_true_squared = #
						# observed -#
						(eval(#
							parse(#
								text=paste(#
									variables[i], #
									"_mean_observed", #
									sep=""#
								)#
							)#
						) - #
						# true#
						eval(#
							parse(#
								text = paste(#
								variables[i], #
								"_mean", #
								sep=""#
							)#
						)#
						)#
				)^2#
			) %>%#
			setnames(#
				., #
				"observed_minus_true_squared", #
				paste(#
					variables[i], #
					"_mean_observed_minus_true_squared", #
					sep=""#
				)#
			)#
	}#
	return(dataframe)#
}#
calculateDifferencesinMeans <- function(dataframe, variables) {#
	# for each simulation and variable, calculate:#
	#	observed mean - mean of observed means#
	for (i in 1:length(variables)) {#
		dataframe %<>%#
			mutate(#
				observed_minus_mean_of_observed_means = #
						# (observed -#
						eval(#
							parse(#
								text = paste(#
									variables[i], #
									"_mean_observed", #
									sep=""#
								)#
							)#
						) - #
						# true)#
						eval(#
							parse(#
								text = paste(#
									variables[i], #
									"_mean_of_observed_means", #
									sep=""#
								)#
							)#
						)#
			) %>%#
			setnames(#
				., #
				"observed_minus_mean_of_observed_means", #
				paste(#
					variables[i], #
					"_observed_minus_mean_of_observed_means", #
					sep=""#
				)#
			)#
	}#
	return(dataframe)#
}#
#
#' @importFrom dplyr summarise_ n#
#' @importFrom lazyeval interp#
#' @importFrom rlang .data#
#' @importFrom data.table setnames#
#
calculateBiasComponents	<- function(dataframe, resultslist, variables) {#
	for (i in 1:length(variables)) {#
		resultslist[[i]] <- list()#
		resultslist[[i]] <- dataframe %>%#
			summarise_(.,#
				# save true mean#
				mean_RB_true_mean = interp(#
					~var[1], #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean", #
							sep=""#
						)#
					)#
				),#
				# calculate mean of observed means#
				mean_RB_mean_of_observed_means = interp(#
					~mean(var, na.rm = TRUE), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed",#
							sep=""#
						)#
					)#
				),#
				# sample size used to calculate mean of observed means#
				RB_n = interp(#
					~length(var[which(!is.na(var))]), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed",#
							sep=""#
						)#
					)#
				),#
				# calculate MSE#
				MSE_sum_of_observed_minus_true_sqrd = interp(#
					~sum(var, na.rm = TRUE), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed_minus_true_squared",#
							sep=""#
						)#
					)#
				),#
				# sample size used to calculate MSE#
				MSE_n_sims = interp(#
					~length(var[which(!is.na(var))]), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed_minus_true_squared",#
							sep=""#
						)#
					)#
				),#
				# for var_RB: calculate mean of simulated HT variance estimates#
				var_RB_mean_of_var_estimates = interp(#
					~mean(var, na.rm = TRUE), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_var_observed",#
							sep=""#
						)#
					)#
				),#
				# for var_RB: sample size used to calculate mean of simulated HT variance estimates#
				var_RB_mean_of_var_estimates_n = interp(#
					~length(var[which(!is.na(var))]), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_var_observed",#
							sep=""#
						)#
					)#
				),#
				# for var_RB: calculate variance of _mean_observed#
				var_RB_var_of_mean_estimates = interp(#
					~var(variable, na.rm = TRUE), #
					variable = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed",#
							sep=""#
						)#
					)#
				),#
				# for var_RB: calculate sample size used to calculate variance of _mean_observed#
				var_RB_var_of_mean_estimates_n = interp(#
					~length(var[which(!is.na(var))]), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed",#
							sep=""#
						)#
					)#
				)#
			) %>%#
			as.data.frame#
		resultslist[[i]] %<>% #
			mutate(#
				RB = 100 * #
					(.data$mean_RB_mean_of_observed_means - .data$mean_RB_true_mean) / #
					.data$mean_RB_true_mean,#
				MSE = .data$MSE_sum_of_observed_minus_true_sqrd/.data$MSE_n_sims,#
				var_RB = 100 *#
				(.data$var_RB_mean_of_var_estimates - .data$var_RB_var_of_mean_estimates) / #
					.data$var_RB_var_of_mean_estimates,#
				var_RB_n = min(#
					.data$var_RB_mean_of_var_estimates_n, #
					.data$var_RB_var_of_mean_estimates_n#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"mean_RB_true_mean",#
	      		paste(#
	      			variables[i],#
	      			"_true_mean",#
	      			sep=""#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"RB",#
	      		paste(#
	      			variables[i],#
	      			"_mean_RB",#
	      			sep=""#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"MSE",#
	      		paste(#
	      			variables[i],#
	      			"_mean_MSE",#
	      			sep=""#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"var_RB",#
	      		paste(#
	      			variables[i],#
	      			"_var_RB",#
	      			sep=""#
				)#
			) %>%#
			# rename sample size variables#
			setnames(#
	      		.,#
	      		"RB_n",#
	      		paste(#
	      			variables[i],#
	      			"_mean_RB_n",#
	      			sep=""#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"MSE_n_sims",#
	      		paste(#
	      			variables[i],#
	      			"_mean_MSE_n",#
	      			sep=""#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"var_RB_n",#
	      		paste(#
	      			variables[i],#
	      			"_var_RB_n",#
	      			sep=""#
				)#
			) %>%#
			dplyr::select(-c(#
				.data$mean_RB_mean_of_observed_means,#
				.data$MSE_sum_of_observed_minus_true_sqrd,#
				.data$var_RB_mean_of_var_estimates,#
				.data$var_RB_mean_of_var_estimates_n,#
				.data$var_RB_var_of_mean_estimates,#
				.data$var_RB_var_of_mean_estimates_n#
			))#
	}#
	return(resultslist)#
}#
calculateMeanofObservedMeans <- function(dataframe, variables, nsims, population.grouping.variables, sampling.grouping.variables) {#
	# group data to prep for processing by #
	#		population.grouping.variables, #
	#		sampling.grouping.variables, and#
	#		n_sims#
	temp <- dataframe %>% group_by_(.dots = c(#
		population.grouping.variables, #
		sampling.grouping.variables, #
		"n_sims"#
	))#
	# list for saving results#
	C <- vector("list", length(variables))#
	# for each of the population.grouping.variables and sampling.grouping.variables, calculate:#
	#	mean of observed means#
	#	sample size used for those calculations#
	for (i in 1:length(variables)) {#
		C[[i]] <- list()#
		# observed mean#
		var = sym(#
				paste(#
					variables[i],#
					"_mean_observed",#
					sep=""#
				)#
			)		#
		C[[i]] <- temp %>%#
			summarise(#
				mean_of_observed_means = mean(!!var, na.rm=T),#
				sample_size = length(!is.na(!!var))#
			) %>%#
			setnames(#
		      	.,#
		      	"mean_of_observed_means",#
		      	paste(#
		      		variables[i],#
		      		"_mean_of_observed_means",#
		      		sep=""#
				)#
			) %>%#
			setnames(#
		      	.,#
		      	"sample_size",#
		      	paste(#
		      		variables[i],#
		      		"_mean_of_observed_means_n",#
		      		sep=""#
				)#
			)#
	}#
	D <- Reduce(#
		function(x, y) merge(#
			x, y,#
			by=c(#
				population.grouping.variables, #
				sampling.grouping.variables, #
				"n_sims"#
			)#
		),#
		C#
	)#
	dataframe %<>% merge(#
		D, #
		by=c(#
			population.grouping.variables, #
			sampling.grouping.variables,#
			"n_sims"#
		)#
	)#
	return(dataframe)#
}#
#
#' Calculate Simulation Data Sampling Bias#
#' #
#' @param population_data_summary Summary statistics on the species patch realizations of patches (created by \code{calculateRealizationSummaryStatistics} function).#
#' @param simulation_data Simulation data on sampling of the multiple patch realizations.#
#' @param population.grouping.variables Categorical variables with which to group the population data (e.g., artificial population number if there are more than 1)#
#' @param sampling.grouping.variables Categorical variables with which to group the simulation data (e.g., sampling design used, number of primary samples).#
#' @param ovar Vector of variables for which sampling bias should be estimated.#
#' @param o_rvar Vector of variables for which secondary variables should be estimated. Can be identical to ovar or a subset.#
#' @param rvar Variables for which to use ratio estimators#
#
#' @description Calculate the sampling bias of different sampling designs from simulation data.#
#
#' @return Dataframe including simulation data summary statistics, including relative bias and mean squared error (MSE) of the mean and variance.#
#
#' @examples#
#' # Create realizations#
#' x_start = 1#
#' x_end = 30#
#' y_start = 1#
#' y_end = 30#
#' n.networks = c(5, 15, 10, 20, 30, 40)#
#' n.realizations = 1#
#' SpeciesInfo = PlotSurveys_season1#
#' Species.Fields = c("Stricta", "Pusilla", "Cactus")#
#' cactus.realizations = createSpeciesPatchRealizations(x_start, x_end,#
#' 	y_start, y_end, buffer=5, n.networks, n.realizations, SpeciesInfo, #
#' 	start.seed=1, Species.Fields)#
#' #
#' # Sample from the realizations#
#' simulations=1#
#' nsamples=c(5,10,20,40)#
#' population <- createPopulation(x_start = 1, x_end = 30, y_start = 1, #
#' 	y_end = 30)#
#' abundance.variables = NULL#
#' occupancy.variables = c(#
#' 	"Stricta",#
#' 	"Pusilla",#
#' 	"Cactus",#
#' 	"CACA_on_Pusilla",#
#' 	"CACA_on_Stricta",#
#' 	"MEPR_on_Pusilla",#
#' 	"MEPR_on_Stricta",#
#' 	"Old_Moth_Evidence_Pusilla",#
#' 	"Old_Moth_Evidence_Stricta"#
#' 	# "Percent_Cover_Pusilla", # how do I do these? they are occupancy nor abundance#
#' 	# "Percent_Cover_Stricta",#
#' 	# "Height_Pusilla",#
#' 	# "Height_Stricta",#
#' )		#
#' patch_data = cactus.realizations#
#' # simulation_data <- sampleSpeciesPatchRealizations(patch_data, simulations, #
#' #	nsamples, population, abundance.variables, occupancy.variables)#
#' #
#' # summary.variables = occupancy.variables#
#' # grouping.variables = c("n.networks", "realization")#
#' # dataset = cactus.realizations#
#' # patch_data_summary <- calculateRealizationSummaryStatistics(dataset, #
#' # 	summary.variables, grouping.variables)#
#' # avar = NULL#
#' @export#
#
calculateSamplingBias <- function(#
	population_data_summary, #
	simulation_data, #
	population.grouping.variables, #
	sampling.grouping.variables,#
	ovar,#
	o_rvar,#
	rvar#
)#
{#
	rvar_variables <- paste(rvar, "_ratio", sep="")#
	. <- n_sims <- A <- B <- C <- D <- E <- I <- G <- H <- NULL#
	A <- merge(#
		population_data_summary, #
		simulation_data, #
		by=population.grouping.variables#
	)#
	# ------------------------------------------------------------------------ ##
	# OCCUPANCY VARIABLES	#
	# ------------------------------------------------------------------------ ##
	B <- A #
	# add number of simulations to dataset#
	B %<>% #
		group_by(c(#
			!!population.grouping.variables, #
			!!sampling.grouping.variables#
		)) %>%#
		mutate(n_sims = n())#
	B %<>% calculateMeanofObservedMeans(dataframe=B, variables=ovar)#
	# WHY IS IT ONLY CALC MEAN OF OBS MEANS FOR RVAR?#
	# ------------------------------------------------------------------------ ##
	# RATIO VARIABLES	#
	# ------------------------------------------------------------------------ ##
	E <- A#
	# E %<>% filter(Stricta_mean_observed!=0)#
	E %<>% calculateMeanofObservedMeans(dataframe=B, variables=c(rvar_variables))#
	E %<>% calculatedSquaredDifferences(variables=c(o_rvar, rvar_variables))#
	E %<>% calculateDifferencesinMeans(variables=c(o_rvar, rvar_variables))#
#
	B %<>% calculatedSquaredDifferences(variables=ovar)#
	B %<>% calculateDifferencesinMeans(variables=ovar)#
	# calculate bias and MSE#
	# occupancy variables#
	H <- vector("list", length(ovar))#
	X.grp <- B %>% #
		group_by_(.dots=c(#
			population.grouping.variables, #
			sampling.grouping.variables, #
			"n_sims"#
		)) %>% #
		calculateBiasComponents(., resultslist=H, variables=ovar)#
	Y <- Reduce(#
		function(x, y) merge(#
			x, y,#
			by=c(#
				population.grouping.variables, #
				sampling.grouping.variables, #
				"n_sims"#
			)#
		),#
		X.grp#
	) %>%#
		setnames("n_sims", "ovar_n_sims")#
	# ratio variables#
	H <- vector("list", length(rvar))#
	X.grp <- E %>% #
		group_by_(.dots=c(#
			population.grouping.variables, #
			sampling.grouping.variables, #
			"n_sims"#
		)) %>% #
		calculateBiasComponents(., resultslist=H, variables=rvar_variables)#
	Z <- Reduce(#
		function(x, y) merge(#
			x, y,#
			by=c(#
				population.grouping.variables, #
				sampling.grouping.variables, #
				"n_sims"#
			)#
		),#
		X.grp#
	) %>%#
		setnames("n_sims", "rvar_n_sims")#
	Y %<>% merge(Z, #
		by=c(#
			population.grouping.variables, #
			sampling.grouping.variables#
		),#
		all=T#
	)#
	return(Y)#
}
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
simulation_data_summary_table_original_yHT = calculateSamplingBias(#
	population_data_summary	= patch_data_summary_wide, #
	simulation_data		= simdata_all, #
	sampling.grouping.variables	= sampling.grouping.variables, #
	population.grouping.variables = population.grouping.variables,#
	ovar			= ovar, #
	rvar			= rvar,#
	o_rvar			= "Stricta"#
)
sym(population.grouping.variables)
sym(sampling.grouping.variables)
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
population_data_summary	= patch_data_summary_wide
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
simulation_data		= simdata_all
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
o_rvar			= "Stricta"
setwd('/Users/KSauby/Documents/Projects/ACS/R')
rvar_variables <- paste(rvar, "_ratio", sep="")#
	. <- n_sims <- A <- B <- C <- D <- E <- I <- G <- H <- NULL#
	A <- merge(#
		population_data_summary, #
		simulation_data, #
		by=population.grouping.variables#
	)#
	# ------------------------------------------------------------------------ ##
	# OCCUPANCY VARIABLES	#
	# ------------------------------------------------------------------------ ##
	B <- A #
	# add number of simulations to dataset#
	B %<>% #
		group_by(.dots = c(#
			population.grouping.variables, #
			sampling.grouping.variables#
		)) %>%#
		mutate(n_sims = n())#
	B %<>% calculateMeanofObservedMeans(dataframe=B, variables=ovar)#
	# WHY IS IT ONLY CALC MEAN OF OBS MEANS FOR RVAR?#
	# ------------------------------------------------------------------------ ##
	# RATIO VARIABLES	#
	# ------------------------------------------------------------------------ ##
	E <- A#
	# E %<>% filter(Stricta_mean_observed!=0)#
	E %<>% calculateMeanofObservedMeans(dataframe=B, variables=c(rvar_variables))#
	E %<>% calculatedSquaredDifferences(variables=c(o_rvar, rvar_variables))#
	E %<>% calculateDifferencesinMeans(variables=c(o_rvar, rvar_variables))#
#
	B %<>% calculatedSquaredDifferences(variables=ovar)#
	B %<>% calculateDifferencesinMeans(variables=ovar)#
	# calculate bias and MSE#
	# occupancy variables#
	H <- vector("list", length(ovar))#
	X.grp <- B %>% #
		group_by_(.dots=c(#
			population.grouping.variables, #
			sampling.grouping.variables, #
			"n_sims"#
		)) %>% #
		calculateBiasComponents(., resultslist=H, variables=ovar)#
	Y <- Reduce(#
		function(x, y) merge(#
			x, y,#
			by=c(#
				population.grouping.variables, #
				sampling.grouping.variables, #
				"n_sims"#
			)#
		),#
		X.grp#
	) %>%#
		setnames("n_sims", "ovar_n_sims")#
	# ratio variables#
	H <- vector("list", length(rvar))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
X.grp <- E %>% #
		group_by_(.dots=c(#
			population.grouping.variables, #
			sampling.grouping.variables, #
			"n_sims"#
		)) %>% #
		calculateBiasComponents(., resultslist=H, variables=rvar_variables)#
	Z <- Reduce(#
		function(x, y) merge(#
			x, y,#
			by=c(#
				population.grouping.variables, #
				sampling.grouping.variables, #
				"n_sims"#
			)#
		),#
		X.grp#
	) %>%#
		setnames("n_sims", "rvar_n_sims")#
	Y %<>% merge(Z, #
		by=c(#
			population.grouping.variables, #
			sampling.grouping.variables#
		),#
		all=T#
	)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
X.grp <- E %>% #
		group_by_at(#
			population.grouping.variables, #
			sampling.grouping.variables, #
			"n_sims"#
		) %>% #
		calculateBiasComponents(., resultslist=H, variables=rvar_variables)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
## quiets concerns of R CMD check re: the .'s that appear in pipelines#
if(getRversion() >= "2.15.1")  utils::globalVariables(c("."))#
#
calculatedSquaredDifferences <- function(dataframe, variables) {#
	# for each simulation and variable, calculate:#
	#	(observed mean - true mean)^2#
	for (i in 1:length(variables)) {#
		dataframe %<>%#
			mutate(#
				observed_minus_true_squared = #
						# observed -#
						(eval(#
							parse(#
								text=paste(#
									variables[i], #
									"_mean_observed", #
									sep=""#
								)#
							)#
						) - #
						# true#
						eval(#
							parse(#
								text = paste(#
								variables[i], #
								"_mean", #
								sep=""#
							)#
						)#
						)#
				)^2#
			) %>%#
			setnames(#
				., #
				"observed_minus_true_squared", #
				paste(#
					variables[i], #
					"_mean_observed_minus_true_squared", #
					sep=""#
				)#
			)#
	}#
	return(dataframe)#
}#
calculateDifferencesinMeans <- function(dataframe, variables) {#
	# for each simulation and variable, calculate:#
	#	observed mean - mean of observed means#
	for (i in 1:length(variables)) {#
		dataframe %<>%#
			mutate(#
				observed_minus_mean_of_observed_means = #
						# (observed -#
						eval(#
							parse(#
								text = paste(#
									variables[i], #
									"_mean_observed", #
									sep=""#
								)#
							)#
						) - #
						# true)#
						eval(#
							parse(#
								text = paste(#
									variables[i], #
									"_mean_of_observed_means", #
									sep=""#
								)#
							)#
						)#
			) %>%#
			setnames(#
				., #
				"observed_minus_mean_of_observed_means", #
				paste(#
					variables[i], #
					"_observed_minus_mean_of_observed_means", #
					sep=""#
				)#
			)#
	}#
	return(dataframe)#
}#
#
#' @importFrom dplyr summarise_ n#
#' @importFrom lazyeval interp#
#' @importFrom rlang .data#
#' @importFrom data.table setnames#
#
calculateBiasComponents	<- function(dataframe, resultslist, variables) {#
	for (i in 1:length(variables)) {#
		resultslist[[i]] <- list()#
		var = sym(#
			paste(#
				variables[i],#
				"_mean", #
				sep=""#
			)#
		)		#
		var_observed = sym(#
			paste(#
				variables[i],#
				"_mean_observed", #
				sep=""#
			)#
		)#
		var_mean_observed_minus_true_squared = paste(#
			variables[i],#
			"_mean_observed_minus_true_squared",#
			sep=""#
		)#
		var_var_observed = paste(#
			variables[i],#
			"_var_observed",#
			sep=""#
		)#
		resultslist[[i]] <- dataframe %>%#
			summarise(#
				# save true mean#
				mean_RB_true_mean = var(!!var)[1],#
				# calculate mean of observed means#
				mean_RB_mean_of_observed_means = mean(#
					!!var_observed, na.rm=TRUE#
				),#
				# sample size used to calculate mean of observed means#
				RB_n = length(!is.na(!!var_observed)),#
				# calculate MSE#
				MSE_sum_of_observed_minus_true_sqrd = sum(#
					!!var_mean_observed_minus_true_squared, na.rm = TRUE#
				), #
				# sample size used to calculate MSE#
				MSE_n_sims = length(#
					!is.na(#
						!!var_mean_observed_minus_true_squared#
					)#
				),#
				# for var_RB: calculate mean of simulated HT variance estimates#
				var_RB_mean_of_var_estimates = mean(#
					!!var_var_observed, na.rm = TRUE#
				), #
				# for var_RB: sample size used to calculate mean of simulated HT variance estimates#
				var_RB_mean_of_var_estimates_n = length(#
					!is.na(!!var_var_observed) #
				),#
				# for var_RB: calculate variance of _mean_observed#
				var_RB_var_of_mean_estimates = var(#
					!!var_observed, na.rm = TRUE#
				),#
				# for var_RB: calculate sample size used to calculate variance of _mean_observed#
				var_RB_var_of_mean_estimates_n = length(#
					!is.na(!!var_observed)#
				)#
			) %>%#
			as.data.frame#
		resultslist[[i]] %<>% #
			mutate(#
				RB = 100 * #
					(#
						.data$mean_RB_mean_of_observed_means - #
						.data$mean_RB_true_mean#
					) / #
					.data$mean_RB_true_mean,#
				MSE = #
				.data$MSE_sum_of_observed_minus_true_sqrd/#
				.data$MSE_n_sims,#
				var_RB = 100 *#
				(#
					.data$var_RB_mean_of_var_estimates - #
					.data$var_RB_var_of_mean_estimates#
				) / #
				.data$var_RB_var_of_mean_estimates,#
				var_RB_n = min(#
					.data$var_RB_mean_of_var_estimates_n, #
					.data$var_RB_var_of_mean_estimates_n#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"mean_RB_true_mean",#
	      		paste(#
	      			variables[i],#
	      			"_true_mean",#
	      			sep=""#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"RB",#
	      		paste(#
	      			variables[i],#
	      			"_mean_RB",#
	      			sep=""#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"MSE",#
	      		paste(#
	      			variables[i],#
	      			"_mean_MSE",#
	      			sep=""#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"var_RB",#
	      		paste(#
	      			variables[i],#
	      			"_var_RB",#
	      			sep=""#
				)#
			) %>%#
			# rename sample size variables#
			setnames(#
	      		.,#
	      		"RB_n",#
	      		paste(#
	      			variables[i],#
	      			"_mean_RB_n",#
	      			sep=""#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"MSE_n_sims",#
	      		paste(#
	      			variables[i],#
	      			"_mean_MSE_n",#
	      			sep=""#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"var_RB_n",#
	      		paste(#
	      			variables[i],#
	      			"_var_RB_n",#
	      			sep=""#
				)#
			) %>%#
			dplyr::select(-c(#
				.data$mean_RB_mean_of_observed_means,#
				.data$MSE_sum_of_observed_minus_true_sqrd,#
				.data$var_RB_mean_of_var_estimates,#
				.data$var_RB_mean_of_var_estimates_n,#
				.data$var_RB_var_of_mean_estimates,#
				.data$var_RB_var_of_mean_estimates_n#
			))#
	}#
	return(resultslist)#
}#
calculateMeanofObservedMeans <- function(dataframe, variables, nsims, population.grouping.variables, sampling.grouping.variables) {#
	# group data to prep for processing by #
	#		population.grouping.variables, #
	#		sampling.grouping.variables, and#
	#		n_sims#
	temp <- dataframe %>% group_by_(.dots = c(#
		population.grouping.variables, #
		sampling.grouping.variables, #
		"n_sims"#
	))#
	# list for saving results#
	C <- vector("list", length(variables))#
	# for each of the population.grouping.variables and sampling.grouping.variables, calculate:#
	#	mean of observed means#
	#	sample size used for those calculations#
	for (i in 1:length(variables)) {#
		C[[i]] <- list()#
		# observed mean#
		var = sym(#
				paste(#
					variables[i],#
					"_mean_observed",#
					sep=""#
				)#
			)		#
		C[[i]] <- temp %>%#
			summarise(#
				mean_of_observed_means = mean(!!var, na.rm=T),#
				sample_size = length(!is.na(!!var))#
			) %>%#
			setnames(#
		      	.,#
		      	"mean_of_observed_means",#
		      	paste(#
		      		variables[i],#
		      		"_mean_of_observed_means",#
		      		sep=""#
				)#
			) %>%#
			setnames(#
		      	.,#
		      	"sample_size",#
		      	paste(#
		      		variables[i],#
		      		"_mean_of_observed_means_n",#
		      		sep=""#
				)#
			)#
	}#
	D <- Reduce(#
		function(x, y) merge(#
			x, y,#
			by=c(#
				population.grouping.variables, #
				sampling.grouping.variables, #
				"n_sims"#
			)#
		),#
		C#
	)#
	dataframe %<>% merge(#
		D, #
		by=c(#
			population.grouping.variables, #
			sampling.grouping.variables,#
			"n_sims"#
		)#
	)#
	return(dataframe)#
}#
#
#' Calculate Simulation Data Sampling Bias#
#' #
#' @param population_data_summary Summary statistics on the species patch realizations of patches (created by \code{calculateRealizationSummaryStatistics} function).#
#' @param simulation_data Simulation data on sampling of the multiple patch realizations.#
#' @param population.grouping.variables Categorical variables with which to group the population data (e.g., artificial population number if there are more than 1)#
#' @param sampling.grouping.variables Categorical variables with which to group the simulation data (e.g., sampling design used, number of primary samples).#
#' @param ovar Vector of variables for which sampling bias should be estimated.#
#' @param o_rvar Vector of variables for which secondary variables should be estimated. Can be identical to ovar or a subset.#
#' @param rvar Variables for which to use ratio estimators#
#
#' @description Calculate the sampling bias of different sampling designs from simulation data.#
#
#' @return Dataframe including simulation data summary statistics, including relative bias and mean squared error (MSE) of the mean and variance.#
#
#' @examples#
#' # Create realizations#
#' x_start = 1#
#' x_end = 30#
#' y_start = 1#
#' y_end = 30#
#' n.networks = c(5, 15, 10, 20, 30, 40)#
#' n.realizations = 1#
#' SpeciesInfo = PlotSurveys_season1#
#' Species.Fields = c("Stricta", "Pusilla", "Cactus")#
#' cactus.realizations = createSpeciesPatchRealizations(x_start, x_end,#
#' 	y_start, y_end, buffer=5, n.networks, n.realizations, SpeciesInfo, #
#' 	start.seed=1, Species.Fields)#
#' #
#' # Sample from the realizations#
#' simulations=1#
#' nsamples=c(5,10,20,40)#
#' population <- createPopulation(x_start = 1, x_end = 30, y_start = 1, #
#' 	y_end = 30)#
#' abundance.variables = NULL#
#' occupancy.variables = c(#
#' 	"Stricta",#
#' 	"Pusilla",#
#' 	"Cactus",#
#' 	"CACA_on_Pusilla",#
#' 	"CACA_on_Stricta",#
#' 	"MEPR_on_Pusilla",#
#' 	"MEPR_on_Stricta",#
#' 	"Old_Moth_Evidence_Pusilla",#
#' 	"Old_Moth_Evidence_Stricta"#
#' 	# "Percent_Cover_Pusilla", # how do I do these? they are occupancy nor abundance#
#' 	# "Percent_Cover_Stricta",#
#' 	# "Height_Pusilla",#
#' 	# "Height_Stricta",#
#' )		#
#' patch_data = cactus.realizations#
#' # simulation_data <- sampleSpeciesPatchRealizations(patch_data, simulations, #
#' #	nsamples, population, abundance.variables, occupancy.variables)#
#' #
#' # summary.variables = occupancy.variables#
#' # grouping.variables = c("n.networks", "realization")#
#' # dataset = cactus.realizations#
#' # patch_data_summary <- calculateRealizationSummaryStatistics(dataset, #
#' # 	summary.variables, grouping.variables)#
#' # avar = NULL#
#' @export#
#
calculateSamplingBias <- function(#
	population_data_summary, #
	simulation_data, #
	population.grouping.variables, #
	sampling.grouping.variables,#
	ovar,#
	o_rvar,#
	rvar#
)#
{#
	rvar_variables <- paste(rvar, "_ratio", sep="")#
	. <- n_sims <- A <- B <- C <- D <- E <- I <- G <- H <- NULL#
	A <- merge(#
		population_data_summary, #
		simulation_data, #
		by=population.grouping.variables#
	)#
	# ------------------------------------------------------------------------ ##
	# OCCUPANCY VARIABLES	#
	# ------------------------------------------------------------------------ ##
	B <- A #
	# add number of simulations to dataset#
	B %<>% #
		group_by(.dots = c(#
			population.grouping.variables, #
			sampling.grouping.variables#
		)) %>%#
		mutate(n_sims = n())#
	B %<>% calculateMeanofObservedMeans(dataframe=B, variables=ovar)#
	# WHY IS IT ONLY CALC MEAN OF OBS MEANS FOR RVAR?#
	# ------------------------------------------------------------------------ ##
	# RATIO VARIABLES	#
	# ------------------------------------------------------------------------ ##
	E <- A#
	# E %<>% filter(Stricta_mean_observed!=0)#
	E %<>% calculateMeanofObservedMeans(dataframe=B, variables=c(rvar_variables))#
	E %<>% calculatedSquaredDifferences(variables=c(o_rvar, rvar_variables))#
	E %<>% calculateDifferencesinMeans(variables=c(o_rvar, rvar_variables))#
#
	B %<>% calculatedSquaredDifferences(variables=ovar)#
	B %<>% calculateDifferencesinMeans(variables=ovar)#
	# calculate bias and MSE#
	# occupancy variables#
	H <- vector("list", length(ovar))#
	X.grp <- B %>% #
		group_by_(.dots=c(#
			population.grouping.variables, #
			sampling.grouping.variables, #
			"n_sims"#
		)) %>% #
		calculateBiasComponents(., resultslist=H, variables=ovar)#
	Y <- Reduce(#
		function(x, y) merge(#
			x, y,#
			by=c(#
				population.grouping.variables, #
				sampling.grouping.variables, #
				"n_sims"#
			)#
		),#
		X.grp#
	) %>%#
		setnames("n_sims", "ovar_n_sims")#
	# ratio variables#
	H <- vector("list", length(rvar))#
	X.grp <- E %>% #
		group_by_at(#
			population.grouping.variables, #
			sampling.grouping.variables, #
			"n_sims"#
		) %>% #
		calculateBiasComponents(., resultslist=H, variables=rvar_variables)#
	Z <- Reduce(#
		function(x, y) merge(#
			x, y,#
			by=c(#
				population.grouping.variables, #
				sampling.grouping.variables, #
				"n_sims"#
			)#
		),#
		X.grp#
	) %>%#
		setnames("n_sims", "rvar_n_sims")#
	Y %<>% merge(Z, #
		by=c(#
			population.grouping.variables, #
			sampling.grouping.variables#
		),#
		all=T#
	)#
	return(Y)#
}
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
simulation_data_summary_table_original_yHT = calculateSamplingBias(#
	population_data_summary	= patch_data_summary_wide, #
	simulation_data		= simdata_all, #
	sampling.grouping.variables	= sampling.grouping.variables, #
	population.grouping.variables = population.grouping.variables,#
	ovar			= ovar, #
	rvar			= rvar,#
	o_rvar			= "Stricta"#
)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
rvar_variables <- paste(rvar, "_ratio", sep="")#
	. <- n_sims <- A <- B <- C <- D <- E <- I <- G <- H <- NULL#
	A <- merge(#
		population_data_summary, #
		simulation_data, #
		by=population.grouping.variables#
	)#
	# ------------------------------------------------------------------------ ##
	# OCCUPANCY VARIABLES	#
	# ------------------------------------------------------------------------ ##
	B <- A #
	# add number of simulations to dataset#
	B %<>% #
		group_by(.dots = c(#
			population.grouping.variables, #
			sampling.grouping.variables#
		)) %>%#
		mutate(n_sims = n())#
	B %<>% calculateMeanofObservedMeans(dataframe=B, variables=ovar)#
	# WHY IS IT ONLY CALC MEAN OF OBS MEANS FOR RVAR?#
	# ------------------------------------------------------------------------ ##
	# RATIO VARIABLES	#
	# ------------------------------------------------------------------------ ##
	E <- A#
	# E %<>% filter(Stricta_mean_observed!=0)#
	E %<>% calculateMeanofObservedMeans(dataframe=B, variables=c(rvar_variables))#
	E %<>% calculatedSquaredDifferences(variables=c(o_rvar, rvar_variables))#
	E %<>% calculateDifferencesinMeans(variables=c(o_rvar, rvar_variables))#
#
	B %<>% calculatedSquaredDifferences(variables=ovar)#
	B %<>% calculateDifferencesinMeans(variables=ovar)#
	# calculate bias and MSE#
	# occupancy variables#
	H <- vector("list", length(ovar))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
calculateMeanofObservedMeans <- function(dataframe, variables, nsims, population.grouping.variables, sampling.grouping.variables) {#
	# group data to prep for processing by #
	#		population.grouping.variables, #
	#		sampling.grouping.variables, and#
	#		n_sims#
	temp <- dataframe %>% group_by_at(#
		population.grouping.variables, #
		sampling.grouping.variables, #
		"n_sims"#
	))#
	# list for saving results#
	C <- vector("list", length(variables))#
	# for each of the population.grouping.variables and sampling.grouping.variables, calculate:#
	#	mean of observed means#
	#	sample size used for those calculations#
	for (i in 1:length(variables)) {#
		C[[i]] <- list()#
		# observed mean#
		var = sym(#
				paste(#
					variables[i],#
					"_mean_observed",#
					sep=""#
				)#
			)		#
		C[[i]] <- temp %>%#
			summarise(#
				mean_of_observed_means = mean(!!var, na.rm=T),#
				sample_size = length(!is.na(!!var))#
			) %>%#
			setnames(#
		      	.,#
		      	"mean_of_observed_means",#
		      	paste(#
		      		variables[i],#
		      		"_mean_of_observed_means",#
		      		sep=""#
				)#
			) %>%#
			setnames(#
		      	.,#
		      	"sample_size",#
		      	paste(#
		      		variables[i],#
		      		"_mean_of_observed_means_n",#
		      		sep=""#
				)#
			)#
	}#
	D <- Reduce(#
		function(x, y) merge(#
			x, y,#
			by=c(#
				population.grouping.variables, #
				sampling.grouping.variables, #
				"n_sims"#
			)#
		),#
		C#
	)#
	dataframe %<>% merge(#
		D, #
		by=c(#
			population.grouping.variables, #
			sampling.grouping.variables,#
			"n_sims"#
		)#
	)#
	return(dataframe)#
}#
#
#' Calculate Simulation Data Sampling Bias#
#' #
#' @param population_data_summary Summary statistics on the species patch realizations of patches (created by \code{calculateRealizationSummaryStatistics} function).
setwd('/Users/KSauby/Documents/Projects/ACS/R')
calculateMeanofObservedMeans <- function(dataframe, variables, nsims, population.grouping.variables, sampling.grouping.variables) {#
	# group data to prep for processing by #
	#		population.grouping.variables, #
	#		sampling.grouping.variables, and#
	#		n_sims#
	temp <- dataframe %>% group_by_at(#
		population.grouping.variables, #
		sampling.grouping.variables, #
		"n_sims"#
	))#
	# list for saving results#
	C <- vector("list", length(variables))#
	# for each of the population.grouping.variables and sampling.grouping.variables, calculate:#
	#	mean of observed means#
	#	sample size used for those calculations#
	for (i in 1:length(variables)) {#
		C[[i]] <- list()#
		# observed mean#
		var = sym(#
				paste(#
					variables[i],#
					"_mean_observed",#
					sep=""#
				)#
			)		#
		C[[i]] <- temp %>%#
			summarise(#
				mean_of_observed_means = mean(!!var, na.rm=T),#
				sample_size = length(!is.na(!!var))#
			) %>%#
			setnames(#
		      	.,#
		      	"mean_of_observed_means",#
		      	paste(#
		      		variables[i],#
		      		"_mean_of_observed_means",#
		      		sep=""#
				)#
			) %>%#
			setnames(#
		      	.,#
		      	"sample_size",#
		      	paste(#
		      		variables[i],#
		      		"_mean_of_observed_means_n",#
		      		sep=""#
				)#
			)#
	}#
	D <- Reduce(#
		function(x, y) merge(#
			x, y,#
			by=c(#
				population.grouping.variables, #
				sampling.grouping.variables, #
				"n_sims"#
			)#
		),#
		C#
	)#
	dataframe %<>% merge(#
		D, #
		by=c(#
			population.grouping.variables, #
			sampling.grouping.variables,#
			"n_sims"#
		)#
	)#
	return(dataframe)#
}#
#
#' Calculate Simulation Data Sampling Bias#
#' #
#' @param population_data_summary Summary statistics on the species patch realizations of patches (created by \code{calculateRealizationSummaryStatistics} function).#
#' @param simulation_data Simulation data on sampling of the multiple patch realizations.#
#' @param population.grouping.variables Categorical variables with which to group the po
setwd('/Users/KSauby/Documents/Projects/ACS/R')
calculateMeanofObservedMeans <- function(dataframe, variables, nsims, population.grouping.variables, sampling.grouping.variables) {#
	# group data to prep for processing by #
	#		population.grouping.variables, #
	#		sampling.grouping.variables, and#
	#		n_sims#
	temp <- dataframe %>% group_by_at(#
		population.grouping.variables, #
		sampling.grouping.variables, #
		"n_sims"#
	)#
	# list for saving results#
	C <- vector("list", length(variables))#
	# for each of the population.grouping.variables and sampling.grouping.variables, calculate:#
	#	mean of observed means#
	#	sample size used for those calculations#
	for (i in 1:length(variables)) {#
		C[[i]] <- list()#
		# observed mean#
		var = sym(#
				paste(#
					variables[i],#
					"_mean_observed",#
					sep=""#
				)#
			)		#
		C[[i]] <- temp %>%#
			summarise(#
				mean_of_observed_means = mean(!!var, na.rm=T),#
				sample_size = length(!is.na(!!var))#
			) %>%#
			setnames(#
		      	.,#
		      	"mean_of_observed_means",#
		      	paste(#
		      		variables[i],#
		      		"_mean_of_observed_means",#
		      		sep=""#
				)#
			) %>%#
			setnames(#
		      	.,#
		      	"sample_size",#
		      	paste(#
		      		variables[i],#
		      		"_mean_of_observed_means_n",#
		      		sep=""#
				)#
			)#
	}#
	D <- Reduce(#
		function(x, y) merge(#
			x, y,#
			by=c(#
				population.grouping.variables, #
				sampling.grouping.variables, #
				"n_sims"#
			)#
		),#
		C#
	)#
	dataframe %<>% merge(#
		D, #
		by=c(#
			population.grouping.variables, #
			sampling.grouping.variables,#
			"n_sims"#
		)#
	)#
	return(dataframe)#
}#
#
#' Calculate Simulation Data Sampling Bias#
#' #
#' @param population_data_summary Summary statistics on the species patch realizations of patches (created by \code{calculateRealizationSummaryStatistics} function).#
#' @param simulation_data Simulation data on sampling of the multiple patch realizations.#
#'
setwd('/Users/KSauby/Documents/Projects/ACS/R')
rvar_variables <- paste(rvar, "_ratio", sep="")#
	. <- n_sims <- A <- B <- C <- D <- E <- I <- G <- H <- NULL#
	A <- merge(#
		population_data_summary, #
		simulation_data, #
		by=population.grouping.variables#
	)#
	# ------------------------------------------------------------------------ ##
	# OCCUPANCY VARIABLES	#
	# ------------------------------------------------------------------------ ##
	B <- A #
	# add number of simulations to dataset#
	B %<>% #
		group_by(.dots = c(#
			population.grouping.variables, #
			sampling.grouping.variables#
		)) %>%#
		mutate(n_sims = n())#
	B %<>% calculateMeanofObservedMeans(dataframe=B, variables=ovar)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
rvar_variables <- paste(rvar, "_ratio", sep="")#
	. <- n_sims <- A <- B <- C <- D <- E <- I <- G <- H <- NULL#
	A <- merge(#
		population_data_summary, #
		simulation_data, #
		by=population.grouping.variables#
	)#
	# ------------------------------------------------------------------------ ##
	# OCCUPANCY VARIABLES	#
	# ------------------------------------------------------------------------ ##
	B <- A #
	# add number of simulations to dataset#
	B %<>% #
		group_by(.dots = c(#
			population.grouping.variables, #
			sampling.grouping.variables#
		)) %>%#
		mutate(n_sims = n())
setwd('/Users/KSauby/Documents/Projects/ACS/R')
dataframe=B
setwd('/Users/KSauby/Documents/Projects/ACS/R')
variables=ovar
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp <- dataframe %>% group_by_at(#
		population.grouping.variables, #
		sampling.grouping.variables, #
		"n_sims"#
	)#
	# list for saving results#
	C <- vector("list", length(variables))#
	# for each of the population.grouping.variables and sampling.grouping.variables, calculate:#
	#	mean of observed means
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp <- dataframe %>% group_by_at(#
		!!parse_quosure(population.grouping.variables), #
		!!parse_quosure(sampling.grouping.variables), #
		"n_sims"#
	)
library(rlang)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp <- dataframe %>% group_by_at(#
		!!parse_quosure(population.grouping.variables), #
		!!parse_quosure(sampling.grouping.variables), #
		"n_sims"#
	)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp <- dataframe %>% group_by_at(#
		!!parse_quo(population.grouping.variables), #
		!!parse_quo(sampling.grouping.variables), #
		"n_sims"#
	)#
	# list for saving results
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp <- dataframe %>% group_by_at(#
		!!! population.grouping.variables, #
		!!! sampling.grouping.variables, #
		"n_sims"#
	)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp <- dataframe %>% group_by_at(#
		!! population.grouping.variables, #
		!!! sampling.grouping.variables, #
		"n_sims"#
	)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp <- dataframe %>% group_by(#
		!!! population.grouping.variables, #
		!!! sampling.grouping.variables, #
		"n_sims"#
	)
head(temp)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp <- dataframe %>% group_by(#
		!!! population.grouping.variables, #
		!!! sampling.grouping.variables, #
		"n_sims"#
	)#
	# list for saving results#
	C <- vector("list", length(variables))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
for (i in 1:length(variables)) {#
		C[[i]] <- list()#
		# observed mean#
		var = sym(#
				paste(#
					variables[i],#
					"_mean_observed",#
					sep=""#
				)#
			)		#
		C[[i]] <- temp %>%#
			summarise(#
				mean_of_observed_means = mean(!!var, na.rm=T),#
				sample_size = length(!is.na(!!var))#
			) %>%#
			setnames(#
		      	.,#
		      	"mean_of_observed_means",#
		      	paste(#
		      		variables[i],#
		      		"_mean_of_observed_means",#
		      		sep=""#
				)#
			) %>%#
			setnames(#
		      	.,#
		      	"sample_size",#
		      	paste(#
		      		variables[i],#
		      		"_mean_of_observed_means_n",#
		      		sep=""#
				)#
			)#
	}
setwd('/Users/KSauby/Documents/Projects/ACS/R')
D <- Reduce(#
		function(x, y) merge(#
			x, y,#
			by=c(#
				population.grouping.variables, #
				sampling.grouping.variables, #
				"n_sims"#
			)#
		),#
		C#
	)
str(C)
C[[1]]
C[[1]] %>% as.data.frame
setwd('/Users/KSauby/Documents/Projects/ACS/R')
group_var <- enquos(c(#
		population.grouping.variables, #
		sampling.grouping.variables, #
		"n_sims"#
		))#
	temp <- dataframe %>% group_by(#
		!!! group_var#
	)#
	# list for saving results#
	C <- vector("list", length(variables))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
c(#
		population.grouping.variables, #
		sampling.grouping.variables, #
		"n_sims"#
		)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
group_var <- c(#
		population.grouping.variables, #
		sampling.grouping.variables, #
		"n_sims"#
		)#
	temp <- dataframe %>% group_by(#
		!!! group_var#
	)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
C <- vector("list", length(variables))#
	# for each of the population.grouping.variables and sampling.grouping.variables, calculate:#
	#	mean of observed means#
	#	sample size used for those calculations#
	for (i in 1:length(variables)) {#
		C[[i]] <- list()#
		# observed mean#
		var = sym(#
				paste(#
					variables[i],#
					"_mean_observed",#
					sep=""#
				)#
			)		#
		C[[i]] <- temp %>%#
			summarise(#
				mean_of_observed_means = mean(!!var, na.rm=T),#
				sample_size = length(!is.na(!!var))#
			) %>%#
			setnames(#
		      	.,#
		      	"mean_of_observed_means",#
		      	paste(#
		      		variables[i],#
		      		"_mean_of_observed_means",#
		      		sep=""#
				)#
			) %>%#
			setnames(#
		      	.,#
		      	"sample_size",#
		      	paste(#
		      		variables[i],#
		      		"_mean_of_observed_means_n",#
		      		sep=""#
				)#
			)#
	}#
	D <- Reduce(#
		function(x, y) merge(#
			x, y,#
			by=c(#
				population.grouping.variables, #
				sampling.grouping.variables, #
				"n_sims"#
			)#
		),#
		C#
	)
C[[1]] %>% as.data.frame
setwd('/Users/KSauby/Documents/Projects/ACS/R')
group_var <- enquos(c(#
		population.grouping.variables, #
		sampling.grouping.variables, #
		"n_sims"#
		))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
group_var <- parse_quosure(c(#
		population.grouping.variables, #
		sampling.grouping.variables, #
		"n_sims"#
		))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
group_var <- enquo(c(#
		population.grouping.variables, #
		sampling.grouping.variables, #
		"n_sims"#
		))
population.grouping.variables
sampling.grouping.variables
setwd('/Users/KSauby/Documents/Projects/ACS/R')
c(#
		population.grouping.variables, #
		sampling.grouping.variables, #
		"n_sims"#
		)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
group_var <- enquo(parse(c(#
		population.grouping.variables, #
		sampling.grouping.variables, #
		"n_sims"#
		)))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
parse(c(#
		population.grouping.variables, #
		sampling.grouping.variables, #
		"n_sims"#
		))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp <- dataframe %>% group_by_at(vars(one_of(#
		c(#
				population.grouping.variables, #
				sampling.grouping.variables, #
				"n_sims"#
				)	)))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
C <- vector("list", length(variables))#
	# for each of the population.grouping.variables and sampling.grouping.variables, calculate:#
	#	mean of observed means#
	#	sample size used for those calculations#
	for (i in 1:length(variables)) {#
		C[[i]] <- list()#
		# observed mean#
		var = sym(#
				paste(#
					variables[i],#
					"_mean_observed",#
					sep=""#
				)#
			)		#
		C[[i]] <- temp %>%#
			summarise(#
				mean_of_observed_means = mean(!!var, na.rm=T),#
				sample_size = length(!is.na(!!var))#
			) %>%#
			setnames(#
		      	.,#
		      	"mean_of_observed_means",#
		      	paste(#
		      		variables[i],#
		      		"_mean_of_observed_means",#
		      		sep=""#
				)#
			) %>%#
			setnames(#
		      	.,#
		      	"sample_size",#
		      	paste(#
		      		variables[i],#
		      		"_mean_of_observed_means_n",#
		      		sep=""#
				)#
			)#
	}
C[[1]] %>% as.data.frame
setwd('/Users/KSauby/Documents/Projects/ACS/R')
calculateMeanofObservedMeans <- function(dataframe, variables, nsims, population.grouping.variables, sampling.grouping.variables) {#
	# group data to prep for processing by #
	#		population.grouping.variables, #
	#		sampling.grouping.variables, and#
	#		n_sims#
	temp <- dataframe %>% group_by_at(vars(one_of(c(#
		population.grouping.variables, #
		sampling.grouping.variables, #
		"n_sims"#
	))))#
	# list for saving results#
	C <- vector("list", length(variables))#
	# for each of the population.grouping.variables and sampling.grouping.variables, calculate:#
	#	mean of observed means#
	#	sample size used for those calculations#
	for (i in 1:length(variables)) {#
		C[[i]] <- list()#
		# observed mean#
		var = sym(#
				paste(#
					variables[i],#
					"_mean_observed",#
					sep=""#
				)#
			)		#
		C[[i]] <- temp %>%#
			summarise(#
				mean_of_observed_means = mean(!!var, na.rm=T),#
				sample_size = length(!is.na(!!var))#
			) %>%#
			setnames(#
		      	.,#
		      	"mean_of_observed_means",#
		      	paste(#
		      		variables[i],#
		      		"_mean_of_observed_means",#
		      		sep=""#
				)#
			) %>%#
			setnames(#
		      	.,#
		      	"sample_size",#
		      	paste(#
		      		variables[i],#
		      		"_mean_of_observed_means_n",#
		      		sep=""#
				)#
			)#
	}#
	D <- Reduce(#
		function(x, y) merge(#
			x, y,#
			by=c(#
				population.grouping.variables, #
				sampling.grouping.variables, #
				"n_sims"#
			)#
		),#
		C#
	)#
	dataframe %<>% merge(#
		D, #
		by=c(#
			population.grouping.variables, #
			sampling.grouping.variables,#
			"n_sims"#
		)#
	)#
	return(dataframe)#
}#
#
#'
setwd('/Users/KSauby/Documents/Projects/ACS/R')
rvar_variables <- paste(rvar, "_ratio", sep="")#
	. <- n_sims <- A <- B <- C <- D <- E <- I <- G <- H <- NULL#
	A <- merge(#
		population_data_summary, #
		simulation_data, #
		by=population.grouping.variables#
	)#
	# ------------------------------------------------------------------------ ##
	# OCCUPANCY VARIABLES	#
	# ------------------------------------------------------------------------ ##
	B <- A #
	# add number of simulations to dataset#
	B %<>% #
		group_by(.dots = c(#
			population.grouping.variables, #
			sampling.grouping.variables#
		)) %>%#
		mutate(n_sims = n())#
	B %<>% calculateMeanofObservedMeans(dataframe=B, variables=ovar)#
	# WHY IS IT ONLY CALC MEAN OF OBS MEANS FOR RVAR?
population.grouping.variables
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
population_data_summary	= patch_data_summary_wide
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
SamplingGroupVar	= sampling.grouping.variables
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
PopGroupVar = population.grouping.variables
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
simulation_data		= simdata_all
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
population_data_summary	= patch_data_summary_wide
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
o_rvar			= "Stricta"
setwd('/Users/KSauby/Documents/Projects/ACS/R')
resultslist[[i]] <- list()#
		VAR = sym(paste(Vars[i],"_mean", sep=""))		#
		var_observed = sym(paste(Vars[i],"MeanObs", sep=""))#
		varMeanObs_True2 = sym(paste(Vars[i],"MeanObs_True2",sep=""))#
		var_var_observed = sym(paste(Vars[i],"_var_observed",sep=""))#
		resultslist[[i]] <- dataframe %>%#
			summarise(#
				# save true mean#
				mean_RB_true_mean = var(!!VAR)[1],#
				MeanRBMeanOfObsMean = mean(!!var_observed, na.rm=TRUE),#
				RB_n = length(!is.na(!!var_observed)),#
				MSESumObs_True2 = sum(!!VarMeanObsMinusTrue2, na.rm = TRUE), #
				MSESampleSize = length(!is.na(!!VarMeanObsMinusTrue2)),#
				# for var_RB: calculate mean of simulated HT variance estimates#
				varRBMeanOfVarEst = mean(!!var_var_observed, na.rm = TRUE), #
				# for var_RB: sample size used to calculate mean of simulated HT variance estimates#
				varRBMeanOfVarEst_n = length(!is.na(!!var_var_observed)),#
				# for var_RB: calculate variance of MeanObs#
				varRBVarOfMeanEst = var(!!var_observed, na.rm = TRUE),#
				# for var_RB: calculate sample size used to calculate variance of MeanObs#
				varRBVarOfMeanEst_n = length(!is.na(!!var_observed))#
			) %>%#
			as.data.frame
setwd('/Users/KSauby/Documents/Projects/ACS/R')
for (i in 1:length(Vars)) {#
		resultslist[[i]] <- list()#
		VAR = sym(paste(Vars[i],"_mean", sep=""))		#
		var_observed = sym(paste(Vars[i],"MeanObs", sep=""))#
		varMeanObs_True2 = sym(paste(Vars[i],"MeanObs_True2",sep=""))#
		var_var_observed = sym(paste(Vars[i],"_var_observed",sep=""))#
		resultslist[[i]] <- dataframe %>%#
			summarise(#
				# save true mean#
				mean_RB_true_mean = var(!!VAR)[1],#
				MeanRBMeanOfObsMean = mean(!!var_observed, na.rm=TRUE),#
				RB_n = length(!is.na(!!var_observed)),#
				MSESumObs_True2 = sum(!!VarMeanObsMinusTrue2, na.rm = TRUE), #
				MSESampleSize = length(!is.na(!!VarMeanObsMinusTrue2)),#
				# for var_RB: calculate mean of simulated HT variance estimates#
				varRBMeanOfVarEst = mean(!!var_var_observed, na.rm = TRUE), #
				# for var_RB: sample size used to calculate mean of simulated HT variance estimates#
				varRBMeanOfVarEst_n = length(!is.na(!!var_var_observed)),#
				# for var_RB: calculate variance of MeanObs#
				varRBVarOfMeanEst = var(!!var_observed, na.rm = TRUE),#
				# for var_RB: calculate sample size used to calculate variance of MeanObs#
				varRBVarOfMeanEst_n = length(!is.na(!!var_observed))#
			) %>%#
			as.data.frame
()
setwd('/Users/KSauby/Documents/Projects/ACS/R')
resultslist[[i]] <- list()#
		VAR = sym(paste(Vars[i],"_mean", sep=""))		#
		var_observed = sym(paste(Vars[i],"MeanObs", sep=""))#
		varMeanObs_True2 = sym(paste(Vars[i],"MeanObs_True2",sep=""))#
		var_var_observed = sym(paste(Vars[i],"_var_observed",sep=""))#
		resultslist[[i]] <- dataframe %>%#
			summarise(#
				# save true mean#
				mean_RB_true_mean = var(!!VAR)[1],#
				MeanRBMeanOfObsMean = mean(!!var_observed, na.rm=TRUE),#
				RB_n = length(!is.na(!!var_observed)),#
				MSESumObs_True2 = sum(!!VarMeanObsMinusTrue2, na.rm = TRUE), #
				MSESampleSize = length(!is.na(!!VarMeanObsMinusTrue2)),#
				# for var_RB: calculate mean of simulated HT variance estimates#
				varRBMeanOfVarEst = mean(!!var_var_observed, na.rm = TRUE), #
				# for var_RB: sample size used to calculate mean of simulated HT variance estimates#
				varRBMeanOfVarEst_n = length(!is.na(!!var_var_observed)),#
				# for var_RB: calculate variance of MeanObs#
				varRBVarOfMeanEst = var(!!var_observed, na.rm = TRUE),#
				# for var_RB: calculate sample size used to calculate variance of MeanObs#
				varRBVarOfMeanEst_n = length(!is.na(!!var_observed))#
			)#
		resultslist[[i]] %<>% #
			mutate(#
				RB = 100 * #
					(.data$MeanRBMeanOfObsMean - .data$mean_RB_true_mean) / #
					.data$mean_RB_true_mean,#
				MSE = #
					.data$MSESumObs_True2/#
					.data$MSESampleSize,#
				var_RB = 100 *#
					(.data$varRBMeanOfVarEst - .data$varRBVarOfMeanEst) / #
					.data$varRBVarOfMeanEst,#
				var_RB_n = min(#
					.data$varRBMeanOfVarEst_n, #
					.data$varRBVarOfMeanEst_n#
				)#
			)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
Vars
setwd('/Users/KSauby/Documents/Projects/ACS/R')
rvar_Vars <- paste(rvar, "_ratio", sep="")#
	. <- n_sims <- A <- B <- C <- D <- E <- I <- G <- H <- NULL#
	A <- merge(#
		population_data_summary, #
		simulation_data, #
		by=PopGroupVar#
	)#
	# ------------------------------------------------------------------------ ##
	# OCCUPANCY Vars	#
	# ------------------------------------------------------------------------ ##
	B <- A #
#
	# add number of simulations to dataset#
	B %<>% #
		group_by_at(vars(one_of(c(PopGroupVar, SamplingGroupVar)) %>%#
		mutate(n_sims = n())
setwd('/Users/KSauby/Documents/Projects/ACS/R')
rvar_Vars <- paste(rvar, "_ratio", sep="")#
	. <- n_sims <- A <- B <- C <- D <- E <- I <- G <- H <- NULL#
	A <- merge(#
		population_data_summary, #
		simulation_data, #
		by=PopGroupVar#
	)#
	# ------------------------------------------------------------------------ ##
	# OCCUPANCY Vars	#
	# ------------------------------------------------------------------------ ##
	B <- A
setwd('/Users/KSauby/Documents/Projects/ACS/R')
B %<>% #
		group_by_at(vars(one_of(c(PopGroupVar, SamplingGroupVar)) %>%#
		mutate(n_sims = n())
)
)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
rvar_Vars <- paste(rvar, "_ratio", sep="")#
	. <- n_sims <- A <- B <- C <- D <- E <- I <- G <- H <- NULL#
	A <- merge(#
		population_data_summary, #
		simulation_data, #
		by=PopGroupVar#
	)#
	# ------------------------------------------------------------------------ ##
	# OCCUPANCY Vars	#
	# ------------------------------------------------------------------------ ##
	B <- A #
#
	# add number of simulations to dataset#
	B %<>% #
		group_by_at(vars(one_of(c(PopGroupVar, SamplingGroupVar)))) %>%#
		mutate(n_sims = n())
setwd('/Users/KSauby/Documents/Projects/ACS/R')
dataframe=B
setwd('/Users/KSauby/Documents/Projects/ACS/R')
Vars=ovar
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp <- dataframe %>% group_by_at(vars(one_of(c(#
		PopGroupVar, SamplingGroupVar, "n_sims"#
	))))#
	C <- vector("list", length(Vars))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
for (i in 1:length(Vars)) {#
		C[[i]] <- list()#
		# observed mean#
		var = sym(paste(Vars[i],"MeanObs",sep=""))		#
		C[[i]] <- temp %>%#
			summarise(#
				MeanObsMeans = mean(!!var, na.rm=T),#
				sample_size = length(!is.na(!!var))#
			)#
		cnames <- c(#
			paste(Vars[i], "_MeanObsMeans", sep=""),#
			paste(Vars[i], "_MeanObsMeans_n", sep="")#
		)#
		C[[i]] %<>% #
			rename(#
				!!cnames[1] := MeanObsMeans,#
				!!cnames[2] := sample_size#
			)#
	}
head(C[[i]])
head(temp)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
population.grouping.Vars

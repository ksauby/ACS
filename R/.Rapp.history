library(ACSampling)
?sampleSpeciesPatchRealizations
simulations=200#
nsamples=c(5,10,20,40)#
population <- createPopulation(x_start = 1, x_end = 30, y_start = 1, y_end = 30)#
avar = NULL#
ovar = c(#
	"Stricta",#
	"Pusilla",#
	"Cactus",#
	"CACA_on_Pusilla",#
	"CACA_on_Stricta",#
	"MEPR_on_Pusilla",#
	"MEPR_on_Stricta",#
	"Old_Moth_Evidence_Pusilla",#
	"Old_Moth_Evidence_Stricta"#
	# "Percent_Cover_Pusilla", # how do I do these? they are occupancy nor abundance#
	# "Percent_Cover_Stricta",#
	# "Height_Pusilla",#
	# "Height_Stricta",#
)		#
# patchdat = cactus.realizations#
# simulation_data <- sampleSpeciesPatchRealizations(patchdat, simulations, #
# 	nsamples, population, avar, ovar)#
# simulations=200#
# #nsamples=c(75,150,225,300,350)#
# simulation_data_SRSWOR <- sampleSpeciesPatchRealizations(patchdat, #
# 	simulations, nsamples, population, avar, ovar)#
# # save data
simulations=200#
nsamples=c(5,10,20,40)#
population <- createPopulation(x_start = 1, x_end = 30, y_start = 1, y_end = 30)#
avar = NULL#
ovar = c(#
	"Stricta",#
	"Pusilla",#
	"Cactus",#
	"CACA_on_Pusilla",#
	"CACA_on_Stricta",#
	"MEPR_on_Pusilla",#
	"MEPR_on_Stricta",#
	"Old_Moth_Evidence_Pusilla",#
	"Old_Moth_Evidence_Stricta"#
	# "Percent_Cover_Pusilla", # how do I do these? they are occupancy nor abundance#
	# "Percent_Cover_Stricta",#
	# "Height_Pusilla",#
	# "Height_Stricta",#
)		#
patchdat = cactus.realizations#
simulation_data <- sampleSpeciesPatchRealizations(patchdat, simulations, #
nsamples, population, avar, ovar)#
simulations=200#
nsamples=c(75,150,225,300,350)#
simulation_data_SRSWOR <- sampleSpeciesPatchRealizations(patchdat, #
simulations, nsamples, population, avar, ovar)#
 save data
data(CactusRealizations)
simulations=200#
nsamples=c(5,10,20,40)#
population <- createPopulation(x_start = 1, x_end = 30, y_start = 1, y_end = 30)#
avar = NULL#
ovar = c(#
	"Stricta",#
	"Pusilla",#
	"Cactus",#
	"CACA_on_Pusilla",#
	"CACA_on_Stricta",#
	"MEPR_on_Pusilla",#
	"MEPR_on_Stricta",#
	"Old_Moth_Evidence_Pusilla",#
	"Old_Moth_Evidence_Stricta"#
	# "Percent_Cover_Pusilla", # how do I do these? they are occupancy nor abundance#
	# "Percent_Cover_Stricta",#
	# "Height_Pusilla",#
	# "Height_Stricta",#
)		#
patchdat = CactusRealizations#
simulation_data <- sampleSpeciesPatchRealizations(patchdat, simulations, #
nsamples, population, avar, ovar)#
simulations=200#
nsamples=c(75,150,225,300,350)#
simulation_data_SRSWOR <- sampleSpeciesPatchRealizations(patchdat, #
simulations, nsamples, population, avar, ovar)#
 save data
simulations=200#
nsamples=c(5,10,20,40)#
population <- createPopulation(x_start = 1, x_end = 30, y_start = 1, y_end = 30)#
avar = NULL#
ovar = c(#
	"Stricta",#
	"Pusilla",#
	"Cactus",#
	"CACA_on_Pusilla",#
	"CACA_on_Stricta",#
	"MEPR_on_Pusilla",#
	"MEPR_on_Stricta",#
	"Old_Moth_Evidence_Pusilla",#
	"Old_Moth_Evidence_Stricta"#
	# "Percent_Cover_Pusilla", # how do I do these? they are occupancy nor abundance#
	# "Percent_Cover_Stricta",#
	# "Height_Pusilla",#
	# "Height_Stricta",#
)		#
popdata = CactusRealizations#
simulation_data <- sampleSpeciesPatchRealizations(patchdat, simulations, #
nsamples, population, avar, ovar)#
sim=200#
n1=c(75,150,225,300,350)#
simulation_data_SRSWOR <- sampleSpeciesPatchRealizations(patchdat, #
simulations, nsamples, population, avar, ovar)#
 save data
mThreshold = NULL;#
	f_max = 2;#
	SampleEstimators = FALSE;#
	SpatStat = TRUE;#
	mChar = TRUE;#
	popvar = "n.networks";#
	realvar = "realization";#
	weights="S"
simulations=200#
nsamples=c(5,10,20,40)#
population <- createPopulation(x_start = 1, x_end = 30, y_start = 1, y_end = 30)#
avar = NULL#
ovar = c(#
	"Stricta",#
	"Pusilla",#
	"Cactus",#
	"CACA_on_Pusilla",#
	"CACA_on_Stricta",#
	"MEPR_on_Pusilla",#
	"MEPR_on_Stricta",#
	"Old_Moth_Evidence_Pusilla",#
	"Old_Moth_Evidence_Stricta"#
	# "Percent_Cover_Pusilla", # how do I do these? they are occupancy nor abundance#
	# "Percent_Cover_Stricta",#
	# "Height_Pusilla",#
	# "Height_Stricta",#
)		#
popdata = CactusRealizations#
simulation_data <- sampleRealizations(patchdat, simulations, #
nsamples, population, avar, ovar)#
sim=200#
n1=c(75,150,225,300,350)#
simulation_data_SRSWOR <- sampleSpeciesPatchRealizations(patchdat, #
simulations, nsamples, population, avar, ovar)#
 save data
setwd('/Users/KSauby/Documents/Projects/ACS/R')
sampleRealizations
setwd('/Users/KSauby/Documents/Projects/ACS/R')
#' Sample species patch realizations simulations#
#
#' @param yvar variable upon which adaptive cluster sampling criterion is based#
#' @param popdata patch realizations#
#' @param sims Number of simulations per population.#
#' @param n1 Vector of initial sample size(s) for the initial simple random sample(s) without replacement; can be a single value or vector of values#
#' @param avar Vector of variables for which abundance should be estimated.#
#' @param ovar Vector of variables for which occupancy should be estimated.#
#' @param rvar Vector of variables for which ratio estimators should be used.#
#' @param SamplingDesign Whether restricted or unrestricted adaptive cluster sampling should be performed; defaults to \code{FALSE}.#
#' @param y_HT_formula Default is "Thompson".#
#' @param var_formula Default is "var_y_HT".#
#' @param mThrshld Default is NULL.#
#' @param f_max Default is 2.#
#' @param SampleEstimators If "TRUE", calculate the sample mean and sample variance for each simulation. Default is FALSE.#
#' @param SpatStat If "TRUE", for each simulation calculate Moran's I, and the nugget, sill, and range of the semivariogram. Default is TRUE#
#' @param weights If SpatStat is "TRUE", this is a vector giving spatial weight matrix styles to use to calculate the Join Count and Moran's I statistics. Can take on values "W", "B", "C", "U", "S", and "minmax". See nb2listw for more details.#
#' @param mChar If "TRUE", for each simulation calculate summary statistics (median, mean, min, and max) for the sample's m values. Also, for each simulation and for the set of unique m values, calculate the same summary statistics.#
#' @param popvar Default is "n.networks"#
#' @param realvar Default is "realization"#
#
#' @description This function simulates sampling of multiple realizations of patches of the species of interest within the grid of locations created with \code{createPopulation}.#
#
#' @references Sauby, K.E and Christman, M.C. \emph{In preparation.} Restricted adaptive cluster sampling.#
#
#' @importFrom foreach foreach %dopar%#
#' @importFrom dplyr summarise_all#
#' @export#
#
#' @examples#
#' sims=200#
#' n1=c(5,10,20,40)#
#' population <- createPopulation(x_start = 1, x_end = 30, y_start = 1, y_end = 30)#
#' avar = NULL#
#' ovar = c(#
#' 	"Stricta",#
#' 	"Pusilla",#
#' 	"Cactus",#
#' 	"CACA_on_Pusilla",#
#' 	"CACA_on_Stricta",#
#' 	"MEPR_on_Pusilla",#
#' 	"MEPR_on_Stricta",#
#' 	"Old_Moth_Evidence_Pusilla",#
#' 	"Old_Moth_Evidence_Stricta"#
#' 	# "Percent_Cover_Pusilla", # how do I do these? they are occupancy nor abundance#
#' 	# "Percent_Cover_Stricta",#
#' 	# "Height_Pusilla",#
#' 	# "Height_Stricta",#
#' )		#
#' data(CactusRealizations)#
#' # popdata = CactusRealizations#
#' # simulation_data <- sampleSpeciesPatchRealizations(popdata, sims, #
#' # 	n1, population, avar, ovar, yvar="Cactus")#
#' # sims=200#
#' # #n1=c(75,150,225,300,350)#
#' # simulation_data_SRSWOR <- sampleSpeciesPatchRealizations(popdata, #
#' # 	sims, n1, population, avar, ovar)#
#' # # save data#
#' # write.csv(simulation_data_SRSWOR, file=paste("simulation_data_SRSWOR", #
#' # format(Sys.time(), "%Y-%m-%d_%H-%M"), ".csv", sep=""))#
#' #  write.csv(simulation_data, file=paste("simulation_data", format(Sys.time(), #
#' # "%Y-%m-%d_%H-%M"), ".csv", sep=""))#
#
sampleRealizations <- function(#
	popdata, #
	sims, #
	n1, #
	avar, #
	ovar, #
	rvar,#
	#ACS=TRUE, #
	SamplingDesign="ACS",#
	yvar,#
	y_HT_formula = "y_HT",#
	var_formula = "var_y_HT",#
	mThreshold = NULL,#
	f_max = 2,#
	SampleEstimators = FALSE,#
	SpatStat = TRUE,#
	mChar = TRUE,#
	popvar = "n.networks",#
	realvar = "realization",#
	weights="S"#
) #
{#
	POPVAR <- sym(popvar)#
	REALVAR <- sym(realvar)#
	n.networks <- realization <- i <- j <- Sampling <- . <- NetworkID <- NULL#
	TIME 					<- Sys.time()#
	popdata 				%<>% arrange_at(c(popvar, realvar))#
	var 					<- c(ovar, avar, rvar)#
	n.patches 				<- length(unique(eval(parse(text=paste(#
								"popdata$",#
								popvar,#
								sep=""#
							)))))#
	nsample.length 			<- length(n1)#
	A 						<- vector("list", n.patches)#
	# c() - same code calculates the HT estimators for occupancy and abundance#
	oavar 					<- c(ovar, avar)#
	OAVAR <- syms(oavar)#
	# empty dataframes will be cbind'd together after HT estimators calculated#
	occ_abund_var 			<- data.frame(row.names = 1:length(c(ovar, avar))) #
	occ_abund_mean 			<- data.frame(row.names = 1:length(c(ovar, avar)))#
	Ratio 					<- data.frame(row.names = 1:length(rvar)) #
	# the names to assign the estimates#
	occ_abund_mean_names 	<- paste(ovar, avar, "MeanObs", sep="")#
	occ_abund_var_names 	<- paste(ovar, avar, "VarObs", sep="")#
	ratio_mean_names 		<- paste(rvar, "RMeanObs", sep="")#
	ratio_var_names 		<- paste(rvar, "RVarObs", sep="")#
	# i=1;j=1;k=1#
	Z = foreach (#
		i = 1:n.patches, # for each species density#
		.inorder = FALSE, #
		.packages = c("magrittr", "foreach", "plyr", "dplyr", "data.table",#
		 	"ACSampling", "intergraph", "network", "igraph", "stringr", "spdep"), #
		.combine = "rbind.fill",#
		#.errorhandling = "pass",#
		.verbose = TRUE#
		) %:%#
	 	foreach (#
			j = 1:nsample.length, # for each sampling effort#
			.combine = "rbind.fill",#
			.inorder = FALSE#
		) %dopar% {#
			cat(paste(i,j, sep="_"))#
			P 			<- popdata %>% #
							filter(n.networks==unique(#
								eval(parse(text=paste(#
									"popdata$",#
									popvar,#
									sep=""#
								)))#
							)[i])#
			N 			<- dim(P)[1]#
			n1 			<- n1[j]#
			A[[i]][[j]] <- list()#
			r 			<- (i - 1) * j + j#
			seeds 		<- runif(sims)#
		    for (k in 1:sims) {#
				temp_seed <- seeds[k]*100000#
				if (SamplingDesign=="ACS") {#
					alldata <- createACS(#
						popdata=P, #
						seed=temp_seed, #
						n1=n1, #
						yvar=yvar#
					)#
				} else if (SamplingDesign=="RACS") {#
					alldata <- createRACS(#
						popdata=P, #
						seed=temp_seed, #
						n1=n1, #
						yvar=yvar,#
						f_max=f_max#
					)#
				} else {#
					alldata <- createSRS(#
						popdata=P, #
						seed=temp_seed, #
						n1=n1#
					)#
				}#
				alldata_all <- alldata#
				if (SampleEstimators == TRUE) {#
					################ SRSWOR Sampling ######################
					if (SamplingDesign!="ACS" & SamplingDesign!="RACS") {#
						# datasets to apply simple mean/variance and simple ratio estimator#
						dats <- "alldata"#
					}#
					if (SamplingDesign=="ACS" | SamplingDesign=="RACS") {#
						################ SRSWOR Data, alldata #################
						SRSWOR_data <- alldata %>% #
							filter(Sampling=="SRSWOR")#
						alldata %<>% filter(Sampling!="Edge")#
						#apply simple mean/variance & simple ratio estimator to:#
						dats <- c("SRSWOR_data", "alldata")#
					}#
					SampleMeanVar <- list()#
					for (n in 1:length(dats)) {#
						dat <- eval(parse(text=dats[[n]])) %>%#
							select(!!!OAVAR) %>%#
							summarise_all(#
								funs(mean, var), na.rm=T#
							)#
						names(dat) <- str_replace(names(dat), "(.*)", "\\1_obs")#
						dat$Plots <- dats[n]#
						SampleMeanVar[[n]] <- dat#
					}#
					SampleMeanVar %<>% rbind.fill#
					# simple ratio estimators applied to alldata, SRSWOR_data#
					if (!(is.null(rvar))) {#
						SmpRatio <- list()#
						for (n in 1:length(dats)) {#
							SmpRatio[[n]] <- data.frame(Var1 = NA)#
							for (l in 1:length(rvar)) {#
								y = eval(parse(#
										text=paste(#
											dats[n], #
											"$", #
											rvar[l], #
											sep=""#
										)#
								))#
								x = eval(parse(#
										text = paste(#
											dats[n], #
											"$",#
											str_sub(rvar[l],-7,-1), #
											sep=""#
										)#
								))#
								m = rep(1, length(y)) # equal P(inclusion) for all#
								SmpRatio[[n]]$Var1 <- R_hat(#
									y = y,#
									x = x,#
									N = N,#
									n1 = n1,#
									m = m#
								)#
							 	SmpRatio[[n]]$Var2 = var_R_hat(#
							 		y = y, #
							 		x = x,#
									N = N, #
							 		n1 = n1, #
							 		m = m#
							 	)#
								names(SmpRatio[[n]])[(dim(SmpRatio[[n]])[2]-1): #
									dim(SmpRatio[[n]])[2]] <- #
									c(#
										paste(#
											rvar[l], #
											"RMeanObs", #
											sep=""#
										),#
										paste(#
											rvar[l], #
											"RVarObs", #
											sep=""#
										)#
									)#
							}#
							SmpRatio[[n]] %<>% mutate(Plots = dats[n])#
						}#
						SmpRatio <- do.call(rbind.data.frame, Ratio)#
					}#
				    SampleMeanVar %<>% merge(SmpRatio)	#
				} else#
				{#
					alldata %<>% filter(Sampling!="Edge")#
				}#
				if (SamplingDesign=="ACS" | SamplingDesign=="RACS") {#
					################ HORVITZ-THOMPSON ESTIMATORS ################
					HT_results <- list()#
					# OCCUPANCY AND ABUNDANCE#
					# summarise data for mean calculations#
					O <- alldata %>% #
						filter(Sampling!="Edge") %>%#
						select(!!!OAVAR, NetworkID, m)#
					# calculate y_HT#
					m <- O$m#
					if (y_HT_formula == "y_HT_RACS")#
					{#
						HT_results[[1]] <- O %>%#
							dplyr::select(!!!OAVAR) %>%#
							summarise_all(#
								funs(new_y_HT),#
								N = N,#
								n1 = n1,#
								m = m,#
								m_threshold = 2#
							)#
					} else if (y_HT_formula == "y_HT")#
					{#
						HT_results[[1]] <- O %>%#
						dplyr::select(!!!OAVAR) %>%#
						summarise_all(#
							funs(y_HT),#
							N = N,#
							n1 = n1,#
							m = m#
						)#
					}#
					names(HT_results[[1]]) <- str_replace(#
						names(HT_results[[1]]), "(.*)", "\\1_yHTobs"#
					)#
					# names() <- c(occ_abund_mean_names)#
					# summarise data for variance calculations#
					O_smd <- alldata %>% #
						select(!!!OAVAR, NetworkID, m) %>%#
						#.[, c(#
						#	paste(oavar, "_network_sum", sep=""), #
						#	"NetworkID", #
						#	"m"#
						#), with=FALSE] %>% #
						filter(!(is.na(NetworkID))) %>%#
						summarise_all(funs(x[1]))#
						#as.data.table %>%#
						# .[, lapply(.SD, function(x) {x[1]}), by=NetworkID]#
					names(O_smd) <- str_replace(#
						names(O_smd), "(.*)", "\\1_network_sum"#
					)#
					m <- O_smd$m#
					# var_y_HT#
					if (var_formula == "var_y_HT_RACS") {#
						HT_results[[2]] <- O_smd %>% #
							select(!!!OAVAR, NetworkID) %>%#
							#.[, c(#
							#	paste(oavar, "_network_sum", sep=""), #
							#	"NetworkID", #
							#	"m"#
							#), with=FALSE] %>% #
							filter(!(is.na(NetworkID))) %>%#
							summarise_all(funs(x[1]))#
							#as.data.table %>%#
							# .[, lapply(.SD, function(x) {x[1]}), by=NetworkID]#
						names(O_smd) <- str_replace(#
							names(O_smd), "(.*)", "\\1_network_sum"#
						)#
						HT_results[[2]] <- O_smd[, paste(#
							oavar, #
							"_network_sum", #
							sep=""#
						), with=FALSE] %>%#
							.[, lapply(#
								.SD, #
								var_y_HT_RACS, #
								N 	= N, #
								n1 	= n1, #
								m	= m,#
								mThreshold = mThreshold#
							)]#
						names(HT_results[[2]]) <- c(occ_abund_var_names)#
					} else if (var_formula == "var_y_HT") {#
						HT_results[[2]] <- O_smd[, paste(#
							oavar, #
							"_network_sum", #
							sep=""#
						), with=FALSE] %>%#
							.[, lapply(#
								.SD, #
								var_y_HT, #
								N 	= N, #
								n1 	= n1, #
								m	= m#
							)]#
						names(HT_results[[2]]) <- c(occ_abund_var_names)#
						#######################################################
					} else if (var_formula == "var_pi") {#
						HT_results[[2]] <- O_smd[, paste(#
							oavar, #
							"_network_sum", #
							sep=""#
						), with=FALSE] %>%#
							.[, lapply(#
								.SD, #
								var_pi, #
								N 	= N, #
								n1 	= n1, #
								m	= m#
							)]#
						names(HT_results[[2]]) <- c(occ_abund_var_names)#
					}#
					# RATIO DATA#
					if (!(is.null(rvar))) {#
						# RATIO#
						# summarise data for variance calculations#
						# do I want to use summarised for everything??????????????#
						mvals <- alldata %>%#
							group_by(NetworkID) %>%#
							summarise(m = m[1])#
						R_smd <- alldata %>%#
							filter(Sampling!="Edge") %>%#
							as.data.table %>%#
							.[, c(rvar, ovar, "NetworkID"), with=FALSE] %>%#
							.[, lapply(.SD, sum, na.rm=T), by=NetworkID] %>%#
							merge(mvals, by="NetworkID")#
						# summarise data for mean calculations#
						# R <- alldata %>% #
						#	filter(Sampling!="Edge") %>%#
						#	.[, c(rvar, ovar, "m"), with=FALSE]#
						HT_results[[3]] <- data.frame(Var1 = NA)#
						for (l in 1:length(rvar)) {#
							y = eval(parse(text=paste("R_smd$", rvar[l], #
								sep="")))#
							x = eval(parse(text = paste("R_smd$", #
								str_sub(rvar[l],-7,-1), sep="")))#
							HT_results[[3]]$Var1 = R_hat(#
								y = y,#
								x = x,#
								N = N, #
								n1 = n1, #
								m = R_smd$m#
							)#
						 	HT_results[[3]]$Var2 = var_R_hat(#
						 		y = y, #
						 		x = x,#
								N = N, #
						 		n1 = n1, #
						 		m = R_smd$m#
						 	)#
							names(HT_results[[3]])[ #
								(dim(HT_results[[3]])[2] - 1) : #
								dim(HT_results[[3]])[2]#
							] <- c(#
									paste(#
										rvar[l], #
										"RMeanObs", #
										sep=""#
									),#
									paste(#
										rvar[l], #
										"RVarObs", #
										sep=""#
									)#
								)#
						}#
					}#
					# merge together			#
					All_HT <- HT_results %>% #
						as.data.frame %>%#
						mutate(Plots = "Horvitz Thompson Mean (All Plots)")#
					# merge estimates#
					if (SampleEstimators == TRUE) {#
						A[[i]][[j]][[k]] = rbind.fill(SampleMeanVar, All_HT)#
					} else#
					{#
						A[[i]][[j]][[k]] <- All_HT#
					}#
				} else#
				{#
					A[[i]][[j]][[k]] <- SampleMeanVar#
				}#
				# add other information#
				A[[i]][[j]][[k]]$simulation 		= k#
				A[[i]][[j]][[k]]$seed 				= temp_seed#
				A[[i]][[j]][[k]]$N.ACS.plots 		= dim(alldata_all)[1] - n1#
				A[[i]][[j]][[k]]$N.Total.plots 		= dim(alldata_all)[1]#
				A[[i]][[j]][[k]]$realvar = eval(parse(text=paste(#
														"P$",#
														realvar,#
														sep=""#
													)))[1]#
				A[[i]][[j]][[k]]$popvar		= eval(parse(text=paste(#
														"P$",#
														popvar,#
														sep=""#
													)))[1]#
				A[[i]][[j]][[k]]$N.SRSWOR.plots 	= n1#
				# m characteristics#
				if (mChar == TRUE) {#
					if (sum(alldata_all$Cactus) > 0) {#
						temp <- alldata_all[which(#
							eval(parse(text=yvar)) > 0#
						),] #
						A[[i]][[j]][[k]]$mean_m <- mean(temp$m)#
						A[[i]][[j]][[k]]$median_m <- median(temp$m)#
						A[[i]][[j]][[k]]$max_m <- max(temp$m)#
						A[[i]][[j]][[k]]$min_m <- min(temp$m)#
						temp %<>%#
							group_by(NetworkID) %>%#
							summarise(m = m[1]) %>%#
							summarise(#
								MEAN = mean(m),#
								MAX = max(m),#
								MIN = min(m),#
								MEDIAN = median(m)#
							)#
						A[[i]][[j]][[k]]$mean_uniq_m <- temp$MEAN#
						A[[i]][[j]][[k]]$median_uniq_m <- temp$MEDIAN#
						A[[i]][[j]][[k]]$max_uniq_m <- temp$MAX#
						A[[i]][[j]][[k]]$min_uniq_m <- temp$MIN#
					} else#
					{#
						A[[i]][[j]][[k]]$mean_m <- NA#
						A[[i]][[j]][[k]]$median_m <- NA#
						A[[i]][[j]][[k]]$max_m <- NA#
						A[[i]][[j]][[k]]$min_m <- NA#
						A[[i]][[j]][[k]]$mean_uniq_m <- NA#
						A[[i]][[j]][[k]]$median_uniq_m <- NA#
						A[[i]][[j]][[k]]$max_uniq_m <- NA#
						A[[i]][[j]][[k]]$min_uniq_m <- NA#
					}#
				}#
				# Spatial Statistics#
				if (SpatStat == TRUE) {#
					if (sum(alldata_all$Cactus) > 1) {#
						temp <- alldata_all %>%#
							as.data.frame %>%#
							# get rid of edge units - not involved in calculation of m#
							filter(!(is.na(NetworkID))) %>%#
							arrange(x, y)#
							# dnearneigh - why was this here?#
						nb <- cell2nb(#
							nrow = max(temp$x) - min(temp$x), #
							ncol = max(temp$y) - min(temp$y)#
						)#
						coordinates(temp) = ~ x+y#
						data_dist <- dim(#
							as.matrix(dist(cbind(temp$x, temp$y)))#
						)[1]#
						if ("W" %in% weights) {#
							lwb <- nb2listw(nb, style = "W") # convert to weights#
							# I think cells are indexed by row, then column#
							A[[i]][[j]][[k]]$JoinCountTest.W <- #
								joincount.test(as.factor(temp$Cactus),#
								lwb#
							)[[2]]$estimate[1]#
							A[[i]][[j]][[k]]$MoranI.W <- moran.test(#
								temp$Cactus,#
								lwb#
							)$estimate[1]#
						}#
						if ("B" %in% weights) {#
							lwb <- nb2listw(nb, style = "B") # convert to weights#
							# I think cells are indexed by row, then column#
							A[[i]][[j]][[k]]$JoinCountTest.B <- #
								joincount.test(as.factor(#
								temp$Cactus),#
								lwb#
							)[[2]]$estimate[1]#
							A[[i]][[j]][[k]]$MoranI.B <- moran.test(#
								temp$Cactus,#
								lwb#
							)$estimate[1]#
						}	#
						if ("C" %in% weights) {#
							lwb <- nb2listw(nb, style = "C") # convert to weights#
							# I think cells are indexed by row, then column#
							A[[i]][[j]][[k]]$JoinCountTest.C <- #
								joincount.test(as.factor(#
								temp$Cactus),#
								lwb#
							)[[2]]$estimate[1]#
							A[[i]][[j]][[k]]$MoranI.C <- moran.test(#
								temp$Cactus,#
								lwb#
							)$estimate[1]#
						}	#
						if ("U" %in% weights) {#
							lwb <- nb2listw(nb, style = "U") # convert to weights#
							# I think cells are indexed by row, then column#
							A[[i]][[j]][[k]]$JoinCountTest.U <- #
								joincount.test(as.factor(#
								temp$Cactus),#
								lwb#
							)[[2]]$estimate[1]#
							A[[i]][[j]][[k]]$MoranI.U <- moran.test(#
								temp$Cactus,#
								lwb#
							)$estimate[1]#
						}	#
						if ("S" %in% weights) {#
							lwb <- nb2listw(nb, style = "S") # convert to weights#
							# I think cells are indexed by row, then column#
							A[[i]][[j]][[k]]$JoinCountTest.S <- #
								joincount.test(as.factor(#
								temp$Cactus),#
								lwb#
							)[[2]]$estimate[1]#
							A[[i]][[j]][[k]]$MoranI.S <- moran.test(#
								temp$Cactus,#
								lwb#
							)$estimate[1]#
						}	#
						if ("minmax" %in% weights) {#
							lwb <- nb2listw(nb, style = "minmax") # convert to weights#
							# I think cells are indexed by row, then column#
							A[[i]][[j]][[k]]$JoinCountTest.minmax <- #
								joincount.test(as.factor(#
								temp$Cactus),#
								lwb#
							)[[2]]$estimate[1]#
							A[[i]][[j]][[k]]$MoranI.minmax <- #
								moran.test(#
								temp$Cactus,#
								lwb#
							)$estimate[1]#
						}#
					} else {#
						if ("W" %in% weights) {#
							A[[i]][[j]][[k]]$JoinCountTest.W <- NA#
							A[[i]][[j]][[k]]$MoranI.W <- NA#
						}#
						if ("B" %in% weights) {#
							A[[i]][[j]][[k]]$JoinCountTest.B <- NA#
							A[[i]][[j]][[k]]$MoranI.B <- NA#
						}	#
						if ("C" %in% weights) {#
							A[[i]][[j]][[k]]$JoinCountTest.C <- NA#
							A[[i]][[j]][[k]]$MoranI.C <- NA#
						}	#
						if ("U" %in% weights) {#
							A[[i]][[j]][[k]]$JoinCountTest.U <- NA#
							A[[i]][[j]][[k]]$MoranI.U <- NA#
						}	#
						if ("S" %in% weights) {#
							A[[i]][[j]][[k]]$JoinCountTest.S <- NA#
							A[[i]][[j]][[k]]$MoranI.S <- NA#
						}	#
						if ("minmax" %in% weights) {#
							A[[i]][[j]][[k]]$JoinCountTest.minmax <- NA#
							A[[i]][[j]][[k]]$MoranI.minmax <- NA#
						}	#
					}#
				}#
			}#
			do.call(rbind.data.frame, A[[i]][[j]])#
	}#
	Z$f_max 		= f_max#
	Z$mThreshold 	= mThreshold#
	Z$nSims			= sims#
	Z$SimDate 		= format(Sys.time(), "%m-%d-%y")#
	Z$y_HT_formula 	= y_HT_formula#
	Z$SmplngDsgn 	= SamplingDesign#
	Z$MrnsIWghtMtrx = weights#
	print(Sys.time() - TIME)#
	return(Z)#
}
simulations=200#
nsamples=c(5,10,20,40)#
population <- createPopulation(x_start = 1, x_end = 30, y_start = 1, y_end = 30)#
avar = NULL#
ovar = c(#
	"Stricta",#
	"Pusilla",#
	"Cactus",#
	"CACA_on_Pusilla",#
	"CACA_on_Stricta",#
	"MEPR_on_Pusilla",#
	"MEPR_on_Stricta",#
	"Old_Moth_Evidence_Pusilla",#
	"Old_Moth_Evidence_Stricta"#
	# "Percent_Cover_Pusilla", # how do I do these? they are occupancy nor abundance#
	# "Percent_Cover_Stricta",#
	# "Height_Pusilla",#
	# "Height_Stricta",#
)		#
popdata = CactusRealizations#
simulation_data <- sampleRealizations(patchdat, simulations, #
nsamples, population, avar, ovar)#
sim=200#
n1=c(75,150,225,300,350)#
simulation_data_SRSWOR <- sampleSpeciesPatchRealizations(patchdat, #
simulations, nsamples, population, avar, ovar)#
 save data
library(dplyr)
simulations=200#
nsamples=c(5,10,20,40)#
population <- createPopulation(x_start = 1, x_end = 30, y_start = 1, y_end = 30)#
avar = NULL#
ovar = c(#
	"Stricta",#
	"Pusilla",#
	"Cactus",#
	"CACA_on_Pusilla",#
	"CACA_on_Stricta",#
	"MEPR_on_Pusilla",#
	"MEPR_on_Stricta",#
	"Old_Moth_Evidence_Pusilla",#
	"Old_Moth_Evidence_Stricta"#
	# "Percent_Cover_Pusilla", # how do I do these? they are occupancy nor abundance#
	# "Percent_Cover_Stricta",#
	# "Height_Pusilla",#
	# "Height_Stricta",#
)		#
popdata = CactusRealizations#
simulation_data <- sampleRealizations(patchdat, simulations, #
nsamples, population, avar, ovar)#
sim=200#
n1=c(75,150,225,300,350)#
simulation_data_SRSWOR <- sampleSpeciesPatchRealizations(patchdat, #
simulations, nsamples, population, avar, ovar)#
 save data
library(magrittr)
simulations=200#
nsamples=c(5,10,20,40)#
population <- createPopulation(x_start = 1, x_end = 30, y_start = 1, y_end = 30)#
avar = NULL#
ovar = c(#
	"Stricta",#
	"Pusilla",#
	"Cactus",#
	"CACA_on_Pusilla",#
	"CACA_on_Stricta",#
	"MEPR_on_Pusilla",#
	"MEPR_on_Stricta",#
	"Old_Moth_Evidence_Pusilla",#
	"Old_Moth_Evidence_Stricta"#
	# "Percent_Cover_Pusilla", # how do I do these? they are occupancy nor abundance#
	# "Percent_Cover_Stricta",#
	# "Height_Pusilla",#
	# "Height_Stricta",#
)		#
popdata = CactusRealizations#
simulation_data <- sampleRealizations(patchdat, simulations, #
nsamples, population, avar, ovar)#
sim=200#
n1=c(75,150,225,300,350)#
simulation_data_SRSWOR <- sampleSpeciesPatchRealizations(patchdat, #
simulations, nsamples, population, avar, ovar)#
 save data
head(CactusRealizations)
unique(CactusRealizations$realization)
unique(CactusRealizations$population)
#' # simulation_data <- sampleSpeciesPatchRealizations(#
#'	popdata, #
#'	sims, #
#'	n1, #
#'	avar, #
#'	ovar, #
#'	popvar="population", #
#'	yvar="Cactus"#
#')simulation_data_SRSWOR <- sampleRealizations(#
#' 	popdata, #
#' 	sims, #
#' 	n1, #
#' 	avar, #
#' 	ovar,#
#' 	popvar="population"#
#' )
simulation_data <- sampleSpeciesPatchRealizations(#
popdata, #
sims, #
n1, #
	avar, #
ovar, #
popvar="population", #
yvar="Cactus"#
)
simulation_data <- sampleRealizations(#
popdata, #
sims, #
n1, #
	avar, #
ovar, #
popvar="population", #
yvar="Cactus"#
)
avar
setwd('/Users/KSauby/Documents/Projects/ACS/R')
#' Sample species patch realizations simulations#
#
#' @param yvar variable upon which adaptive cluster sampling criterion is based#
#' @param popdata patch realizations#
#' @param sims Number of simulations per population.#
#' @param n1 Vector of initial sample size(s) for the initial simple random sample(s) without replacement; can be a single value or vector of values#
#' @param avar Vector of variables for which abundance should be estimated.#
#' @param ovar Vector of variables for which occupancy should be estimated.#
#' @param rvar Vector of variables for which ratio estimators should be used.#
#' @param SamplingDesign Whether restricted or unrestricted adaptive cluster sampling should be performed; defaults to \code{FALSE}.#
#' @param y_HT_formula Default is "Thompson".#
#' @param var_formula Default is "var_y_HT".#
#' @param mThrshld Default is NULL.#
#' @param f_max Default is 2.#
#' @param SampleEstimators If "TRUE", calculate the sample mean and sample variance for each simulation. Default is FALSE.#
#' @param SpatStat If "TRUE", for each simulation calculate Moran's I, and the nugget, sill, and range of the semivariogram. Default is TRUE#
#' @param weights If SpatStat is "TRUE", this is a vector giving spatial weight matrix styles to use to calculate the Join Count and Moran's I statistics. Can take on values "W", "B", "C", "U", "S", and "minmax". See nb2listw for more details.#
#' @param mChar If "TRUE", for each simulation calculate summary statistics (median, mean, min, and max) for the sample's m values. Also, for each simulation and for the set of unique m values, calculate the same summary statistics.#
#' @param popvar Default is "n.networks"#
#' @param realvar Default is "realization"#
#
#' @description This function simulates sampling of multiple realizations of patches of the species of interest within the grid of locations created with \code{createPopulation}.#
#
#' @references Sauby, K.E and Christman, M.C. \emph{In preparation.} Restricted adaptive cluster sampling.#
#
#' @importFrom foreach foreach %dopar%#
#' @importFrom dplyr summarise_all#
#' @export#
#
#' @examples#
#' sims=200#
#' n1=c(5,10,20,40)#
#' population <- createPopulation(x_start = 1, x_end = 30, y_start = 1, y_end = 30)#
#' avar = NULL#
#' ovar = c(#
#' 	"Stricta",#
#' 	"Pusilla",#
#' 	"Cactus",#
#' 	"CACA_on_Pusilla",#
#' 	"CACA_on_Stricta",#
#' 	"MEPR_on_Pusilla",#
#' 	"MEPR_on_Stricta",#
#' 	"Old_Moth_Evidence_Pusilla",#
#' 	"Old_Moth_Evidence_Stricta"#
#' 	# "Percent_Cover_Pusilla", # how do I do these? they are occupancy nor abundance#
#' 	# "Percent_Cover_Stricta",#
#' 	# "Height_Pusilla",#
#' 	# "Height_Stricta",#
#' )		#
#' data(CactusRealizations)#
#' # popdata = CactusRealizations#
#' # simulation_data <- sampleSpeciesPatchRealizations(#
#'	popdata, #
#'	sims, #
#'	n1, #
#'	avar, #
#'	ovar, #
#'	popvar="population", #
#'	yvar="Cactus"#
#')#
#' # sims=200#
#' # #n1=c(75,150,225,300,350)#
#' simulation_data_SRSWOR <- sampleSpeciesPatchRealizations(#
#' 	popdata, #
#' 	sims, #
#' 	n1, #
#' 	avar, #
#' 	ovar,#
#' 	popvar="population"#
#' )#
#' # # save data#
#' # write.csv(simulation_data_SRSWOR, file=paste("simulation_data_SRSWOR", #
#' # format(Sys.time(), "%Y-%m-%d_%H-%M"), ".csv", sep=""))#
#' #  write.csv(simulation_data, file=paste("simulation_data", format(Sys.time(), #
#' # "%Y-%m-%d_%H-%M"), ".csv", sep=""))#
#
sampleRealizations <- function(#
	popdata, #
	sims, #
	n1, #
	avar=NULL, #
	ovar, #
	rvar=NULL,#
	#ACS=TRUE, #
	SamplingDesign="ACS",#
	yvar,#
	y_HT_formula = "y_HT",#
	var_formula = "var_y_HT",#
	mThreshold = NULL,#
	f_max = 2,#
	SampleEstimators = FALSE,#
	SpatStat = TRUE,#
	mChar = TRUE,#
	popvar = "n.networks",#
	realvar = "realization",#
	weights="S"#
) #
{#
	POPVAR <- sym(popvar)#
	REALVAR <- sym(realvar)#
	n.networks <- realization <- i <- j <- Sampling <- . <- NetworkID <- NULL#
	TIME 					<- Sys.time()#
	popdata 				%<>% arrange_at(c(popvar, realvar))#
	var 					<- c(ovar, avar, rvar)#
	n.patches 				<- length(unique(eval(parse(text=paste(#
								"popdata$",#
								popvar,#
								sep=""#
							)))))#
	nsample.length 			<- length(n1)#
	A 						<- vector("list", n.patches)#
	# c() - same code calculates the HT estimators for occupancy and abundance#
	oavar 					<- c(ovar, avar)#
	OAVAR <- syms(oavar)#
	# empty dataframes will be cbind'd together after HT estimators calculated#
	occ_abund_var 			<- data.frame(row.names = 1:length(c(ovar, avar))) #
	occ_abund_mean 			<- data.frame(row.names = 1:length(c(ovar, avar)))#
	Ratio 					<- data.frame(row.names = 1:length(rvar)) #
	# the names to assign the estimates#
	occ_abund_mean_names 	<- paste(ovar, avar, "MeanObs", sep="")#
	occ_abund_var_names 	<- paste(ovar, avar, "VarObs", sep="")#
	ratio_mean_names 		<- paste(rvar, "RMeanObs", sep="")#
	ratio_var_names 		<- paste(rvar, "RVarObs", sep="")#
	# i=1;j=1;k=1#
	Z = foreach (#
		i = 1:n.patches, # for each species density#
		.inorder = FALSE, #
		.packages = c("magrittr", "foreach", "plyr", "dplyr", "data.table",#
		 	"ACSampling", "intergraph", "network", "igraph", "stringr", "spdep"), #
		.combine = "rbind.fill",#
		#.errorhandling = "pass",#
		.verbose = TRUE#
		) %:%#
	 	foreach (#
			j = 1:nsample.length, # for each sampling effort#
			.combine = "rbind.fill",#
			.inorder = FALSE#
		) %dopar% {#
			cat(paste(i,j, sep="_"))#
			P 			<- popdata %>% #
							filter(n.networks==unique(#
								eval(parse(text=paste(#
									"popdata$",#
									popvar,#
									sep=""#
								)))#
							)[i])#
			N 			<- dim(P)[1]#
			n1 			<- n1[j]#
			A[[i]][[j]] <- list()#
			r 			<- (i - 1) * j + j#
			seeds 		<- runif(sims)#
		    for (k in 1:sims) {#
				temp_seed <- seeds[k]*100000#
				if (SamplingDesign=="ACS") {#
					alldata <- createACS(#
						popdata=P, #
						seed=temp_seed, #
						n1=n1, #
						yvar=yvar#
					)#
				} else if (SamplingDesign=="RACS") {#
					alldata <- createRACS(#
						popdata=P, #
						seed=temp_seed, #
						n1=n1, #
						yvar=yvar,#
						f_max=f_max#
					)#
				} else {#
					alldata <- createSRS(#
						popdata=P, #
						seed=temp_seed, #
						n1=n1#
					)#
				}#
				alldata_all <- alldata#
				if (SampleEstimators == TRUE) {#
					################ SRSWOR Sampling ######################
					if (SamplingDesign!="ACS" & SamplingDesign!="RACS") {#
						# datasets to apply simple mean/variance and simple ratio estimator#
						dats <- "alldata"#
					}#
					if (SamplingDesign=="ACS" | SamplingDesign=="RACS") {#
						################ SRSWOR Data, alldata #################
						SRSWOR_data <- alldata %>% #
							filter(Sampling=="SRSWOR")#
						alldata %<>% filter(Sampling!="Edge")#
						#apply simple mean/variance & simple ratio estimator to:#
						dats <- c("SRSWOR_data", "alldata")#
					}#
					SampleMeanVar <- list()#
					for (n in 1:length(dats)) {#
						dat <- eval(parse(text=dats[[n]])) %>%#
							select(!!!OAVAR) %>%#
							summarise_all(#
								funs(mean, var), na.rm=T#
							)#
						names(dat) <- str_replace(names(dat), "(.*)", "\\1_obs")#
						dat$Plots <- dats[n]#
						SampleMeanVar[[n]] <- dat#
					}#
					SampleMeanVar %<>% rbind.fill#
					# simple ratio estimators applied to alldata, SRSWOR_data#
					if (!(is.null(rvar))) {#
						SmpRatio <- list()#
						for (n in 1:length(dats)) {#
							SmpRatio[[n]] <- data.frame(Var1 = NA)#
							for (l in 1:length(rvar)) {#
								y = eval(parse(#
										text=paste(#
											dats[n], #
											"$", #
											rvar[l], #
											sep=""#
										)#
								))#
								x = eval(parse(#
										text = paste(#
											dats[n], #
											"$",#
											str_sub(rvar[l],-7,-1), #
											sep=""#
										)#
								))#
								m = rep(1, length(y)) # equal P(inclusion) for all#
								SmpRatio[[n]]$Var1 <- R_hat(#
									y = y,#
									x = x,#
									N = N,#
									n1 = n1,#
									m = m#
								)#
							 	SmpRatio[[n]]$Var2 = var_R_hat(#
							 		y = y, #
							 		x = x,#
									N = N, #
							 		n1 = n1, #
							 		m = m#
							 	)#
								names(SmpRatio[[n]])[(dim(SmpRatio[[n]])[2]-1): #
									dim(SmpRatio[[n]])[2]] <- #
									c(#
										paste(#
											rvar[l], #
											"RMeanObs", #
											sep=""#
										),#
										paste(#
											rvar[l], #
											"RVarObs", #
											sep=""#
										)#
									)#
							}#
							SmpRatio[[n]] %<>% mutate(Plots = dats[n])#
						}#
						SmpRatio <- do.call(rbind.data.frame, Ratio)#
					}#
				    SampleMeanVar %<>% merge(SmpRatio)	#
				} else#
				{#
					alldata %<>% filter(Sampling!="Edge")#
				}#
				if (SamplingDesign=="ACS" | SamplingDesign=="RACS") {#
					################ HORVITZ-THOMPSON ESTIMATORS ################
					HT_results <- list()#
					# OCCUPANCY AND ABUNDANCE#
					# summarise data for mean calculations#
					O <- alldata %>% #
						filter(Sampling!="Edge") %>%#
						select(!!!OAVAR, NetworkID, m)#
					# calculate y_HT#
					m <- O$m#
					if (y_HT_formula == "y_HT_RACS")#
					{#
						HT_results[[1]] <- O %>%#
							dplyr::select(!!!OAVAR) %>%#
							summarise_all(#
								funs(new_y_HT),#
								N = N,#
								n1 = n1,#
								m = m,#
								m_threshold = 2#
							)#
					} else if (y_HT_formula == "y_HT")#
					{#
						HT_results[[1]] <- O %>%#
						dplyr::select(!!!OAVAR) %>%#
						summarise_all(#
							funs(y_HT),#
							N = N,#
							n1 = n1,#
							m = m#
						)#
					}#
					names(HT_results[[1]]) <- str_replace(#
						names(HT_results[[1]]), "(.*)", "\\1_yHTobs"#
					)#
					# names() <- c(occ_abund_mean_names)#
					# summarise data for variance calculations#
					O_smd <- alldata %>% #
						select(!!!OAVAR, NetworkID, m) %>%#
						#.[, c(#
						#	paste(oavar, "_network_sum", sep=""), #
						#	"NetworkID", #
						#	"m"#
						#), with=FALSE] %>% #
						filter(!(is.na(NetworkID))) %>%#
						summarise_all(funs(x[1]))#
						#as.data.table %>%#
						# .[, lapply(.SD, function(x) {x[1]}), by=NetworkID]#
					names(O_smd) <- str_replace(#
						names(O_smd), "(.*)", "\\1_network_sum"#
					)#
					m <- O_smd$m#
					# var_y_HT#
					if (var_formula == "var_y_HT_RACS") {#
						HT_results[[2]] <- O_smd %>% #
							select(!!!OAVAR, NetworkID) %>%#
							#.[, c(#
							#	paste(oavar, "_network_sum", sep=""), #
							#	"NetworkID", #
							#	"m"#
							#), with=FALSE] %>% #
							filter(!(is.na(NetworkID))) %>%#
							summarise_all(funs(x[1]))#
							#as.data.table %>%#
							# .[, lapply(.SD, function(x) {x[1]}), by=NetworkID]#
						names(O_smd) <- str_replace(#
							names(O_smd), "(.*)", "\\1_network_sum"#
						)#
						HT_results[[2]] <- O_smd[, paste(#
							oavar, #
							"_network_sum", #
							sep=""#
						), with=FALSE] %>%#
							.[, lapply(#
								.SD, #
								var_y_HT_RACS, #
								N 	= N, #
								n1 	= n1, #
								m	= m,#
								mThreshold = mThreshold#
							)]#
						names(HT_results[[2]]) <- c(occ_abund_var_names)#
					} else if (var_formula == "var_y_HT") {#
						HT_results[[2]] <- O_smd[, paste(#
							oavar, #
							"_network_sum", #
							sep=""#
						), with=FALSE] %>%#
							.[, lapply(#
								.SD, #
								var_y_HT, #
								N 	= N, #
								n1 	= n1, #
								m	= m#
							)]#
						names(HT_results[[2]]) <- c(occ_abund_var_names)#
						#######################################################
					} else if (var_formula == "var_pi") {#
						HT_results[[2]] <- O_smd[, paste(#
							oavar, #
							"_network_sum", #
							sep=""#
						), with=FALSE] %>%#
							.[, lapply(#
								.SD, #
								var_pi, #
								N 	= N, #
								n1 	= n1, #
								m	= m#
							)]#
						names(HT_results[[2]]) <- c(occ_abund_var_names)#
					}#
					# RATIO DATA#
					if (!(is.null(rvar))) {#
						# RATIO#
						# summarise data for variance calculations#
						# do I want to use summarised for everything??????????????#
						mvals <- alldata %>%#
							group_by(NetworkID) %>%#
							summarise(m = m[1])#
						R_smd <- alldata %>%#
							filter(Sampling!="Edge") %>%#
							as.data.table %>%#
							.[, c(rvar, ovar, "NetworkID"), with=FALSE] %>%#
							.[, lapply(.SD, sum, na.rm=T), by=NetworkID] %>%#
							merge(mvals, by="NetworkID")#
						# summarise data for mean calculations#
						# R <- alldata %>% #
						#	filter(Sampling!="Edge") %>%#
						#	.[, c(rvar, ovar, "m"), with=FALSE]#
						HT_results[[3]] <- data.frame(Var1 = NA)#
						for (l in 1:length(rvar)) {#
							y = eval(parse(text=paste("R_smd$", rvar[l], #
								sep="")))#
							x = eval(parse(text = paste("R_smd$", #
								str_sub(rvar[l],-7,-1), sep="")))#
							HT_results[[3]]$Var1 = R_hat(#
								y = y,#
								x = x,#
								N = N, #
								n1 = n1, #
								m = R_smd$m#
							)#
						 	HT_results[[3]]$Var2 = var_R_hat(#
						 		y = y, #
						 		x = x,#
								N = N, #
						 		n1 = n1, #
						 		m = R_smd$m#
						 	)#
							names(HT_results[[3]])[ #
								(dim(HT_results[[3]])[2] - 1) : #
								dim(HT_results[[3]])[2]#
							] <- c(#
									paste(#
										rvar[l], #
										"RMeanObs", #
										sep=""#
									),#
									paste(#
										rvar[l], #
										"RVarObs", #
										sep=""#
									)#
								)#
						}#
					}#
					# merge together			#
					All_HT <- HT_results %>% #
						as.data.frame %>%#
						mutate(Plots = "Horvitz Thompson Mean (All Plots)")#
					# merge estimates#
					if (SampleEstimators == TRUE) {#
						A[[i]][[j]][[k]] = rbind.fill(SampleMeanVar, All_HT)#
					} else#
					{#
						A[[i]][[j]][[k]] <- All_HT#
					}#
				} else#
				{#
					A[[i]][[j]][[k]] <- SampleMeanVar#
				}#
				# add other information#
				A[[i]][[j]][[k]]$simulation 		= k#
				A[[i]][[j]][[k]]$seed 				= temp_seed#
				A[[i]][[j]][[k]]$N.ACS.plots 		= dim(alldata_all)[1] - n1#
				A[[i]][[j]][[k]]$N.Total.plots 		= dim(alldata_all)[1]#
				A[[i]][[j]][[k]]$realvar = eval(parse(text=paste(#
														"P$",#
														realvar,#
														sep=""#
													)))[1]#
				A[[i]][[j]][[k]]$popvar		= eval(parse(text=paste(#
														"P$",#
														popvar,#
														sep=""#
													)))[1]#
				A[[i]][[j]][[k]]$N.SRSWOR.plots 	= n1#
				# m characteristics#
				if (mChar == TRUE) {#
					if (sum(alldata_all$Cactus) > 0) {#
						temp <- alldata_all[which(#
							eval(parse(text=yvar)) > 0#
						),] #
						A[[i]][[j]][[k]]$mean_m <- mean(temp$m)#
						A[[i]][[j]][[k]]$median_m <- median(temp$m)#
						A[[i]][[j]][[k]]$max_m <- max(temp$m)#
						A[[i]][[j]][[k]]$min_m <- min(temp$m)#
						temp %<>%#
							group_by(NetworkID) %>%#
							summarise(m = m[1]) %>%#
							summarise(#
								MEAN = mean(m),#
								MAX = max(m),#
								MIN = min(m),#
								MEDIAN = median(m)#
							)#
						A[[i]][[j]][[k]]$mean_uniq_m <- temp$MEAN#
						A[[i]][[j]][[k]]$median_uniq_m <- temp$MEDIAN#
						A[[i]][[j]][[k]]$max_uniq_m <- temp$MAX#
						A[[i]][[j]][[k]]$min_uniq_m <- temp$MIN#
					} else#
					{#
						A[[i]][[j]][[k]]$mean_m <- NA#
						A[[i]][[j]][[k]]$median_m <- NA#
						A[[i]][[j]][[k]]$max_m <- NA#
						A[[i]][[j]][[k]]$min_m <- NA#
						A[[i]][[j]][[k]]$mean_uniq_m <- NA#
						A[[i]][[j]][[k]]$median_uniq_m <- NA#
						A[[i]][[j]][[k]]$max_uniq_m <- NA#
						A[[i]][[j]][[k]]$min_uniq_m <- NA#
					}#
				}#
				# Spatial Statistics#
				if (SpatStat == TRUE) {#
					if (sum(alldata_all$Cactus) > 1) {#
						temp <- alldata_all %>%#
							as.data.frame %>%#
							# get rid of edge units - not involved in calculation of m#
							filter(!(is.na(NetworkID))) %>%#
							arrange(x, y)#
							# dnearneigh - why was this here?#
						nb <- cell2nb(#
							nrow = max(temp$x) - min(temp$x), #
							ncol = max(temp$y) - min(temp$y)#
						)#
						coordinates(temp) = ~ x+y#
						data_dist <- dim(#
							as.matrix(dist(cbind(temp$x, temp$y)))#
						)[1]#
						if ("W" %in% weights) {#
							lwb <- nb2listw(nb, style = "W") # convert to weights#
							# I think cells are indexed by row, then column#
							A[[i]][[j]][[k]]$JoinCountTest.W <- #
								joincount.test(as.factor(temp$Cactus),#
								lwb#
							)[[2]]$estimate[1]#
							A[[i]][[j]][[k]]$MoranI.W <- moran.test(#
								temp$Cactus,#
								lwb#
							)$estimate[1]#
						}#
						if ("B" %in% weights) {#
							lwb <- nb2listw(nb, style = "B") # convert to weights#
							# I think cells are indexed by row, then column#
							A[[i]][[j]][[k]]$JoinCountTest.B <- #
								joincount.test(as.factor(#
								temp$Cactus),#
								lwb#
							)[[2]]$estimate[1]#
							A[[i]][[j]][[k]]$MoranI.B <- moran.test(#
								temp$Cactus,#
								lwb#
							)$estimate[1]#
						}	#
						if ("C" %in% weights) {#
							lwb <- nb2listw(nb, style = "C") # convert to weights#
							# I think cells are indexed by row, then column#
							A[[i]][[j]][[k]]$JoinCountTest.C <- #
								joincount.test(as.factor(#
								temp$Cactus),#
								lwb#
							)[[2]]$estimate[1]#
							A[[i]][[j]][[k]]$MoranI.C <- moran.test(#
								temp$Cactus,#
								lwb#
							)$estimate[1]#
						}	#
						if ("U" %in% weights) {#
							lwb <- nb2listw(nb, style = "U") # convert to weights#
							# I think cells are indexed by row, then column#
							A[[i]][[j]][[k]]$JoinCountTest.U <- #
								joincount.test(as.factor(#
								temp$Cactus),#
								lwb#
							)[[2]]$estimate[1]#
							A[[i]][[j]][[k]]$MoranI.U <- moran.test(#
								temp$Cactus,#
								lwb#
							)$estimate[1]#
						}	#
						if ("S" %in% weights) {#
							lwb <- nb2listw(nb, style = "S") # convert to weights#
							# I think cells are indexed by row, then column#
							A[[i]][[j]][[k]]$JoinCountTest.S <- #
								joincount.test(as.factor(#
								temp$Cactus),#
								lwb#
							)[[2]]$estimate[1]#
							A[[i]][[j]][[k]]$MoranI.S <- moran.test(#
								temp$Cactus,#
								lwb#
							)$estimate[1]#
						}	#
						if ("minmax" %in% weights) {#
							lwb <- nb2listw(nb, style = "minmax") # convert to weights#
							# I think cells are indexed by row, then column#
							A[[i]][[j]][[k]]$JoinCountTest.minmax <- #
								joincount.test(as.factor(#
								temp$Cactus),#
								lwb#
							)[[2]]$estimate[1]#
							A[[i]][[j]][[k]]$MoranI.minmax <- #
								moran.test(#
								temp$Cactus,#
								lwb#
							)$estimate[1]#
						}#
					} else {#
						if ("W" %in% weights) {#
							A[[i]][[j]][[k]]$JoinCountTest.W <- NA#
							A[[i]][[j]][[k]]$MoranI.W <- NA#
						}#
						if ("B" %in% weights) {#
							A[[i]][[j]][[k]]$JoinCountTest.B <- NA#
							A[[i]][[j]][[k]]$MoranI.B <- NA#
						}	#
						if ("C" %in% weights) {#
							A[[i]][[j]][[k]]$JoinCountTest.C <- NA#
							A[[i]][[j]][[k]]$MoranI.C <- NA#
						}	#
						if ("U" %in% weights) {#
							A[[i]][[j]][[k]]$JoinCountTest.U <- NA#
							A[[i]][[j]][[k]]$MoranI.U <- NA#
						}	#
						if ("S" %in% weights) {#
							A[[i]][[j]][[k]]$JoinCountTest.S <- NA#
							A[[i]][[j]][[k]]$MoranI.S <- NA#
						}	#
						if ("minmax" %in% weights) {#
							A[[i]][[j]][[k]]$JoinCountTest.minmax <- NA#
							A[[i]][[j]][[k]]$MoranI.minmax <- NA#
						}	#
					}#
				}#
			}#
			do.call(rbind.data.frame, A[[i]][[j]])#
	}#
	Z$f_max 		= f_max#
	Z$mThreshold 	= mThreshold#
	Z$nSims			= sims#
	Z$SimDate 		= format(Sys.time(), "%m-%d-%y")#
	Z$y_HT_formula 	= y_HT_formula#
	Z$SmplngDsgn 	= SamplingDesign#
	Z$MrnsIWghtMtrx = weights#
	print(Sys.time() - TIME)#
	return(Z)#
}
simulation_data <- sampleRealizations(#
popdata, #
sims, #
n1, #
	avar, #
ovar, #
popvar="population", #
yvar="Cactus"#
)
library(foreach)
simulation_data <- sampleRealizations(#
popdata, #
sims, #
n1, #
	avar, #
ovar, #
popvar="population", #
yvar="Cactus"#
)
??rbind.fill
popdata
popvar="population";#
yvar="Cactus"
setwd('/Users/KSauby/Documents/Projects/ACS/R')
POPVAR <- sym(popvar)#
	REALVAR <- sym(realvar)#
	n.networks <- realization <- i <- j <- Sampling <- . <- NetworkID <- NULL#
	TIME 					<- Sys.time()#
	popdata 				%<>% arrange_at(c(popvar, realvar))#
	var 					<- c(ovar, avar, rvar)#
	n.patches 				<- length(unique(eval(parse(text=paste(#
								"popdata$",#
								popvar,#
								sep=""#
							)))))#
	nsample.length 			<- length(n1)#
	A 						<- vector("list", n.patches)
rvar=NULL
setwd('/Users/KSauby/Documents/Projects/ACS/R')
POPVAR <- sym(popvar)#
	REALVAR <- sym(realvar)#
	n.networks <- realization <- i <- j <- Sampling <- . <- NetworkID <- NULL#
	TIME 					<- Sys.time()#
	popdata 				%<>% arrange_at(c(popvar, realvar))#
	var 					<- c(ovar, avar, rvar)#
	n.patches 				<- length(unique(eval(parse(text=paste(#
								"popdata$",#
								popvar,#
								sep=""#
							)))))#
	nsample.length 			<- length(n1)#
	A 						<- vector("list", n.patches)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
POPVAR <- sym(popvar)#
	REALVAR <- sym(realvar)#
	n.networks <- realization <- i <- j <- Sampling <- . <- NetworkID <- NULL#
	TIME 					<- Sys.time()#
	popdata 				%<>% arrange_at(c(popvar, realvar))#
	var 					<- c(ovar, avar, rvar)#
	n.patches 				<- length(unique(eval(parse(text=paste(#
								"popdata$",#
								popvar,#
								sep=""#
							)))))#
	nsample.length 			<- length(n1)#
	A 						<- vector("list", n.patches)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
oavar 					<- c(ovar, avar)#
	OAVAR <- syms(oavar)#
	# empty dataframes will be cbind'd together after HT estimators calculated#
	occ_abund_var 			<- data.frame(row.names = 1:length(c(ovar, avar))) #
	occ_abund_mean 			<- data.frame(row.names = 1:length(c(ovar, avar)))#
	Ratio 					<- data.frame(row.names = 1:length(rvar)) #
	# the names to assign the estimates#
	occ_abund_mean_names 	<- paste(ovar, avar, "MeanObs", sep="")#
	occ_abund_var_names 	<- paste(ovar, avar, "VarObs", sep="")#
	ratio_mean_names 		<- paste(rvar, "RMeanObs", sep="")#
	ratio_var_names 		<- paste(rvar, "RVarObs", sep="")
i=1
k=1
l=1
j=1
n=1
setwd('/Users/KSauby/Documents/Projects/ACS/R')
cat(paste(i,j, sep="_"))#
			P 			<- popdata %>% #
							filter(n.networks==unique(#
								eval(parse(text=paste(#
									"popdata$",#
									popvar,#
									sep=""#
								)))#
							)[i])#
			N 			<- dim(P)[1]#
			n1 			<- n1[j]#
			A[[i]][[j]] <- list()#
			r 			<- (i - 1) * j + j#
			seeds 		<- runif(sims)
str(popdata)
popvar
setwd('/Users/KSauby/Documents/Projects/ACS/R')
P 			<- popdata %>% #
							filter(!!POPVAR == unique(#
								eval(parse(text=paste(#
									"popdata$",#
									popvar,#
									sep=""#
								)))#
							)[i])
dim(P)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
cat(paste(i,j, sep="_"))#
			P 			<- popdata %>% #
							filter(!!POPVAR == unique(#
								eval(parse(text=paste(#
									"popdata$",#
									popvar,#
									sep=""#
								)))#
							)[i])#
			N 			<- dim(P)[1]#
			n1 			<- n1[j]#
			A[[i]][[j]] <- list()#
			r 			<- (i - 1) * j + j#
			seeds 		<- runif(sims)
sims
setwd('/Users/KSauby/Documents/Projects/ACS/R')
sims=200
setwd('/Users/KSauby/Documents/Projects/ACS/R')
cat(paste(i,j, sep="_"))#
			P 			<- popdata %>% #
							filter(!!POPVAR == unique(#
								eval(parse(text=paste(#
									"popdata$",#
									popvar,#
									sep=""#
								)))#
							)[i])#
			N 			<- dim(P)[1]#
			n1 			<- n1[j]#
			A[[i]][[j]] <- list()#
			r 			<- (i - 1) * j + j#
			seeds 		<- runif(sims)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp_seed <- seeds[k]*100000
setwd('/Users/KSauby/Documents/Projects/ACS/R')
SamplingDesign=="ACS"
setwd('/Users/KSauby/Documents/Projects/ACS/R')
SamplingDesign="ACS"
setwd('/Users/KSauby/Documents/Projects/ACS/R')
alldata <- createACS(#
						popdata=P, #
						seed=temp_seed, #
						n1=n1, #
						yvar=yvar#
					)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
#' Create an Adaptive Cluster Sample.#
#'#
#' @param popdata The population to be sampled.#
#' @param seed A vector of numbers to feed to \code{set.seed()} so that the sampling is reproducible. Defaults to NA so that it is not necessary to specific a random number seed.#
#' @param n1 The initial sample size (sampled according to simple random sampling without replacement).#
#' @param yvar The variable of interest that is used to determine the condition under which adaptive cluster sampling takes place.#
#' @param condition Threshold value of the y variable that initiates ACS. Defaults to 0 (i.e., anything greater than 0 initiates adaptive cluster sampling).#
#' @param initsample Allows the user to specify a list of x and y coordinates of the initial sample. Defaults to "NA" so that the initial sample is selected according to simple random sampling without replacement.#
#
#' @return A restricted adaptive cluster sample.#
#
#' @examples#
#' library(ggplot2)#
#' data(Thompson1990Figure1Population)#
#' data(Thompson1990Figure1Sample)#
#' #
#' # Initiate ACS#
#' Z = createACS(#
#'	popdata=Thompson1990Figure1Population, #
#'	seed=2, #
#'	n1=10, #
#'	yvar="y_value", #
#'	condition=0#
#')#
#' #
#' # plot ACS sample overlaid onto population#
#' ggplot() +#
#' 	geom_point(data=Thompson1990Figure1Population, aes(x,y, size=factor(y_value),#
#' 		shape=factor(y_value))) +#
#' 	scale_shape_manual(values=c(1, rep(16, length(2:13)))) +#
#' 	geom_point(data=Z, aes(x,y), shape=0, size=7)#
#' # Initiate ACS, different seed#
#' Z = createACS(popdata=Thompson1990Figure1Population, seed=26, n1=10, yvar="y_value", condition=0)#
#' #
#' # plot ACS sample overlaid onto population#
#' ggplot() +#
#' 	geom_point(data=Thompson1990Figure1Population, aes(x,y, size=factor(y_value),#
#' 		shape=factor(y_value))) +#
#' 	scale_shape_manual(values=c(1, rep(16, length(2:13)))) +#
#' 	geom_point(data=Z, aes(x,y), shape=0, size=7)#
#
#' @references Sauby, K.E and Christman, M.C. \emph{In preparation.} A Sampling Strategy Designed to Maximize the Efficiency of Data Collection of Food Web Relationships.#
#
#' @export#
#' @importFrom plyr rbind.fill#
#' @importFrom dplyr filter rowwise#
#' @importFrom ggplot2 ggplot#
#' @importFrom data.table data.table as.data.table setkey setnames#
#
createACS <- function(popdata, n1, yvar, condition=0, seed=NA, initsample=NA) {#
	. <- Sampling <- y_val <- NULL#
	if (is.data.frame(initsample)) {#
		S <- merge(popdata, initsample, all.y=TRUE) 	#
		S$Sampling <- "Primary Sample"#
	} else {#
		if (!is.na(seed)) {set.seed(seed)}#
		S <- createSRS(popdata=popdata, n1=n1)#
	}#
	# add the rest of the units for each network in the initial sample#
	Z = popdata %>%#
		dplyr::filter(.data$NetworkID %in% S$NetworkID) %>%#
		merge(S, all.x=T)#
	Networks = Z %>% filter(eval(parse(text=yvar)) > condition)#
	# if there are units that satisfy the condition, fill in edge units#
	if (dim(Networks)[1] > 0) {#
		names(Z)[names(Z) == yvar] <- 'y_val'#
		#Z %<>%#
		#	as.data.table %>%#
		#	setnames(yvar, "y_val")#
		if (dim(Z[which(is.na(Z$Sampling)), ])[1] > 0) {#
			Z[which(is.na(Z$Sampling)), ]$Sampling <- "Cluster"#
		}#
		# fill in edge units#
		E = data.table(#
			x = as.numeric(rowSums(expand.grid(Networks$x, c(1,-1,0,0)))),#
		  	y = rowSums(expand.grid(Networks$y, c(0,0,1,-1))),#
			Sampling = "Edge",#
			key = c("x", "y")#
		) %>%#
		rowwise() %>%#
		mutate(xy = paste(.data$x,.data$y)) %>%#
		ungroup()#
		Z %<>% #
			rowwise() %>%#
			mutate(xy = paste(.data$x,.data$y)) %>% #
			ungroup()#
		E %<>% filter(!(.data$xy %in% Z$xy))#
		Z %<>% #
			rbind.fill(E) %>% #
			as.data.table() %>% #
			setkey("x", "y") %>% #
	 	   	unique %>%#
			dplyr::select(-.data$xy)#
		# remove plots outside of population extent#
		Z %<>% subset(#
			x %in% popdata$x &#
			y %in% popdata$y#
		)#
		# fill in values for Edge units#
		if (dim(Z[ is.na(Z$y_val) ])[1] > 0) {#
			Z[ Sampling=="Edge" ]$y_val <- 0#
			Z[ Sampling=="Edge" ]$m <- 0#
		}	#
		setnames(Z, "y_val", yvar)#
		Z %<>%#
			arrange()#
		return(Z)#
	} else {#
		# if there are NO units that satisfy the condition, stop here and return the SRSWOR sample#
		return(Z)#
	}#
}
setwd('/Users/KSauby/Documents/Projects/ACS/R')
alldata <- createACS(#
						popdata=P, #
						seed=temp_seed, #
						n1=n1, #
						yvar=yvar#
					)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
#' Create a Simple Random Sample Without Replacement.#
#' #
#' @param popdata grid of population to be sampled.#
#' @param seed vector of numbers to feed to \code{set.seed()} so that the sampling is reproducible. Defaults to NA so that it is not necessary to specific a random number seed.#
#' @param n1 initial sample size (sampled according to simple random sampling without replacement).#
#' @param replace Should sampling be done with replacement? Defaults to FALSE.#
#' @return A restricted adaptive cluster sample.#
#' @examples#
#' # example#
#' # create the population#
#' # create the patch#
#' # then sample#
#' #
#' data(Thompson1990Figure1Population)#
#' data(Thompson1990Figure1Sample)#
#' Z = createSRS(Thompson1990Figure1Population, seed=2, n1=10)#
#' @export#
#
createSRS <- function(popdata, n1, seed=NA, replace=F) {#
	if (!is.na(seed)) {set.seed(seed)}#
	sample <- popdata[sample(#
		x 		= 1:dim(popdata)[1], #
		size 	= n1, #
		replace = replace#
	), ]#
	if (replace==F) {#
		sample$Sampling <- "SRSWOR"#
	} else {#
		sample$Sampling <- "SRSWR"#
	}#
	return(sample)		#
}
setwd('/Users/KSauby/Documents/Projects/ACS/R')
alldata <- createACS(#
						popdata=P, #
						seed=temp_seed, #
						n1=n1, #
						yvar=yvar#
					)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
createSRS
setwd('/Users/KSauby/Documents/Projects/ACS/R')
. <- Sampling <- y_val <- NULL#
	if (is.data.frame(initsample)) {#
		S <- merge(popdata, initsample, all.y=TRUE) 	#
		S$Sampling <- "Primary Sample"#
	} else {#
		if (!is.na(seed)) {set.seed(seed)}#
		S <- createSRS(popdata=popdata, n1=n1)#
	}
setwd('/Users/KSauby/Documents/Projects/ACS/R')
initsample=NA
setwd('/Users/KSauby/Documents/Projects/ACS/R')
if (!is.na(seed)) {set.seed(seed)}#
		S <- createSRS(popdata=popdata, n1=n1)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
seed=NA
setwd('/Users/KSauby/Documents/Projects/ACS/R')
. <- Sampling <- y_val <- NULL
setwd('/Users/KSauby/Documents/Projects/ACS/R')
if (!is.na(seed)) {set.seed(seed)}#
		S <- createSRS(popdata=popdata, n1=n1)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
Z = popdata %>%#
		dplyr::filter(.data$NetworkID %in% S$NetworkID) %>%#
		merge(S, all.x=T)#
	Networks = Z %>% filter(eval(parse(text=yvar)) > condition)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
condition=0
setwd('/Users/KSauby/Documents/Projects/ACS/R')
data(Thompson1990Figure1Population)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
data(Thompson1990Figure1Sample)
Z = createACS(#
popdata=Thompson1990Figure1Population, #
seed=2, #
n1=10, #
yvar="y_value", #
condition=0)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
. <- Sampling <- y_val <- NULL#
	if (is.data.frame(initsample)) {#
		S <- merge(popdata, initsample, all.y=TRUE) 	#
		S$Sampling <- "Primary Sample"#
	} else {#
		if (!is.na(seed)) {set.seed(seed)}#
		S <- createSRS(popdata=popdata, n1=n1)#
	}
setwd('/Users/KSauby/Documents/Projects/ACS/R')
Z = popdata %>%#
		dplyr::filter(.data$NetworkID %in% S$NetworkID) %>%#
		merge(S, all.x=T)#
	Networks = Z %>% filter(eval(parse(text=yvar)) > condition)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
dim(Networks)[1] > 0
setwd('/Users/KSauby/Documents/Projects/ACS/R')
names(Z)[names(Z) == yvar] <- 'y_val'#
		#Z %<>%#
		#	as.data.table %>%#
		#	setnames(yvar, "y_val")#
		if (dim(Z[which(is.na(Z$Sampling)), ])[1] > 0) {#
			Z[which(is.na(Z$Sampling)), ]$Sampling <- "Cluster"#
		}#
		# fill in edge units
setwd('/Users/KSauby/Documents/Projects/ACS/R')
E = data.frame(#
			x = as.numeric(rowSums(expand.grid(Networks$x, c(1,-1,0,0)))),#
		  	y = rowSums(expand.grid(Networks$y, c(0,0,1,-1))),#
			Sampling = "Edge"#,#
			#key = c("x", "y")#
		)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
E = data.frame(#
			x = as.numeric(rowSums(expand.grid(Networks$x, c(1,-1,0,0)))),#
		  	y = rowSums(expand.grid(Networks$y, c(0,0,1,-1))),#
			Sampling = "Edge"#,#
			#key = c("x", "y")#
		) %>%#
		rowwise() %>%#
		mutate(xy = paste(.data$x,.data$y)) %>%#
		ungroup()
setwd('/Users/KSauby/Documents/Projects/ACS/R')
Z %<>% #
			rowwise() %>%#
			mutate(xy = paste(.data$x,.data$y)) %>% #
			ungroup()
setwd('/Users/KSauby/Documents/Projects/ACS/R')
E %<>% filter(!(.data$xy %in% Z$xy))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
Z %<>% #
			rbind.fill(E)
Z %<>% #
			plyr::rbind.fill(E)
?bind_rows
setwd('/Users/KSauby/Documents/Projects/ACS/R')
if (is.data.frame(initsample)) {#
		S <- merge(popdata, initsample, all.y=TRUE) 	#
		S$Sampling <- "Primary Sample"#
	} else {#
		if (!is.na(seed)) {set.seed(seed)}#
		S <- createSRS(popdata=popdata, n1=n1)#
	}#
	# add the rest of the units for each network in the initial sample#
	Z = popdata %>%#
		dplyr::filter(.data$NetworkID %in% S$NetworkID) %>%#
		merge(S, all.x=T)#
	Networks = Z %>% filter(eval(parse(text=yvar)) > condition)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
names(Z)[names(Z) == yvar] <- 'y_val'#
		#Z %<>%#
		#	as.data.table %>%#
		#	setnames(yvar, "y_val")#
		if (dim(Z[which(is.na(Z$Sampling)), ])[1] > 0) {#
			Z[which(is.na(Z$Sampling)), ]$Sampling <- "Cluster"#
		}#
		# fill in edge units#
		E = data.frame(#
			x = as.numeric(rowSums(expand.grid(Networks$x, c(1,-1,0,0)))),#
		  	y = rowSums(expand.grid(Networks$y, c(0,0,1,-1))),#
			Sampling = "Edge"#,#
			#key = c("x", "y")#
		) %>%#
		rowwise() %>%#
		mutate(xy = paste(.data$x,.data$y)) %>%#
		ungroup()#
		Z %<>% #
			rowwise() %>%#
			mutate(xy = paste(.data$x,.data$y)) %>% #
			ungroup()#
		E %<>% filter(!(.data$xy %in% Z$xy))#
		Z %<>% #
			bind_rows(E)
head(Z)
Z %>% arrange(x,y)
?duplicated
setwd('/Users/KSauby/Documents/Projects/ACS/R')
Z = popdata %>%#
		dplyr::filter(.data$NetworkID %in% S$NetworkID) %>%#
		merge(S, all.x=T)#
	Networks = Z %>% filter(eval(parse(text=yvar)) > condition)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
names(Z)[names(Z) == yvar] <- 'y_val'#
		#Z %<>%#
		#	as.data.table %>%#
		#	setnames(yvar, "y_val")#
		if (dim(Z[which(is.na(Z$Sampling)), ])[1] > 0) {#
			Z[which(is.na(Z$Sampling)), ]$Sampling <- "Cluster"#
		}#
		# fill in edge units#
		E = data.frame(#
			x = as.numeric(rowSums(expand.grid(Networks$x, c(1,-1,0,0)))),#
		  	y = rowSums(expand.grid(Networks$y, c(0,0,1,-1))),#
			Sampling = "Edge"#,#
			#key = c("x", "y")#
		) %>%#
		rowwise() %>%#
		mutate(xy = paste(.data$x,.data$y)) %>%#
		ungroup()
setwd('/Users/KSauby/Documents/Projects/ACS/R')
Z %<>% #
			rowwise() %>%#
			mutate(xy = paste(.data$x,.data$y)) %>% #
			ungroup()#
		E %<>% filter(!(.data$xy %in% Z$xy))#
		ZZ <- Z %>% #
			bind_rows(E) %>%#
			.[!duplicated(.[, c("x", "y")])]
setwd('/Users/KSauby/Documents/Projects/ACS/R')
ZZ <- Z %>% #
			bind_rows(E) %>%#
			#.[!duplicated(#
				.[, c("x", "y")]#)]
head(ZZ)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
ZZ <- Z %>% #
			bind_rows(E) %>%#
			.[!duplicated(.[, c("x", "y")])]
setwd('/Users/KSauby/Documents/Projects/ACS/R')
ZZ <- Z %>% #
			group_by(x,y) %>%#
			bind_rows(E) %>%#
			filter(!duplicated(.))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
ZZ <- Z %>% #
			#group_by(x,y) %>%#
			bind_rows(E) %>%#
			filter(!duplicated(c(x,y)))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
ZZ <- Z %>% #
			group_by(x,y) %>%#
			bind_rows(E) %>%#
			filter(row_number()==1)
str(E)
str(Z)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
Z %<>% #
			rowwise() %>%#
			mutate(xy = paste(.data$x,.data$y)) %>% #
			ungroup()#
		Z$Sampling %<>% as.factor()#
		E %<>% filter(!(.data$xy %in% Z$xy))#
		ZZ <- Z %>% #
			bind_rows(E) %>%#
			group_by(x,y) %>%#
			filter(row_number()==1)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
Z %<>% #
			rowwise() %>%#
			mutate(xy = paste(.data$x,.data$y)) %>% #
			ungroup()#
		E$Sampling %<>% as.character()#
		E %<>% filter(!(.data$xy %in% Z$xy))#
		ZZ <- Z %>% #
			bind_rows(E) %>%#
			group_by(x,y) %>%#
			filter(row_number()==1)
str(E)
str(Z)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
Z = popdata %>%#
		dplyr::filter(.data$NetworkID %in% S$NetworkID) %>%#
		merge(S, all.x=T)#
	Networks = Z %>% filter(eval(parse(text=yvar)) > condition)#
	# if there are units that satisfy the condition, fill in edge units
setwd('/Users/KSauby/Documents/Projects/ACS/R')
names(Z)[names(Z) == yvar] <- 'y_val'#
		#Z %<>%#
		#	as.data.table %>%#
		#	setnames(yvar, "y_val")#
		if (dim(Z[which(is.na(Z$Sampling)), ])[1] > 0) {#
			Z[which(is.na(Z$Sampling)), ]$Sampling <- "Cluster"#
		}#
		# fill in edge units#
		E = data.frame(#
			x = as.numeric(rowSums(expand.grid(Networks$x, c(1,-1,0,0)))),#
		  	y = rowSums(expand.grid(Networks$y, c(0,0,1,-1))),#
			Sampling = "Edge"#,#
			#key = c("x", "y")#
		) %>%#
		rowwise() %>%#
		mutate(xy = paste(.data$x,.data$y)) %>%#
		ungroup()#
		Z %<>% #
			rowwise() %>%#
			mutate(xy = paste(.data$x,.data$y)) %>% #
			ungroup()#
		E$Sampling %<>% as.character()#
		E %<>% filter(!(.data$xy %in% Z$xy))#
		ZZ <- Z %>% #
			bind_rows(E) %>%#
			group_by(x,y) %>%#
			filter(row_number()==1)
head(ZZ)
head(popdata)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
length(max(popdata$x))
max(popdata$x)
nchar(max(popdata$x))
str_pad(#
				2,#
				nchar(max(popdata$x)),#
				"0"#
			)
library(stringr)
str_pad(#
				2,#
				nchar(max(popdata$x)),#
				"0"#
			)
str_pad(#
				2,#
				nchar(max(popdata$x)),#
				"0", "left"#
			)
?str_pad
str_pad(#
				2,#
				nchar(max(popdata$x)),#
				"0",#
				side="left"#
			)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
Z = popdata %>%#
		dplyr::filter(.data$NetworkID %in% S$NetworkID) %>%#
		merge(S, all.x=T)#
	Networks = Z %>% filter(eval(parse(text=yvar)) > condition)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
if (dim(Z[which(is.na(Z$Sampling)), ])[1] > 0) {#
			Z[which(is.na(Z$Sampling)), ]$Sampling <- "Cluster"#
		}#
		# fill in edge units#
		E = data.frame(#
			x = as.numeric(rowSums(expand.grid(Networks$x, c(1,-1,0,0)))),#
		  	y = rowSums(expand.grid(Networks$y, c(0,0,1,-1))),#
			Sampling = "Edge"#,#
			#key = c("x", "y")#
		) %>%#
		rowwise() %>%#
		mutate(xy = paste(#
			str_pad(#
				.data$x,#
				nchar(max(popdata$x)),#
				"0",#
				side="left"#
			),#
			str_pad(#
				.data$y,#
				nchar(max(popdata$y)),#
				"0",#
				side="left"#
			)#
		)) %>%#
		ungroup()#
		Z %<>% #
			mutate(xy = paste(#
				str_pad(#
					.data$x,#
					nchar(max(popdata$x)),#
					"0",#
					side="left"#
				),#
				str_pad(#
					.data$y,#
					nchar(max(popdata$y)),#
					"0",#
					side="left"#
				)#
			)) %>%#
			ungroup()#
		E$Sampling %<>% as.character()#
		E %<>% filter(!(.data$xy %in% Z$xy))#
		ZZ <- Z %>% #
			bind_rows(E) %>%#
			group_by(x,y) %>%#
			filter(row_number()==1)#
			#rbind.fill(E) %>% #
			# as.data.table() %>% #
			#setkey("x", "y") %>% #
	 	   	#unique %>%#
			# dplyr::select(-.data$xy)#
		# remove plots outside of population extent#
		Z %<>% subset(#
			x %in% popdata$x &#
			y %in% popdata$y#
		)
head(ZZ)
head(ZZ) %>% arrange(xy)
head(ZZ) %>% arrange(xy) %>% as.data.frame
ZZ %>% arrange(xy) %>% as.data.frame
setwd('/Users/KSauby/Documents/Projects/ACS/R')
E = data.frame(#
			x = as.numeric(rowSums(expand.grid(Networks$x, c(1,-1,0,0)))),#
		  	y = rowSums(expand.grid(Networks$y, c(0,0,1,-1))),#
			Sampling = "Edge"#,#
			#key = c("x", "y")#
		) %>%#
		rowwise() %>%#
		mutate(xy = paste(#
			str_pad(#
				.data$x,#
				nchar(max(popdata$x)),#
				"0",#
				side="left"#
			),#
			str_pad(#
				.data$y,#
				nchar(max(popdata$y)),#
				"0",#
				side="left"#
			)#
		)) %>%#
		ungroup()#
		Z %<>% #
			mutate(xy = paste(#
				str_pad(#
					.data$x,#
					nchar(max(popdata$x)),#
					"0",#
					side="left"#
				),#
				str_pad(#
					.data$y,#
					nchar(max(popdata$y)),#
					"0",#
					side="left"#
				)#
			)) %>%#
			ungroup()#
		E$Sampling %<>% as.character()#
		E %<>% filter(!(.data$xy %in% Z$xy))#
		ZZ <- Z %>%
bind_rows(E)
ZZ %>% arrange(xy) %>% as.data.frame
setwd('/Users/KSauby/Documents/Projects/ACS/R')
YVAR <- sym(yvar)#
	. <- Sampling <- y_val <- NULL#
	if (is.data.frame(initsample)) {#
		S <- merge(popdata, initsample, all.y=TRUE) 	#
		S$Sampling <- "Primary Sample"#
	} else {#
		if (!is.na(seed)) {set.seed(seed)}#
		S <- createSRS(popdata=popdata, n1=n1)#
	}#
	# add the rest of the units for each network in the initial sample#
	Z = popdata %>%#
		dplyr::filter(.data$NetworkID %in% S$NetworkID) %>%#
		merge(S, all.x=T)#
	Networks = Z %>% filter(eval(parse(text=yvar)) > condition)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
if (dim(Z[which(is.na(Z$Sampling)), ])[1] > 0) {#
			Z[which(is.na(Z$Sampling)), ]$Sampling <- "Cluster"#
		}#
		# fill in edge units#
		E = data.frame(#
			x = as.numeric(rowSums(expand.grid(Networks$x, c(1,-1,0,0)))),#
		  	y = rowSums(expand.grid(Networks$y, c(0,0,1,-1))),#
			Sampling = "Edge"#,#
			#key = c("x", "y")#
		) %>%#
		rowwise() %>%#
		mutate(xy = paste(#
			str_pad(#
				.data$x,#
				nchar(max(popdata$x)),#
				"0",#
				side="left"#
			),#
			str_pad(#
				.data$y,#
				nchar(max(popdata$y)),#
				"0",#
				side="left"#
			)#
		)) %>%#
		ungroup()#
		Z %<>% #
			mutate(xy = paste(#
				str_pad(#
					.data$x,#
					nchar(max(popdata$x)),#
					"0",#
					side="left"#
				),#
				str_pad(#
					.data$y,#
					nchar(max(popdata$y)),#
					"0",#
					side="left"#
				)#
			)) %>%#
			ungroup()#
		E$Sampling %<>% as.character()#
		E %<>% filter(!(.data$xy %in% Z$xy))#
		ZZ <- Z %>% #
			bind_rows(E)
ZZ %>% arrange(xy) %>% as.data.frame
dim(popdata)

Networks = Z %>% filter(!!YVAR > condition)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
dim(Networks)[1] > 0
setwd('/Users/KSauby/Documents/Projects/ACS/R')
Z %<>% rename(y_val = yvar)#
		# names(Z)[names(Z) == yvar] <- 'y_val'#
		#Z %<>%#
		#	as.data.table %>%#
		#	setnames(yvar, "y_val")#
		if (dim(Z[which(is.na(Z$Sampling)), ])[1] > 0) {#
			Z[which(is.na(Z$Sampling)), ]$Sampling <- "Cluster"#
		}#
		# fill in edge units#
		E = data.frame(#
			x = as.numeric(rowSums(expand.grid(Networks$x, c(1,-1,0,0)))),#
		  	y = rowSums(expand.grid(Networks$y, c(0,0,1,-1))),#
			Sampling = "Edge"#,#
			#key = c("x", "y")#
		) %>%#
		rowwise() %>%#
		mutate(xy = paste(#
			str_pad(#
				.data$x,#
				nchar(max(popdata$x)),#
				"0",#
				side="left"#
			),#
			str_pad(#
				.data$y,#
				nchar(max(popdata$y)),#
				"0",#
				side="left"#
			)#
		)) %>%#
		ungroup()#
		Z %<>% #
			mutate(xy = paste(#
				str_pad(#
					.data$x,#
					nchar(max(popdata$x)),#
					"0",#
					side="left"#
				),#
				str_pad(#
					.data$y,#
					nchar(max(popdata$y)),#
					"0",#
					side="left"#
				)#
			)) %>%#
			ungroup()#
		E$Sampling %<>% as.character()#
		E %<>% filter(!(.data$xy %in% Z$xy))#
		ZZ <- Z %>% #
			bind_rows(E) %>%#
			group_by(x,y) %>%#
			filter(row_number()==1)#
			#rbind.fill(E) %>% #
			# as.data.table() %>% #
			#setkey("x", "y") %>% #
	 	   	#unique %>%#
			# dplyr::select(-.data$xy)#
		# remove plots outside of population extent#
		ZZ %<>% subset(#
			x %in% popdata$x &#
			y %in% popdata$y#
		)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
dim(#
			ZZ[which(#
				is.na(#
					eval(parse(text=paste(#
						"ZZ$", #
						yvar, #
						sep=""#
					)))#
				)#
			), ])[1] > 0
setwd('/Users/KSauby/Documents/Projects/ACS/R')
dim(#
			ZZ[which(#
				is.na(#
					eval(parse(text=paste(#
						"ZZ$y_value", #
						#yvar, #
						sep=""#
					)))#
				)#
			), ])[1] > 0
setwd('/Users/KSauby/Documents/Projects/ACS/R')
dim(#
			ZZ[which(#
				is.na(#
					eval(parse(text=paste(#
						"ZZ$y_val", #
						#yvar, #
						sep=""#
					)))#
				)#
			), ])[1] > 0
setwd('/Users/KSauby/Documents/Projects/ACS/R')
ZZ[which(ZZ$Sampling=="Edge"),]$y_val <- 0#
			ZZ[ Sampling=="Edge" ]$m <- 0
setwd('/Users/KSauby/Documents/Projects/ACS/R')
ZZ[which(ZZ$Sampling=="Edge"),]$y_val <- 0
setwd('/Users/KSauby/Documents/Projects/ACS/R')
ZZ[which(ZZ$Sampling=="Edge"),]$y_val <- 0#
			ZZ[which(ZZ$Sampling=="Edge"),]$m <- 0
?rename
setwd('/Users/KSauby/Documents/Projects/ACS/R')
ZZ %<>%#
		rename(!!YVAR = y_val)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
vars <- c(YVAR=y_val)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
ZZ %<>%#
		rename(!!vars)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
YVAR=y_val
YVAR
setwd('/Users/KSauby/Documents/Projects/ACS/R')
YVAR <- sym(yvar)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
vars <- c(YVAR="y_val")#
		ZZ %<>%#
		rename(!!vars)
head(ZZ)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
vars <- c(YVAR="y_val")
vars
vars <- c(var1 = "cyl", var2 ="am")
rename(mtcars, !!vars)
vars <- list(#
  var1 = sym("cyl"),#
  var2 = sym("am")#
)#
select(mtcars, !!!vars)#
#
# For convenience it also supports strings and character#
# vectors. This is unlike other verbs where strings would be#
# ambiguous.#
vars <- c(var1 = "cyl", var2 ="am")#
select(mtcars, !!vars)#
rename(mtcars, !!vars)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
setnames(ZZ, "y_val", yvar)
library(data.table)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
setnames(ZZ, "y_val", yvar)
ZZ
setwd('/Users/KSauby/Documents/Projects/ACS/R')
ZZ %<>%#
		#rename(!!vars)#
			arrange()
ZZ
setwd('/Users/KSauby/Documents/Projects/ACS/R')
#' Create an Adaptive Cluster Sample.#
#'#
#' @param popdata The population to be sampled.#
#' @param seed A vector of numbers to feed to \code{set.seed()} so that the sampling is reproducible. Defaults to NA so that it is not necessary to specific a random number seed.#
#' @param n1 The initial sample size (sampled according to simple random sampling without replacement).#
#' @param yvar The variable of interest that is used to determine the condition under which adaptive cluster sampling takes place.#
#' @param condition Threshold value of the y variable that initiates ACS. Defaults to 0 (i.e., anything greater than 0 initiates adaptive cluster sampling).#
#' @param initsample Allows the user to specify a list of x and y coordinates of the initial sample. Defaults to "NA" so that the initial sample is selected according to simple random sampling without replacement.#
#
#' @return A restricted adaptive cluster sample.#
#
#' @examples#
#' library(ggplot2)#
#' data(Thompson1990Figure1Population)#
#' data(Thompson1990Figure1Sample)#
#' #
#' # Initiate ACS#
#' Z = createACS(#
#'	popdata=Thompson1990Figure1Population, #
#'	seed=9, #
#'	n1=10, #
#'	yvar="y_value", #
#'	condition=0#
#')#
#' #
#' # plot ACS sample overlaid onto population#
#' ggplot() +#
#' 	geom_point(data=Thompson1990Figure1Population, aes(x,y, size=factor(y_value),#
#' 		shape=factor(y_value))) +#
#' 	scale_shape_manual(values=c(1, rep(16, length(2:13)))) +#
#' 	geom_point(data=Z, aes(x,y), shape=0, size=7)#
#' # Initiate ACS, different seed#
#' Z = createACS(popdata=Thompson1990Figure1Population, seed=26, n1=10, yvar="y_value", condition=0)#
#' #
#' # plot ACS sample overlaid onto population#
#' ggplot() +#
#' 	geom_point(data=Thompson1990Figure1Population, aes(x,y, size=factor(y_value),#
#' 		shape=factor(y_value))) +#
#' 	scale_shape_manual(values=c(1, rep(16, length(2:13)))) +#
#' 	geom_point(data=Z, aes(x,y), shape=0, size=7)#
#
#' @references Sauby, K.E and Christman, M.C. \emph{In preparation.} A Sampling Strategy Designed to Maximize the Efficiency of Data Collection of Food Web Relationships.#
#
#' @export#
#' @importFrom stringr str_pad#
#' @importFrom dplyr filter rowwise#
#' @importFrom ggplot2 ggplot#
#' @importFrom data.table data.table as.data.table setkey setnames#
#
createACS <- function(popdata, n1, yvar, condition=0, seed=NA, initsample=NA) {#
	YVAR <- sym(yvar)#
	. <- Sampling <- y_val <- NULL#
	if (is.data.frame(initsample)) {#
		S <- merge(popdata, initsample, all.y=TRUE) 	#
		S$Sampling <- "Primary Sample"#
	} else {#
		if (!is.na(seed)) {set.seed(seed)}#
		S <- createSRS(popdata=popdata, n1=n1)#
	}#
	# add the rest of the units for each network in the initial sample#
	Z = popdata %>%#
		dplyr::filter(.data$NetworkID %in% S$NetworkID) %>%#
		merge(S, all.x=T)#
	Networks = Z %>% filter(!!YVAR > condition)#
	# if there are units that satisfy the condition, fill in edge units#
	if (dim(Networks)[1] > 0) {#
		Z %<>% rename(y_val = yvar)#
		# names(Z)[names(Z) == yvar] <- 'y_val'#
		#Z %<>%#
		#	as.data.table %>%#
		#	setnames(yvar, "y_val")#
		if (dim(Z[which(is.na(Z$Sampling)), ])[1] > 0) {#
			Z[which(is.na(Z$Sampling)), ]$Sampling <- "Cluster"#
		}#
		# fill in edge units#
		E = data.frame(#
			x = as.numeric(rowSums(expand.grid(Networks$x, c(1,-1,0,0)))),#
		  	y = rowSums(expand.grid(Networks$y, c(0,0,1,-1))),#
			Sampling = "Edge"#,#
			#key = c("x", "y")#
		) %>%#
		rowwise() %>%#
		mutate(xy = paste(#
			str_pad(#
				.data$x,#
				nchar(max(popdata$x)),#
				"0",#
				side="left"#
			),#
			str_pad(#
				.data$y,#
				nchar(max(popdata$y)),#
				"0",#
				side="left"#
			)#
		)) %>%#
		ungroup()#
		Z %<>% #
			mutate(xy = paste(#
				str_pad(#
					.data$x,#
					nchar(max(popdata$x)),#
					"0",#
					side="left"#
				),#
				str_pad(#
					.data$y,#
					nchar(max(popdata$y)),#
					"0",#
					side="left"#
				)#
			)) %>%#
			ungroup()#
		E$Sampling %<>% as.character()#
		E %<>% filter(!(.data$xy %in% Z$xy))#
		ZZ <- Z %>% #
			bind_rows(E) %>%#
			group_by(x,y) %>%#
			filter(row_number()==1)#
			#rbind.fill(E) %>% #
			# as.data.table() %>% #
			#setkey("x", "y") %>% #
	 	   	#unique %>%#
			# dplyr::select(-.data$xy)#
		# remove plots outside of population extent#
		ZZ %<>% subset(#
			x %in% popdata$x &#
			y %in% popdata$y#
		)#
		# fill in values for Edge units#
		if (dim(#
			ZZ[which(#
				is.na(#
					eval(parse(text=paste(#
						"ZZ$y_val", #
						#yvar, #
						sep=""#
					)))#
				)#
			), ])[1] > 0) {#
			#ZZ[which(ZZ$Sampling=="Edge"),] %<>%#
			#mutate_if(yvar, fun(x) x=0)#
			ZZ[which(ZZ$Sampling=="Edge"),]$y_val <- 0#
			ZZ[which(ZZ$Sampling=="Edge"),]$m <- 0#
		}	#
		setnames(ZZ, "y_val", yvar)#
		#vars <- c(YVAR="y_val")#
		ZZ %<>%#
		#rename(!!vars)#
			arrange()#
		return(ZZ)#
	} else {#
		# if there are NO units that satisfy the condition, stop here and return the SRSWOR sample#
		return(Z)#
	}#
}
setwd('/Users/KSauby/Documents/Projects/ACS/R')
POPVAR <- sym(popvar)#
	REALVAR <- sym(realvar)#
	n.networks <- realization <- i <- j <- Sampling <- . <- NetworkID <- NULL#
	TIME 					<- Sys.time()#
	popdata 				%<>% arrange_at(c(popvar, realvar))#
	var 					<- c(ovar, avar, rvar)#
	n.patches 				<- length(unique(eval(parse(text=paste(#
								"popdata$",#
								popvar,#
								sep=""#
							)))))#
	nsample.length 			<- length(n1)#
	A 						<- vector("list", n.patches)#
	# c() - same code calculates the HT estimators for occupancy and abundance#
	oavar 					<- c(ovar, avar)#
	OAVAR <- syms(oavar)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
sims=200#
 n1=c(5,10,20,40)#
 population <- createPopulation(x_start = 1, x_end = 30, y_start = 1, y_end = 30)#
 avar = NULL#
 ovar = c(#
 	"Stricta",#
 	"Pusilla",#
 	"Cactus",#
 	"CACA_on_Pusilla",#
 	"CACA_on_Stricta",#
 	"MEPR_on_Pusilla",#
 	"MEPR_on_Stricta",#
 	"Old_Moth_Evidence_Pusilla",#
 	"Old_Moth_Evidence_Stricta"#
 	# "Percent_Cover_Pusilla", # how do I do these? they are occupancy nor abundance#
 	# "Percent_Cover_Stricta",#
 	# "Height_Pusilla",#
 	# "Height_Stricta",#
 )		#
 data(CactusRealizations)#
 popdata = CactusRealizations#
 simulation_data <- sampleRealizations(#
	popdata, #
	sims, #
	n1, #
	avar, #
	ovar, #
	popvar="population", #
	yvar="Cactus"#
)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
SamplingDesign="ACS"
setwd('/Users/KSauby/Documents/Projects/ACS/R')
y_HT_formula = "y_HT"
setwd('/Users/KSauby/Documents/Projects/ACS/R')
var_formula = "var_y_HT"
setwd('/Users/KSauby/Documents/Projects/ACS/R')
mThreshold = NULL
setwd('/Users/KSauby/Documents/Projects/ACS/R')
SampleEstimators = FALSE
setwd('/Users/KSauby/Documents/Projects/ACS/R')
f_max = 2
popvar
popvar="population"
setwd('/Users/KSauby/Documents/Projects/ACS/R')
yvar="Cactus"
setwd('/Users/KSauby/Documents/Projects/ACS/R')
POPVAR <- sym(popvar)#
	REALVAR <- sym(realvar)#
	n.networks <- realization <- i <- j <- Sampling <- . <- NetworkID <- NULL#
	TIME 					<- Sys.time()#
	popdata 				%<>% arrange_at(c(popvar, realvar))#
	var 					<- c(ovar, avar, rvar)#
	n.patches 				<- length(unique(eval(parse(text=paste(#
								"popdata$",#
								popvar,#
								sep=""#
							)))))#
	nsample.length 			<- length(n1)#
	A 						<- vector("list", n.patches)#
	# c() - same code calculates the HT estimators for occupancy and abundance#
	oavar 					<- c(ovar, avar)#
	OAVAR <- syms(oavar)#
	# empty dataframes will be cbind'd together after HT estimators calculated#
	occ_abund_var 			<- data.frame(row.names = 1:length(c(ovar, avar))) #
	occ_abund_mean 			<- data.frame(row.names = 1:length(c(ovar, avar)))#
	Ratio 					<- data.frame(row.names = 1:length(rvar))
rvar=NULL
setwd('/Users/KSauby/Documents/Projects/ACS/R')
POPVAR <- sym(popvar)#
	REALVAR <- sym(realvar)#
	n.networks <- realization <- i <- j <- Sampling <- . <- NetworkID <- NULL#
	TIME 					<- Sys.time()#
	popdata 				%<>% arrange_at(c(popvar, realvar))#
	var 					<- c(ovar, avar, rvar)#
	n.patches 				<- length(unique(eval(parse(text=paste(#
								"popdata$",#
								popvar,#
								sep=""#
							)))))#
	nsample.length 			<- length(n1)#
	A 						<- vector("list", n.patches)#
	# c() - same code calculates the HT estimators for occupancy and abundance#
	oavar 					<- c(ovar, avar)#
	OAVAR <- syms(oavar)#
	# empty dataframes will be cbind'd together after HT estimators calculated#
	occ_abund_var 			<- data.frame(row.names = 1:length(c(ovar, avar))) #
	occ_abund_mean 			<- data.frame(row.names = 1:length(c(ovar, avar)))#
	Ratio 					<- data.frame(row.names = 1:length(rvar))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
ratio_mean_names 		<- paste(rvar, "RMeanObs", sep="")#
	ratio_var_names 		<- paste(rvar, "RVarObs", sep="")
i=1
k=1
l=1
j=1
setwd('/Users/KSauby/Documents/Projects/ACS/R')
cat(paste(i,j, sep="_"))#
			P 			<- popdata %>% #
							filter(!!POPVAR == unique(#
								eval(parse(text=paste(#
									"popdata$",#
									popvar,#
									sep=""#
								)))#
							)[i])#
			N 			<- dim(P)[1]#
			n1 			<- n1[j]#
			A[[i]][[j]] <- list()#
			r 			<- (i - 1) * j + j
setwd('/Users/KSauby/Documents/Projects/ACS/R')
seeds 		<- runif(sims)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp_seed <- seeds[k]*100000
setwd('/Users/KSauby/Documents/Projects/ACS/R')
alldata <- createACS(#
						popdata=P, #
						seed=temp_seed, #
						n1=n1, #
						yvar=yvar#
					)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
alldata_all <- alldata
setwd('/Users/KSauby/Documents/Projects/ACS/R')
SampleEstimators == TRUE
setwd('/Users/KSauby/Documents/Projects/ACS/R')
alldata %<>% filter(Sampling!="Edge")
setwd('/Users/KSauby/Documents/Projects/ACS/R')
HT_results <- list()#
					# OCCUPANCY AND ABUNDANCE#
					# summarise data for mean calculations#
					O <- alldata %>% #
						filter(Sampling!="Edge") %>%#
						select(!!!OAVAR, NetworkID, m)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
m <- O$m
setwd('/Users/KSauby/Documents/Projects/ACS/R')
y_HT_formula == "y_HT_RACS"
setwd('/Users/KSauby/Documents/Projects/ACS/R')
y_HT_formula == "y_HT"
setwd('/Users/KSauby/Documents/Projects/ACS/R')
HT_results[[1]] <- O %>%#
						dplyr::select(!!!OAVAR) %>%#
						summarise_all(#
							funs(y_HT),#
							N = N,#
							n1 = n1,#
							m = m#
						)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
HT_results[[1]] <- O %>%#
						dplyr::select(!!!OAVAR) %>%#
						summarise_all(#
							y_HT = y_HT,#
							N = N,#
							n1 = n1,#
							m = m#
						)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
HT_results[[1]] <- O %>%#
							dplyr::select(!!!OAVAR) %>%#
							summarise_all(#
								funs(new_y_HT),#
								N = N,#
								n1 = n1,#
								m = m,#
								m_threshold = 2#
							)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
HT_results[[1]] <- O %>%#
						dplyr::select(!!!OAVAR) %>%#
						summarise_all(#
							funs(y_HT),#
							N = N,#
							n1 = n1,#
							m = m#
						)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
HT_results[[1]] <- O %>%#
							dplyr::select(!!!OAVAR) %>%#
							summarise_all(#
								list(new_y_HT = new_y_HT),#
								N = N,#
								n1 = n1,#
								m = m,#
								m_threshold = 2#
							)
HT_results[[1]]
setwd('/Users/KSauby/Documents/Projects/ACS/R')
HT_results[[1]] <- O %>%#
						dplyr::select(!!!OAVAR) %>%#
						summarise_all(#
							list(y_HT = y_HT),#
							N = N,#
							n1 = n1,#
							m = m#
						)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
HT_results[[1]] <- O %>%#
						dplyr::select(!!!OAVAR) %>%#
						summarise_all(#
							list(yHT = y_HT),#
							N = N,#
							n1 = n1,#
							m = m#
						)
HT_results[[1]]
setwd('/Users/KSauby/Documents/Projects/ACS/R')
HT_results[[1]] <- O %>%#
							dplyr::select(!!!OAVAR) %>%#
							summarise_all(#
								list(yHT = new_y_HT),#
								N = N,#
								n1 = n1,#
								m = m,#
								m_threshold = 2#
							)
HT_results[[1]]
setwd('/Users/KSauby/Documents/Projects/ACS/R')
O_smd <- alldata %>% #
						select(!!!OAVAR, NetworkID, m) %>%#
						#.[, c(#
						#	paste(oavar, "_network_sum", sep=""), #
						#	"NetworkID", #
						#	"m"#
						#), with=FALSE] %>% #
						filter(!(is.na(NetworkID))) %>%#
						group_by(NetworkID) %>%#
						filter(row_number()==1)
O_smd
O_smd %>% as.data.frame
setwd('/Users/KSauby/Documents/Projects/ACS/R')
ZZ %<>%#
			mutate(#
				!!YVAR := replace(#
					y_val,#
					Sampling=="Edge",#
					0#
				),#
				m = replace(#
					m,#
					Sampling=="Edge",#
					0#
				)#
			)
head(ZZ)
ZZ
ZZ %>% as.data.frame
setwd('/Users/KSauby/Documents/Projects/ACS/R')
YVAR <- sym(yvar)#
	. <- Sampling <- y_val <- NULL#
	if (is.data.frame(initsample)) {#
		S <- merge(popdata, initsample, all.y=TRUE) 	#
		S$Sampling <- "Primary Sample"#
	} else {#
		if (!is.na(seed)) {set.seed(seed)}#
		S <- createSRS(popdata=popdata, n1=n1)#
	}#
	# add the rest of the units for each network in the initial sample#
	Z = popdata %>%#
		dplyr::filter(.data$NetworkID %in% S$NetworkID) %>%#
		merge(S, all.x=T)#
	Networks = Z %>% filter(!!YVAR > condition)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
dim(Networks)[1] > 0
Networks
seed
setwd('/Users/KSauby/Documents/Projects/ACS/R')
YVAR <- sym(yvar)#
	. <- Sampling <- y_val <- NULL#
	if (is.data.frame(initsample)) {#
		S <- merge(popdata, initsample, all.y=TRUE) 	#
		S$Sampling <- "Primary Sample"#
	} else {#
		if (!is.na(seed)) {set.seed(seed)}#
		S <- createSRS(popdata=popdata, n1=n1)#
	}#
	# add the rest of the units for each network in the initial sample#
	Z = popdata %>%#
		dplyr::filter(.data$NetworkID %in% S$NetworkID) %>%#
		merge(S, all.x=T)#
	Networks = Z %>% filter(!!YVAR > condition)
Networks
yvar
condition
Z
setwd('/Users/KSauby/Documents/Projects/ACS/R')
data(Thompson1990Figure1Population)
Z = createACS(#
popdata= Thompson1990Figure1Population, #
seed=9, #
n1=10, #
yvar="y_value", #
condition=0#
)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
#' Create an Adaptive Cluster Sample.#
#'#
#' @param popdata The population to be sampled.#
#' @param seed A vector of numbers to feed to \code{set.seed()} so that the sampling is reproducible. Defaults to NA so that it is not necessary to specific a random number seed.#
#' @param n1 The initial sample size (sampled according to simple random sampling without replacement).#
#' @param yvar The variable of interest that is used to determine the condition under which adaptive cluster sampling takes place.#
#' @param condition Threshold value of the y variable that initiates ACS. Defaults to 0 (i.e., anything greater than 0 initiates adaptive cluster sampling).#
#' @param initsample Allows the user to specify a list of x and y coordinates of the initial sample. Defaults to "NA" so that the initial sample is selected according to simple random sampling without replacement.#
#
#' @return A restricted adaptive cluster sample.#
#
#' @examples#
#' library(ggplot2)#
#' data(Thompson1990Figure1Population)#
#' data(Thompson1990Figure1Sample)#
#' #
#' # Initiate ACS#
#' Z = createACS(#
#'	popdata=Thompson1990Fig1Pop, #
#'	seed=9, #
#'	n1=10, #
#'	yvar="y_value", #
#'	condition=0#
#')#
#' #
#' # plot ACS sample overlaid onto population#
#' ggplot() +#
#' 	geom_point(data=Thompson1990Fig1Pop, aes(x,y, size=factor(y_value),#
#' 		shape=factor(y_value))) +#
#' 	scale_shape_manual(values=c(1, rep(16, length(2:13)))) +#
#' 	geom_point(data=Z, aes(x,y), shape=0, size=7)#
#' # Initiate ACS, different seed#
#' Z = createACS(popdata=Thompson1990Fig1Pop, seed=26, n1=10, yvar="y_value", condition=0)#
#' #
#' # plot ACS sample overlaid onto population#
#' ggplot() +#
#' 	geom_point(data=Thompson1990Fig1Pop, aes(x,y, size=factor(y_value),#
#' 		shape=factor(y_value))) +#
#' 	scale_shape_manual(values=c(1, rep(16, length(2:13)))) +#
#' 	geom_point(data=Z, aes(x,y), shape=0, size=7)#
#
#' @references Sauby, K.E and Christman, M.C. \emph{In preparation.} A Sampling Strategy Designed to Maximize the Efficiency of Data Collection of Food Web Relationships.#
#
#' @export#
#' @importFrom stringr str_pad#
#' @importFrom dplyr filter rowwise#
#' @importFrom ggplot2 ggplot#
#' @importFrom data.table data.table as.data.table setkey setnames#
#
createACS <- function(popdata, n1, yvar, condition=0, seed=NA, initsample=NA) {#
	YVAR <- sym(yvar)#
	. <- Sampling <- y_val <- NULL#
	if (is.data.frame(initsample)) {#
		S <- merge(popdata, initsample, all.y=TRUE) 	#
		S$Sampling <- "Primary Sample"#
	} else {#
		if (!is.na(seed)) {set.seed(seed)}#
		S <- createSRS(popdata=popdata, n1=n1)#
	}#
	# add the rest of the units for each network in the initial sample#
	Z = popdata %>%#
		dplyr::filter(.data$NetworkID %in% S$NetworkID) %>%#
		merge(S, all.x=T)#
	Networks = Z %>% filter(!!YVAR > condition)#
	# if there are units that satisfy the condition, fill in edge units#
	if (dim(Networks)[1] > 0) {#
		#Z %<>% rename(y_val = yvar)#
		# names(Z)[names(Z) == yvar] <- 'y_val'#
		#Z %<>%#
		#	as.data.table %>%#
		#	setnames(yvar, "y_val")#
		if (dim(Z[which(is.na(Z$Sampling)), ])[1] > 0) {#
			Z[which(is.na(Z$Sampling)), ]$Sampling <- "Cluster"#
		}#
		# fill in edge units#
		E = data.frame(#
			x = as.numeric(rowSums(expand.grid(Networks$x, c(1,-1,0,0)))),#
		  	y = rowSums(expand.grid(Networks$y, c(0,0,1,-1))),#
			Sampling = "Edge"#,#
			#key = c("x", "y")#
		) %>%#
		rowwise() %>%#
		mutate(xy = paste(#
			str_pad(#
				.data$x,#
				nchar(max(popdata$x)),#
				"0",#
				side="left"#
			),#
			str_pad(#
				.data$y,#
				nchar(max(popdata$y)),#
				"0",#
				side="left"#
			)#
		)) %>%#
		ungroup()#
		Z %<>% #
			mutate(xy = paste(#
				str_pad(#
					.data$x,#
					nchar(max(popdata$x)),#
					"0",#
					side="left"#
				),#
				str_pad(#
					.data$y,#
					nchar(max(popdata$y)),#
					"0",#
					side="left"#
				)#
			)) %>%#
			ungroup()#
		E$Sampling %<>% as.character()#
		E %<>% filter(!(.data$xy %in% Z$xy))#
		ZZ <- Z %>% #
			bind_rows(E) %>%#
			group_by(x,y) %>%#
			filter(row_number()==1)#
			#rbind.fill(E) %>% #
			# as.data.table() %>% #
			#setkey("x", "y") %>% #
	 	   	#unique %>%#
			# dplyr::select(-.data$xy)#
		# remove plots outside of population extent#
		ZZ %<>% subset(#
			x %in% popdata$x &#
			y %in% popdata$y#
		)#
		# fill in values for Edge units#
		if (dim(#
			ZZ[which(#
				is.na(#
					eval(parse(text=paste(#
						"ZZ$", #
						yvar, #
						sep=""#
					)))#
				)#
			), ])[1] > 0) {#
			#ZZ[which(ZZ$Sampling=="Edge"),] %<>%#
			#mutate_if(yvar, fun(x) x=0)#
			ZZ %<>%#
			mutate(#
				!!YVAR := replace(#
					y_val,#
					Sampling=="Edge",#
					0#
				),#
				m = replace(#
					m,#
					Sampling=="Edge",#
					0#
				)#
			)#
			#ZZ[which(ZZ$Sampling=="Edge"),]$y_val <- 0#
			#ZZ[which(ZZ$Sampling=="Edge"),]$m <- 0#
		}	#
		#setnames(ZZ, "y_val", yvar)#
		#vars <- c(YVAR="y_val")#
		ZZ %<>%#
			arrange()#
		return(ZZ)#
	} else {#
		# if there are NO units that satisfy the condition, stop here and return the SRSWOR sample#
		return(Z)#
	}#
}
Z = createACS(#
popdata= Thompson1990Figure1Population, #
seed=9, #
n1=10, #
yvar="y_value", #
condition=0#
)
popdata= Thompson1990Figure1Population;#
seed=9;#
n1=10;#
yvar="y_value";#
condition=0
setwd('/Users/KSauby/Documents/Projects/ACS/R')
YVAR <- sym(yvar)#
	. <- Sampling <- y_val <- NULL#
	if (is.data.frame(initsample)) {#
		S <- merge(popdata, initsample, all.y=TRUE) 	#
		S$Sampling <- "Primary Sample"#
	} else {#
		if (!is.na(seed)) {set.seed(seed)}#
		S <- createSRS(popdata=popdata, n1=n1)#
	}#
	# add the rest of the units for each network in the initial sample#
	Z = popdata %>%#
		dplyr::filter(.data$NetworkID %in% S$NetworkID) %>%#
		merge(S, all.x=T)#
	Networks = Z %>% filter(!!YVAR > condition)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
dim(Networks)[1] > 0
setwd('/Users/KSauby/Documents/Projects/ACS/R')
if (dim(Z[which(is.na(Z$Sampling)), ])[1] > 0) {#
			Z[which(is.na(Z$Sampling)), ]$Sampling <- "Cluster"#
		}#
		# fill in edge units#
		E = data.frame(#
			x = as.numeric(rowSums(expand.grid(Networks$x, c(1,-1,0,0)))),#
		  	y = rowSums(expand.grid(Networks$y, c(0,0,1,-1))),#
			Sampling = "Edge"#,#
			#key = c("x", "y")#
		) %>%#
		rowwise() %>%#
		mutate(xy = paste(#
			str_pad(#
				.data$x,#
				nchar(max(popdata$x)),#
				"0",#
				side="left"#
			),#
			str_pad(#
				.data$y,#
				nchar(max(popdata$y)),#
				"0",#
				side="left"#
			)#
		)) %>%#
		ungroup()#
		Z %<>% #
			mutate(xy = paste(#
				str_pad(#
					.data$x,#
					nchar(max(popdata$x)),#
					"0",#
					side="left"#
				),#
				str_pad(#
					.data$y,#
					nchar(max(popdata$y)),#
					"0",#
					side="left"#
				)#
			)) %>%#
			ungroup()#
		E$Sampling %<>% as.character()#
		E %<>% filter(!(.data$xy %in% Z$xy))#
		ZZ <- Z %>% #
			bind_rows(E) %>%#
			group_by(x,y) %>%#
			filter(row_number()==1)#
			#rbind.fill(E) %>% #
			# as.data.table() %>% #
			#setkey("x", "y") %>% #
	 	   	#unique %>%#
			# dplyr::select(-.data$xy)#
		# remove plots outside of population extent#
		ZZ %<>% subset(#
			x %in% popdata$x &#
			y %in% popdata$y#
		)#
		# fill in values for Edge units#
		if (dim(#
			ZZ[which(#
				is.na(#
					eval(parse(text=paste(#
						"ZZ$", #
						yvar, #
						sep=""#
					)))#
				)#
			), ])[1] > 0) {#
			#ZZ[which(ZZ$Sampling=="Edge"),] %<>%#
			#mutate_if(yvar, fun(x) x=0)#
			ZZ %<>%#
			mutate(#
				!!YVAR := replace(#
					y_val,#
					Sampling=="Edge",#
					0#
				),#
				m = replace(#
					m,#
					Sampling=="Edge",#
					0#
				)#
			)#
			#ZZ[which(ZZ$Sampling=="Edge"),
}
ZZ
ZZ %>% arrange %>% as.data.frame
setwd('/Users/KSauby/Documents/Projects/ACS/R')
YVAR <- sym(yvar)#
	. <- Sampling <- y_val <- NULL#
	if (is.data.frame(initsample)) {#
		S <- merge(popdata, initsample, all.y=TRUE) 	#
		S$Sampling <- "Primary Sample"#
	} else {#
		if (!is.na(seed)) {set.seed(seed)}#
		S <- createSRS(popdata=popdata, n1=n1)#
	}#
	# add the rest of the units for each network in the initial sample#
	Z = popdata %>%#
		dplyr::filter(.data$NetworkID %in% S$NetworkID) %>%#
		merge(S, all.x=T)#
	Networks = Z %>% filter(!!YVAR > condition)#
	# if there are units that satisfy the condition, fill in edge units#
	if (dim(Networks)[1] > 0) {#
		#Z %<>% rename(y_val = yvar)#
		# names(Z)[names(Z) == yvar] <- 'y_val'#
		#Z %<>%#
		#	as.data.table %>%#
		#	setnames(yvar, "y_val")#
		if (dim(Z[which(is.na(Z$Sampling)), ])[1] > 0) {#
			Z[which(is.na(Z$Sampling)), ]$Sampling <- "Cluster"#
		}#
		# fill in edge units#
		E = data.frame(#
			x = as.numeric(rowSums(expand.grid(Networks$x, c(1,-1,0,0)))),#
		  	y = rowSums(expand.grid(Networks$y, c(0,0,1,-1))),#
			Sampling = "Edge"#,#
			#key = c("x", "y")#
		) %>%#
		rowwise() %>%#
		mutate(xy = paste(#
			str_pad(#
				.data$x,#
				nchar(max(popdata$x)),#
				"0",#
				side="left"#
			),#
			str_pad(#
				.data$y,#
				nchar(max(popdata$y)),#
				"0",#
				side="left"#
			)#
		)) %>%#
		ungroup()#
		Z %<>% #
			mutate(xy = paste(#
				str_pad(#
					.data$x,#
					nchar(max(popdata$x)),#
					"0",#
					side="left"#
				),#
				str_pad(#
					.data$y,#
					nchar(max(popdata$y)),#
					"0",#
					side="left"#
				)#
			)) %>%#
			ungroup()#
		E$Sampling %<>% as.character()#
		E %<>% filter(!(.data$xy %in% Z$xy))#
		ZZ <- Z %>% #
			bind_rows(E) %>%#
			group_by(x,y) %>%#
			filter(row_number()==1)#
			#rbind.fill(E) %>% #
			# as.data.table() %>% #
			#setkey("x", "y") %>% #
	 	   	#unique %>%#
			# dplyr::select(-.data$xy)#
		# remove plots outside of population extent#
		ZZ %<>% subset(#
			x %in% popdata$x &#
			y %in% popdata$y#
		)#
		# fill in values for Edge units#
		if (dim(#
			ZZ[which(#
				is.na(#
					eval(parse(text=paste(#
						"ZZ$", #
						yvar, #
						sep=""#
					)))#
				)#
			), ])[1] > 0) {#
			#ZZ[which(ZZ$Sampling=="Edge"),] %<>%#
			#mutate_if(yvar, fun(x) x=0)#
			ZZ %<>%#
			rowwise() %>%#
			mutate(#
				!!YVAR := replace(#
					y_val,#
					Sampling=="Edge",#
					0#
				),#
				m = replace(#
					m,#
					Sampling=="Edge",#
					0#
				)#
			)#
			#ZZ[which(ZZ$Sampling=="Edge"),]$y_val <- 0#
			#ZZ[which(ZZ$Sampling=="Edge"),]$m <- 0#
		}	#
		#setnames(ZZ, "y_val", yvar)#
		#vars <- c(YVAR="y_val")#
		ZZ %<>%#
			arrange()#
		return(ZZ)#
	} else {#
		# if there are NO units that satisfy the condition, stop here and return the SRSWOR sample#
		return(Z)#
	}
ZZ
ZZ %>% as.data.frame
setwd('/Users/KSauby/Documents/Projects/ACS/R')
#' Create an Adaptive Cluster Sample.#
#'#
#' @param popdata The population to be sampled.#
#' @param seed A vector of numbers to feed to \code{set.seed()} so that the sampling is reproducible. Defaults to NA so that it is not necessary to specific a random number seed.#
#' @param n1 The initial sample size (sampled according to simple random sampling without replacement).#
#' @param yvar The variable of interest that is used to determine the condition under which adaptive cluster sampling takes place.#
#' @param condition Threshold value of the y variable that initiates ACS. Defaults to 0 (i.e., anything greater than 0 initiates adaptive cluster sampling).#
#' @param initsample Allows the user to specify a list of x and y coordinates of the initial sample. Defaults to "NA" so that the initial sample is selected according to simple random sampling without replacement.#
#
#' @return A restricted adaptive cluster sample.#
#
#' @examples#
#' library(ggplot2)#
#' data(Thompson1990Figure1Population)#
#' data(Thompson1990Figure1Sample)#
#' #
#' # Initiate ACS#
#' Z = createACS(#
#'	popdata=Thompson1990Fig1Pop, #
#'	seed=9, #
#'	n1=10, #
#'	yvar="y_value", #
#'	condition=0#
#')#
#' #
#' # plot ACS sample overlaid onto population#
#' ggplot() +#
#' 	geom_point(data=Thompson1990Fig1Pop, aes(x,y, size=factor(y_value),#
#' 		shape=factor(y_value))) +#
#' 	scale_shape_manual(values=c(1, rep(16, length(2:13)))) +#
#' 	geom_point(data=Z, aes(x,y), shape=0, size=7)#
#' # Initiate ACS, different seed#
#' Z = createACS(popdata=Thompson1990Fig1Pop, seed=26, n1=10, yvar="y_value", condition=0)#
#' #
#' # plot ACS sample overlaid onto population#
#' ggplot() +#
#' 	geom_point(data=Thompson1990Fig1Pop, aes(x,y, size=factor(y_value),#
#' 		shape=factor(y_value))) +#
#' 	scale_shape_manual(values=c(1, rep(16, length(2:13)))) +#
#' 	geom_point(data=Z, aes(x,y), shape=0, size=7)#
#
#' @references Sauby, K.E and Christman, M.C. \emph{In preparation.} A Sampling Strategy Designed to Maximize the Efficiency of Data Collection of Food Web Relationships.#
#
#' @export#
#' @importFrom stringr str_pad#
#' @importFrom dplyr filter rowwise#
#' @importFrom ggplot2 ggplot#
#
createACS <- function(popdata, n1, yvar, condition=0, seed=NA, initsample=NA) {#
	YVAR <- sym(yvar)#
	. <- Sampling <- y_val <- NULL#
	if (is.data.frame(initsample)) {#
		S <- merge(popdata, initsample, all.y=TRUE) 	#
		S$Sampling <- "Primary Sample"#
	} else {#
		if (!is.na(seed)) {set.seed(seed)}#
		S <- createSRS(popdata=popdata, n1=n1)#
	}#
	# add the rest of the units for each network in the initial sample#
	Z = popdata %>%#
		dplyr::filter(.data$NetworkID %in% S$NetworkID) %>%#
		merge(S, all.x=T)#
	Networks = Z %>% filter(!!YVAR > condition)#
	# if there are units that satisfy the condition, fill in edge units#
	if (dim(Networks)[1] > 0) {#
		#Z %<>% rename(y_val = yvar)#
		# names(Z)[names(Z) == yvar] <- 'y_val'#
		#Z %<>%#
		#	as.data.table %>%#
		#	setnames(yvar, "y_val")#
		if (dim(Z[which(is.na(Z$Sampling)), ])[1] > 0) {#
			Z[which(is.na(Z$Sampling)), ]$Sampling <- "Cluster"#
		}#
		# fill in edge units#
		E = data.frame(#
			x = as.numeric(rowSums(expand.grid(Networks$x, c(1,-1,0,0)))),#
		  	y = rowSums(expand.grid(Networks$y, c(0,0,1,-1))),#
			Sampling = "Edge"#
		) %>%#
		rowwise() %>%#
		mutate(xy = paste(#
			str_pad(#
				.data$x,#
				nchar(max(popdata$x)),#
				"0",#
				side="left"#
			),#
			str_pad(#
				.data$y,#
				nchar(max(popdata$y)),#
				"0",#
				side="left"#
			)#
		)) %>%#
		ungroup()#
		Z %<>% #
			mutate(xy = paste(#
				str_pad(#
					.data$x,#
					nchar(max(popdata$x)),#
					"0",#
					side="left"#
				),#
				str_pad(#
					.data$y,#
					nchar(max(popdata$y)),#
					"0",#
					side="left"#
				)#
			)) %>%#
			ungroup()#
		E$Sampling %<>% as.character()#
		E %<>% filter(!(.data$xy %in% Z$xy))#
		ZZ <- Z %>% #
			bind_rows(E) %>%#
			group_by(x,y) %>%#
			filter(row_number()==1)#
		# remove plots outside of population extent#
		ZZ %<>% subset(#
			x %in% popdata$x &#
			y %in% popdata$y#
		)#
		# fill in values for Edge units#
		if (dim(#
			ZZ[which(#
				is.na(#
					eval(parse(text=paste(#
						"ZZ$", #
						yvar, #
						sep=""#
					)))#
				)#
			), ])[1] > 0) {#
			ZZ %<>%#
			rowwise() %>%#
			mutate(#
				!!YVAR := replace(#
					y_val,#
					Sampling=="Edge",#
					0#
				),#
				m = replace(#
					m,#
					Sampling=="Edge",#
					0#
				)#
			)#
		}	#
		ZZ %<>%#
			arrange()#
		return(ZZ)#
	} else {#
		# if there are NO units that satisfy the condition, stop here and return the SRSWOR sample#
		return(Z)#
	}#
}
setwd('/Users/KSauby/Documents/Projects/ACS/R')
sims=200#
 n1=c(5,10,20,40)#
 population <- createPopulation(x_start = 1, x_end = 30, y_start = 1, y_end = 30)#
 avar = NULL#
 ovar = c(#
 	"Stricta",#
 	"Pusilla",#
 	"Cactus",#
 	"CACA_on_Pusilla",#
 	"CACA_on_Stricta",#
 	"MEPR_on_Pusilla",#
 	"MEPR_on_Stricta",#
 	"Old_Moth_Evidence_Pusilla",#
 	"Old_Moth_Evidence_Stricta"#
 	# "Percent_Cover_Pusilla", # how do I do these? they are occupancy nor abundance#
 	# "Percent_Cover_Stricta",#
 	# "Height_Pusilla",#
 	# "Height_Stricta",#
 )		#
 data(CactusRealizations)#
 popdata = CactusRealizations#
 simulation_data <- sampleRealizations(#
	popdata, #
	sims, #
	n1, #
	avar, #
	ovar, #
	popvar="population", #
	yvar="Cactus"#
)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
popvar="population"
setwd('/Users/KSauby/Documents/Projects/ACS/R')
yvar="Cactus"
setwd('/Users/KSauby/Documents/Projects/ACS/R')
POPVAR <- sym(popvar)#
	REALVAR <- sym(realvar)#
	n.networks <- realization <- i <- j <- Sampling <- . <- NetworkID <- NULL#
	TIME 					<- Sys.time()#
	popdata 				%<>% arrange_at(c(popvar, realvar))#
	var 					<- c(ovar, avar, rvar)#
	n.patches 				<- length(unique(eval(parse(text=paste(#
								"popdata$",#
								popvar,#
								sep=""#
							)))))#
	nsample.length 			<- length(n1)#
	A 						<- vector("list", n.patches)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
realvar = "realization"
POPVAR <- sym(popvar)#
	REALVAR <- sym(realvar)#
	n.networks <- realization <- i <- j <- Sampling <- . <- NetworkID <- NULL#
	TIME 					<- Sys.time()#
	popdata 				%<>% arrange_at(c(popvar, realvar))#
	var 					<- c(ovar, avar, rvar)#
	n.patches 				<- length(unique(eval(parse(text=paste(#
								"popdata$",#
								popvar,#
								sep=""#
							)))))#
	nsample.length 			<- length(n1)#
	A 						<- vector("list", n.patches)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
oavar 					<- c(ovar, avar)#
	OAVAR <- syms(oavar)#
	# empty dataframes will be cbind'd together after HT estimators calculated#
	occ_abund_var 			<- data.frame(row.names = 1:length(c(ovar, avar))) #
	occ_abund_mean 			<- data.frame(row.names = 1:length(c(ovar, avar)))#
	Ratio 					<- data.frame(row.names = 1:length(rvar)) #
	# the names to assign the estimates#
	# occ_abund_mean_names 	<- paste(ovar, avar, "MeanObs", sep="")#
	#occ_abund_var_names 	<- paste(ovar, avar, "VarObs", sep="")#
	ratio_mean_names 		<- paste(rvar, "RMeanObs", sep="")#
	ratio_var_names 		<- paste(rvar, "RVarObs", sep="")
i
i=j=l=m=k=1
i
j
k
l
m
setwd('/Users/KSauby/Documents/Projects/ACS/R')
cat(paste(i,j, sep="_"))#
			P 			<- popdata %>% #
							filter(!!POPVAR == unique(#
								eval(parse(text=paste(#
									"popdata$",#
									popvar,#
									sep=""#
								)))#
							)[i])#
			N 			<- dim(P)[1]#
			n1 			<- n1[j]#
			A[[i]][[j]] <- list()#
			r 			<- (i - 1) * j + j#
			seeds 		<- runif(sims)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp_seed <- seeds[k]*100000
head(popdata)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
SamplingDesign=="ACS"
setwd('/Users/KSauby/Documents/Projects/ACS/R')
alldata <- createACS(#
						popdata=P, #
						seed=temp_seed, #
						n1=n1, #
						yvar=yvar#
					)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
alldata_all <- alldata
setwd('/Users/KSauby/Documents/Projects/ACS/R')
alldata %<>% filter(Sampling!="Edge")
setwd('/Users/KSauby/Documents/Projects/ACS/R')
HT_results <- list()#
					# OCCUPANCY AND ABUNDANCE#
					# summarise data for mean calculations#
					O <- alldata %>% #
						filter(Sampling!="Edge") %>%#
						select(!!!OAVAR, NetworkID, m)#
					# calculate y_HT#
					m <- O$m
setwd('/Users/KSauby/Documents/Projects/ACS/R')
HT_results[[1]] <- O %>%#
							dplyr::select(!!!OAVAR) %>%#
							summarise_all(#
								list(yHT = new_y_HT),#
								N = N,#
								n1 = n1,#
								m = m,#
								m_threshold = 2#
							)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
HT_results[[1]] <- O %>%#
							dplyr::select(!!!OAVAR) %>%#
							summarise_all(#
								list(yHT = y_HT),#
								N = N,#
								n1 = n1,#
								m = m#
							)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
O_smd <- alldata %>% #
						select(!!!OAVAR, NetworkID, m) %>%#
						#.[, c(#
						#	paste(oavar, "_network_sum", sep=""), #
						#	"NetworkID", #
						#	"m"#
						#), with=FALSE] %>% #
						filter(!(is.na(NetworkID))) %>%#
						group_by(NetworkID) %>%#
						filter(row_number()==1)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
m <- O_smd$m
setwd('/Users/KSauby/Documents/Projects/ACS/R')
HT_results[[2]] <- O_smd %>% #
							select(!!!OAVAR, NetworkID) %>%#
							#.[, c(#
							#	paste(oavar, "_network_sum", sep=""), #
							#	"NetworkID", #
							#	"m"#
							#), with=FALSE] %>% #
							filter(!(is.na(NetworkID))) %>%#
							summarise_all(funs(x[1]))
head(O_smd)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
R_smd <- alldata %>%#
							filter(Sampling!="Edge") %>%#
							group_by(NetworkID) %>%#
							#as.data.table %>%#
							summarise_all(#
								list(sum = sum),#
								na.rm = T#
							)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
rovar <- c(rvar, ovar)#
						ROVAR <- syms(rovar)
rovar
setwd('/Users/KSauby/Documents/Projects/ACS/R')
R_smd <- alldata %>%#
							filter(Sampling!="Edge") %>%#
							select(!!!ROVAR, "NetworkID")
head(R_smd)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
R_smd <- alldata %>%#
							filter(Sampling!="Edge") %>%#
							select(!!!ROVAR, "NetworkID") %>%#
							group_by(NetworkID) %>%#
							#as.data.table %>%#
							summarise_all(#
								list(sum = sum),#
								na.rm = T#
							)
head(R_smd)
?summarise_each
setwd('/Users/KSauby/Documents/Projects/ACS/R')
R_smd <- alldata %>%#
							filter(Sampling!="Edge") %>%#
							select(!!!ROVAR, "NetworkID") %>%#
							group_by(NetworkID) %>%#
							#as.data.table %>%#
							summarise_all(#
								list(sum = sum),#
								na.rm = T#
							)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
mvals <- alldata %>%#
							group_by(NetworkID) %>%#
							filter(row_number()==1)
mvals
setwd('/Users/KSauby/Documents/Projects/ACS/R')
mvals <- alldata %>%#
							group_by(NetworkID) %>%#
							summarise(m = m[1])#
						R_smd <- alldata %>%#
							filter(Sampling!="Edge") %>%#
							select(!!!ROVAR, "NetworkID") %>%#
							group_by(NetworkID) %>%#
							#as.data.table %>%#
							summarise_all(#
								list(sum = sum),#
								na.rm = T#
							) %>%#
							merge(mvals, by="NetworkID")
head(R_mnd)
head(R_smd)
tail(R_smd)
?bind_row
?bind_rows
y 		= c(3,6,rep(0, 98));#
 N 		= 1000;#
  n1 		= 100;#
   m 		= c(2,3,rep(1,98));#
  sampling = "SRSWOR";#
  criterion =0;#
 m_threshold=2
setwd('/Users/KSauby/Documents/Projects/ACS/R')
if (!(is.null(sampling)) & !(is.null(criterion))) {#
		J = ifelse(y >= criterion | sampling=="SRSWOR", 1, 0)#
	} else {#
		J = 1#
	}#
	Z = data.frame(y=y, m=m)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
A <- Z %>% filter(m <= m_threshold)#
	B <- Z %>% filter(m > m_threshold)#
	if (dim(A)[1] > 0) {#
		A$pi_i_values = pi_i(N, n1, A$m)	#
	}#
	if (dim(B)[1] > 0) {	#
		B$pi_i_values = pi_i(N, n1, m_threshold)#
	}#
	Z <- bind.rows(A, B) %>% as.data.frame
A <- Z %>% filter(m <= m_threshold)#
	B <- Z %>% filter(m > m_threshold)#
	if (dim(A)[1] > 0) {#
		A$pi_i_values = pi_i(N, n1, A$m)	#
	}#
	if (dim(B)[1] > 0) {	#
		B$pi_i_values = pi_i(N, n1, m_threshold)#
	}#
	Z <- bind_rows(A, B) %>% as.data.frame
head(Z)
A
B
Z
setwd('/Users/KSauby/Documents/Projects/ACS/R')
y_HT = sum(unlist(Z$y)*J/unlist(Z$pi_i_values), na.rm=T)/N
y_HT
2+2+3+4
1+2+8+11
25+47

install.packages("chron")
install.packages("unmarked")
install.packages("lme4")
install.packages("rgeos", repos="http://R-Forge.R-project.org", type="source")#
require(rgeos)
install.packages('rgdal',repos="http://www.stats.ox.ac.uk/pub/RWin")
library(rgdal)
install.packages("http://cran.r-project.org/src/contrib/rgdal_0.9-1.tar.gz", repos = NULL, type="source", configure.args = "--with-gdal-config=/Library/Frameworks/GDAL.framework/Versions/1.10/unix/bin/gdal-config --with-proj-include=/Library/Frameworks/PROJ.framework/unix/include --with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib")
18/1.618
189+114
library(lubridate)
library(magrittr)
seasons <- data.frame(#
	   SE = as.POSIXct(c("2009-3-20", "2010-3-20", "2011-3-20", "2012-3-20", #
            "2013-3-20", "2014-3-20"), format="%Y-%m-%d"),#
	   SS = as.POSIXct(c("2009-6-21", "2010-6-21", "2011-6-21", "2012-6-20",#
            "2013-6-20", "2014-6-20"), format="%Y-%m-%d"),#
	   FE = as.POSIXct(c("2009-9-22", "2010-9-23", "2011-9-23", "2012-9-22",#
            "2013-9-22", "2014-9-22"), format="%Y-%m-%d"),#
	   WS = as.POSIXct(c("2009-12-21", "2010-12-21", "2011-12-22", "2012-12-21", #
            "2013-12-21", "2014-12-21"), format="%Y-%m-%d")#
    )#
#
    assignSeason <- function(dat, SeasonStarts=seasons) {#
	    dat %<>% mutate(#
		    Season = lapply(Date,#
				function(x) {#
					findInterval(#
						x, #
						SeasonStarts[which(year(x)==year(SeasonStarts$WS)), ]#
					)#
				}#
			) %>% unlist	#
		)#
	    dat[which(dat$Season==0 | dat$Season==4), ]$Season 	<- "Winter"#
	    dat[which(dat$Season==1), ]$Season 					<- "Spring"#
	    dat[which(dat$Season==2), ]$Season 					<- "Summer"#
	    dat[which(dat$Season==3), ]$Season 					<- "Fall"#
	    return(dat)#
    }
dat = data.frame(#
	    Date = as.POSIXct(strptime(as.Date("2011-12-01", format = "%Y-%m-%d") + #
            (0:10)*30, format="%Y-%m-%d" ))#
    )#
    dat %>% assignSeason
library(dplyr)
dat = data.frame(#
	    Date = as.POSIXct(strptime(as.Date("2011-12-01", format = "%Y-%m-%d") + #
            (0:10)*30, format="%Y-%m-%d" ))#
    )#
    dat %>% assignSeason
library(devtoolks)
library(devtools)
?install_github
devtools::install_github("ksauby/ACSampling", auth_token="2ab30a602e52fae481f4249cc25e892c0a9ccfc7", subdir="/code/Restricted_ACS_Simulations/ACSampling", repos=NULL)
devtools::install_github("ksauby/ACSampling", auth_token="2794c3f10db92f525181a0b1f6c19064fe3a2ef3", subdir="/code/Restricted_ACS_Simulations/ACSampling", repos=NULL)
devtools::install("~/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="~/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="~/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install_local(path="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
library(devtools)
devtools::install_local(path="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
install.packages("~/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
??limit
37-13
24/37
37-13
26/37
25/37
23/37
29/37
30/37
22/37
30/37
29/37
28/37
27/37
35/37
30/37
29/37
26/37
26/37 - .6757
28/37
30/37
29/37
37-12
25/37
219*.8
219*.8 - 17
26/3
17/900
42/900
49/900
29/40
1/25
8/25
10/25
(7.5 + 3.75)/15
12*0.75
11 * 0.75
11/15
11*0.25
11/15 * 6
32/41 +0.03.5
32/41 + 0.035
(32/41 + 0.035)*100
100/41
23/40 * 100
(23/40 * 100)+5
(164 + 13.5 + 6)
(164 + 13.5 + 6)/365
(164 + 13.5 + 6 + (50))/365
(164 + 13.5 + 6 + (60))/365
(164 + 13.5 + 6 + (70))/365
(164 + 13.5 + 6 + (75))/365
102/40
102/41
?table
9.49/2
12.75+8.25
(10.5 + 6.5)/(12.75+8.25)
.25^2 * 2
(.25^2 * 2)^0.5
(.25^2 * 2)^0.5 * 2
3/8
5/8
6/8
30*1.5
40*15
40*1.5
13.25 - 4.5
(276.29+8.75)/365
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
source("1_set_variables.R")#
source("2_create_realizations.R")#
source("3_summarise_network_information.R")#
source("4_calculate_realization_summary_statistics.R")
setwd('/Users/KSauby/Documents/Projects/ACSampling_project')
library(ProjectTemplate)#
#
# when working on a Windows computer#
# setwd("C:/Users/KSauby/Dropbox/gradschool/Research/Projects/sampling")#
#
# load project#
load.project()
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
source("1_set_variables.R")#
source("2_create_realizations.R")#
source("3_summarise_network_information.R")#
source("4_calculate_realization_summary_statistics.R")
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
patch_data_summary
setwd('/Users/KSauby/Documents/Projects/ACS/R')
grouping.variables
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
population_data 	= patch_data
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
summary.variables 	= variables
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
ratio.variables 	= rvar
setwd('/Users/KSauby/Documents/Projects/ACS/R')
funs <- . <- m <- NetworkID <- NULL#
	# for each grouping.variables combo, calculate mean, var, sum#
	X = population_data %>%#
		group_by_(.dots=lapply(grouping.variables, as.symbol)) %>%#
		dplyr::select_(.dots=lapply(#
			c(#
				summary.variables, #
				ratio.variables#
			), #
			as.symbol#
		)) %>% #
		summarise_each(#
			funs(#
				mean(., na.rm=T), #
				sum(., na.rm=T)#
			)#
		) %>%#
		ungroup#
	if (length(c(summary.variables, ratio.variables)) == 1) {#
		X %<>%#
		setnames(#
			., #
			"mean", #
			paste(#
				c(summary.variables, ratio.variables), #
				"_", #
				"mean", #
				sep=""#
			)#
		) %>%#
		setnames(#
			., #
			"sum", #
			paste(#
				c(summary.variables, ratio.variables), #
				"_", #
				"sum", #
				sep="" #
			)#
		)#
	} #
	if (!(is.null(ratio.variables))) {#
		for (l in 1:length(ratio.variables)) {#
			y <- eval(parse(text=paste(#
				"X$", #
				ratio.variables[l], #
				"_sum", #
				sep=""#
			)))#
			z <- eval(parse(text = paste(#
				"X$", #
				str_sub(ratio.variables[l],-7,-1), #
				"_sum", #
				sep=""#
			)))#
			X[, dim(X)[2] + 1] <- ifelse(z!=0, y/z, 0)#
			names(X)[dim(X)[2]] <- paste(#
				ratio.variables[l], #
				"_ratio_mean", #
				sep=""#
			)#
		}#
	}
setwd('/Users/KSauby/Documents/Projects/ACS/R')
Y = population_data %>%#
		group_by_(.dots=lapply(c("NetworkID", grouping.variables), as.symbol)) %>%#
		summarise(m = m[1]) %>%#
		group_by_(.dots=lapply(grouping.variables, as.symbol)) %>%#
		summarise(#
			m_min = min(m),#
			m_max = max(m),#
			m_mean = mean(m),#
			m_var = var(m),#
			n_Species_Patches = length(unique(NetworkID[which(m>1)]))#
		) %>%#
		ungroup %>%#
		as.data.frame
Y
head(population_data)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
population_data %>%#
		group_by_(.dots=lapply(c("NetworkID", grouping.variables), as.symbol)) %>%#
		summarise(m = m[1]) %>%
head
population_data %>%#
		group_by_(.dots=lapply(c("NetworkID", grouping.variables), as.symbol)) %>%#
		summarise(m = m[1]) %>% arrange(n.networks) %>% head
setwd('/Users/KSauby/Documents/Projects/ACS/R')
population_data %>%#
		group_by_(.dots=lapply(c("NetworkID", grouping.variables), as.symbol)) %>%#
		summarise(m = m[1]) %>%
dim
dim(population_data)
population_data %>%#
		group_by_(.dots=lapply(grouping.variables, as.symbol)) %>%#
		summarise(length(unique(NetworksID)))
population_data %>%#
		group_by_(.dots=lapply(grouping.variables, as.symbol)) %>%#
		summarise(length(unique(NetworksID)))
population_data %>%#
		group_by_(.dots=lapply(grouping.variables, as.symbol)) %>%#
		summarise(length(unique(NetworkID)))
population_data %>%#
		group_by_(.dots=lapply(grouping.variables, as.symbol)) %>%#
		summarise(length(unique(NetworkID))) %$% sum(`length(unique(NetworkID))`)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
population_data %>%#
		group_by_(.dots=lapply(grouping.variables, as.symbol)) %>%#
		summarise(N = length(m))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
population_data %>%#
		group_by_(.dots=lapply(grouping.variables, as.symbol)) %>%#
		summarise(#
			m_min = min(m),#
			m_max = max(m),#
			m_mean = mean(m),#
			m_var = var(m),#
			n_Species_Patches = length(unique(NetworkID[which(m>1)]))#
		) %>%#
		ungroup %>%#
		as.data.frame
setwd('/Users/KSauby/Documents/Projects/ACS/R')
population_data %>%#
		group_by_(.dots=lapply(c("NetworkID", grouping.variables), as.symbol)) %>%#
		summarise(m = m[1]) %>%#
		group_by_(.dots=lapply(grouping.variables, as.symbol)) %>%#
		summarise(#
			m_min_unique_neigh = min(m),#
			m_max_unique_neigh = max(m),#
			m_mean_unique_neigh = mean(m),#
			m_var_unique_neigh = var(m),#
			n_Species_Patches = length(unique(NetworkID[which(m>1)]))#
		) %>%#
		ungroup %>%#
		as.data.frame
setwd('/Users/KSauby/Documents/Projects/ACS/R')
#' Calculate Summary Statistics for Patch Population Data#
#' #
#' @param population_data Data on multiple realizations of patches of the species of interest within the grid of locations (created by \code{createSpeciesPatchPopulations} function).#
#' @param summary.variables Vector of variables for which summary statistics should be calculated.#
#' @param grouping.variables Categorical variables identifying the patch realization from which the simulation data was generated (e.g., \code{n.networks} and \code{realization}).#
#' @param ratio.variables Variables for which to use ratio estimators#
#' @return Dataframe including summary statistics for each column identified in \code{summary.variables} and for each category identified in \code{grouping.variables}.#
#' @examples#
#' library(magrittr)#
#' library(dplyr)#
#' occupancy.variables = c(#
#' 	"Stricta",#
#' 	"Pusilla",#
#' 	"Cactus",#
#' 	"CACA_on_Pusilla",#
#' 	"CACA_on_Stricta",#
#' 	"MEPR_on_Pusilla",#
#' 	"MEPR_on_Stricta",#
#' 	"Old_Moth_Evidence_Pusilla",#
#' 	"Old_Moth_Evidence_Stricta"#
#' 	# "Percent_Cover_Pusilla", # how do I do these? they are occupancy nor abundance#
#' 	# "Percent_Cover_Stricta",#
#' 	# "Height_Pusilla",#
#' 	# "Height_Stricta",#
#' )		#
#' summary.variables = occupancy.variables#
#' grouping.variables = c("n.networks", "realization")#
#' # create realizations#
#' x_start = 1#
#' x_end = 30#
#' y_start = 1#
#' y_end = 30#
#' n.networks = c(5, 15, 10, 20, 30, 40)#
#' n.realizations = 1#
#' SpeciesInfo = PlotSurveys_season1#
#' start.seed=1#
#' buffer=5#
#' cactus.realizations <- createSpeciesPatchPopulations(x_start, x_end,#
#' 	y_start, y_end, buffer, n.networks, n.realizations, SpeciesInfo, start.seed,#
#' 	occupancy.variables)#
#' patch_data_summary <- calculatePopulationSummaryStatistics(cactus.realizations, #
#' 	summary.variables=occupancy.variables, grouping.variables=grouping.variables)#
#' patch_data_summary %<>% #
#' 	round(3) %>% #
#' 	arrange(n.networks) %>% #
#' 	dplyr::select(#
#' 		starts_with("Pusilla"), #
#' 		starts_with("Stricta"), #
#' 		starts_with("Cactus"), #
#' 		starts_with("CACA_on_Pusilla"),#
#' 		starts_with("CACA_on_Stricta"),#
#' 		starts_with("MEPR_on_Pusilla"),#
#' 		starts_with("MEPR_on_Stricta"),#
#' 		starts_with("Old_Moth_Evidence_Pusilla"),#
#' 		starts_with("Old_Moth_Evidence_Stricta"),#
#' 		everything()#
#' 	)#
#' write.csv(patch_data_summary, file=paste("patch_data_summary", #
#' format(Sys.time(), "%Y-%m-%d_%H-%M"), ".csv", sep=""))#
#' @export#
#' @importFrom dplyr group_by_#
#' @importFrom dplyr ungroup#
#' @importFrom stringr str_sub#
#
calculatePopulationSummaryStatistics <- function(#
	population_data, #
	summary.variables, #
	ratio.variables=NULL, #
	grouping.variables#
) {#
	funs <- . <- m <- NetworkID <- NULL#
	# for each grouping.variables combo, calculate mean, var, sum#
	X = population_data %>%#
		group_by_(.dots=lapply(grouping.variables, as.symbol)) %>%#
		dplyr::select_(.dots=lapply(#
			c(#
				summary.variables, #
				ratio.variables#
			), #
			as.symbol#
		)) %>% #
		summarise_each(#
			funs(#
				mean(., na.rm=T), #
				sum(., na.rm=T)#
			)#
		) %>%#
		ungroup#
	if (length(c(summary.variables, ratio.variables)) == 1) {#
		X %<>%#
		setnames(#
			., #
			"mean", #
			paste(#
				c(summary.variables, ratio.variables), #
				"_", #
				"mean", #
				sep=""#
			)#
		) %>%#
		setnames(#
			., #
			"sum", #
			paste(#
				c(summary.variables, ratio.variables), #
				"_", #
				"sum", #
				sep="" #
			)#
		)#
	} #
	if (!(is.null(ratio.variables))) {#
		for (l in 1:length(ratio.variables)) {#
			y <- eval(parse(text=paste(#
				"X$", #
				ratio.variables[l], #
				"_sum", #
				sep=""#
			)))#
			z <- eval(parse(text = paste(#
				"X$", #
				str_sub(ratio.variables[l],-7,-1), #
				"_sum", #
				sep=""#
			)))#
			X[, dim(X)[2] + 1] <- ifelse(z!=0, y/z, 0)#
			names(X)[dim(X)[2]] <- paste(#
				ratio.variables[l], #
				"_ratio_mean", #
				sep=""#
			)#
		}#
	}#
	# for each grouping.variables combo, calculate summary statistics for m and number of species patches#
	# this calculates the m statistics for the unique Network sizes#
	Y1 = population_data %>%#
		group_by_(.dots=lapply(c("NetworkID", grouping.variables), as.symbol)) %>%#
		summarise(m = m[1]) %>%#
		group_by_(.dots=lapply(grouping.variables, as.symbol)) %>%#
		summarise(#
			m_min_unique_neigh = min(m),#
			m_max_unique_neigh = max(m),#
			m_mean_unique_neigh = mean(m),#
			m_var_unique_neigh = var(m),#
			n_Species_Patches = length(unique(NetworkID[which(m>1)]))#
		) %>%#
		ungroup %>%#
		as.data.frame#
	# this calculates the m statistics for all units#
	Y2 = population_data %>%#
		group_by_(.dots=lapply(grouping.variables, as.symbol)) %>%#
		summarise(#
			m_min = min(m),#
			m_max = max(m),#
			m_mean = mean(m),#
			m_var = var(m),#
			n_Species_Patches = length(unique(NetworkID[which(m>1)]))#
		) %>%#
		ungroup %>%#
		as.data.frame#
	Z = population_data %>%#
		group_by_(.dots=lapply(grouping.variables, as.symbol)) %>%#
		summarise(N = length(m)) %>%#
		ungroup %>%#
		as.data.frame#
	X %<>% merge(Y1, by=grouping.variables) %>%#
		merge(Y2, by=grouping.variables) %>%#
		merge(Z, by=grouping.variables)	#
	return(X)#
}
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
calculatePopulationSummaryStatistics(#
	population_data 	= patch_data, #
	summary.variables 	= variables, #
	grouping.variables 	= grouping.variables, #
	ratio.variables 	= rvar#
)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
#' Calculate Summary Statistics for Patch Population Data#
#' #
#' @param population_data Data on multiple realizations of patches of the species of interest within the grid of locations (created by \code{createSpeciesPatchPopulations} function).#
#' @param summary.variables Vector of variables for which summary statistics should be calculated.#
#' @param grouping.variables Categorical variables identifying the patch realization from which the simulation data was generated (e.g., \code{n.networks} and \code{realization}).#
#' @param ratio.variables Variables for which to use ratio estimators#
#' @return Dataframe including summary statistics for each column identified in \code{summary.variables} and for each category identified in \code{grouping.variables}.#
#' @examples#
#' library(magrittr)#
#' library(dplyr)#
#' occupancy.variables = c(#
#' 	"Stricta",#
#' 	"Pusilla",#
#' 	"Cactus",#
#' 	"CACA_on_Pusilla",#
#' 	"CACA_on_Stricta",#
#' 	"MEPR_on_Pusilla",#
#' 	"MEPR_on_Stricta",#
#' 	"Old_Moth_Evidence_Pusilla",#
#' 	"Old_Moth_Evidence_Stricta"#
#' 	# "Percent_Cover_Pusilla", # how do I do these? they are occupancy nor abundance#
#' 	# "Percent_Cover_Stricta",#
#' 	# "Height_Pusilla",#
#' 	# "Height_Stricta",#
#' )		#
#' summary.variables = occupancy.variables#
#' grouping.variables = c("n.networks", "realization")#
#' # create realizations#
#' x_start = 1#
#' x_end = 30#
#' y_start = 1#
#' y_end = 30#
#' n.networks = c(5, 15, 10, 20, 30, 40)#
#' n.realizations = 1#
#' SpeciesInfo = PlotSurveys_season1#
#' start.seed=1#
#' buffer=5#
#' cactus.realizations <- createSpeciesPatchPopulations(x_start, x_end,#
#' 	y_start, y_end, buffer, n.networks, n.realizations, SpeciesInfo, start.seed,#
#' 	occupancy.variables)#
#' patch_data_summary <- calculatePopulationSummaryStatistics(cactus.realizations, #
#' 	summary.variables=occupancy.variables, grouping.variables=grouping.variables)#
#' patch_data_summary %<>% #
#' 	round(3) %>% #
#' 	arrange(n.networks) %>% #
#' 	dplyr::select(#
#' 		starts_with("Pusilla"), #
#' 		starts_with("Stricta"), #
#' 		starts_with("Cactus"), #
#' 		starts_with("CACA_on_Pusilla"),#
#' 		starts_with("CACA_on_Stricta"),#
#' 		starts_with("MEPR_on_Pusilla"),#
#' 		starts_with("MEPR_on_Stricta"),#
#' 		starts_with("Old_Moth_Evidence_Pusilla"),#
#' 		starts_with("Old_Moth_Evidence_Stricta"),#
#' 		everything()#
#' 	)#
#' write.csv(patch_data_summary, file=paste("patch_data_summary", #
#' format(Sys.time(), "%Y-%m-%d_%H-%M"), ".csv", sep=""))#
#' @export#
#' @importFrom dplyr group_by_#
#' @importFrom dplyr ungroup#
#' @importFrom stringr str_sub#
#
calculatePopulationSummaryStatistics <- function(#
	population_data, #
	summary.variables, #
	ratio.variables=NULL, #
	grouping.variables#
) {#
	funs <- . <- m <- NetworkID <- NULL#
	# for each grouping.variables combo, calculate mean, var, sum#
	X = population_data %>%#
		group_by_(.dots=lapply(grouping.variables, as.symbol)) %>%#
		dplyr::select_(.dots=lapply(#
			c(#
				summary.variables, #
				ratio.variables#
			), #
			as.symbol#
		)) %>% #
		summarise_each(#
			funs(#
				mean(., na.rm=T), #
				sum(., na.rm=T)#
			)#
		) %>%#
		ungroup#
	if (length(c(summary.variables, ratio.variables)) == 1) {#
		X %<>%#
		setnames(#
			., #
			"mean", #
			paste(#
				c(summary.variables, ratio.variables), #
				"_", #
				"mean", #
				sep=""#
			)#
		) %>%#
		setnames(#
			., #
			"sum", #
			paste(#
				c(summary.variables, ratio.variables), #
				"_", #
				"sum", #
				sep="" #
			)#
		)#
	} #
	if (!(is.null(ratio.variables))) {#
		for (l in 1:length(ratio.variables)) {#
			y <- eval(parse(text=paste(#
				"X$", #
				ratio.variables[l], #
				"_sum", #
				sep=""#
			)))#
			z <- eval(parse(text = paste(#
				"X$", #
				str_sub(ratio.variables[l],-7,-1), #
				"_sum", #
				sep=""#
			)))#
			X[, dim(X)[2] + 1] <- ifelse(z!=0, y/z, 0)#
			names(X)[dim(X)[2]] <- paste(#
				ratio.variables[l], #
				"_ratio_mean", #
				sep=""#
			)#
		}#
	}#
	# for each grouping.variables combo, calculate summary statistics for m and number of species patches#
	# this calculates the m statistics for the unique Network sizes#
	Y1 = population_data %>%#
		group_by_(.dots=lapply(c("NetworkID", grouping.variables), as.symbol)) %>%#
		summarise(m = m[1]) %>%#
		group_by_(.dots=lapply(grouping.variables, as.symbol)) %>%#
		summarise(#
			m_min_unique_neigh = min(m),#
			m_max_unique_neigh = max(m),#
			m_mean_unique_neigh = mean(m),#
			m_var_unique_neigh = var(m),#
			n_Species_Patches = length(unique(NetworkID[which(m>1)]))#
		) %>%#
		ungroup %>%#
		as.data.frame#
	# this calculates the m statistics for all units#
	Y2 = population_data %>%#
		group_by_(.dots=lapply(grouping.variables, as.symbol)) %>%#
		summarise(#
			m_min = min(m),#
			m_max = max(m),#
			m_mean = mean(m),#
			m_var = var(m)#
		) %>%#
		ungroup %>%#
		as.data.frame#
	Z = population_data %>%#
		group_by_(.dots=lapply(grouping.variables, as.symbol)) %>%#
		summarise(N = length(m)) %>%#
		ungroup %>%#
		as.data.frame#
	X %<>% merge(Y1, by=grouping.variables) %>%#
		merge(Y2, by=grouping.variables) %>%#
		merge(Z, by=grouping.variables)	#
	return(X)#
}
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
calculatePopulationSummaryStatistics(#
	population_data 	= patch_data, #
	summary.variables 	= variables, #
	grouping.variables 	= grouping.variables, #
	ratio.variables 	= rvar#
)
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
patchdat = patch_data_6
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
patch_data_6 <- patch_data %>% filter(#
	n.networks == levels(n.networks)[3] |#
	n.networks == levels(n.networks)[4] |#
	n.networks == levels(n.networks)[5]#
)
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
patchdat = patch_data_6
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
nsamples = 40
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
SamplingDesign="RACS"
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
y_variable = "Cactus"
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
f_max = 3
setwd('/Users/KSauby/Documents/Projects/ACS/R')
n.networks <- realization <- i <- j <- Sampling <- . <- NetworkID <- NULL#
	TIME 					<- Sys.time()#
	patchdat 				%<>% arrange(n.networks, realization)#
	n.patches 				<- length(unique(patchdat$n.networks))#
	nsample.length 			<- length(nsamples)#
	A 						<- vector("list", n.patches)
i=1
j=1
setwd('/Users/KSauby/Documents/Projects/ACS/R')
P 			<- patchdat %>% #
							filter(n.networks==unique(patchdat$n.networks)[i])#
			N 			<- dim(P)[1]#
			n1 			<- nsamples[j]#
			A[[i]][[j]] <- list()#
			r 			<- (i - 1) * j + j#
			seeds 		<- runif(simulations)
simulations=500
setwd('/Users/KSauby/Documents/Projects/ACS/R')
P 			<- patchdat %>% #
							filter(n.networks==unique(patchdat$n.networks)[i])#
			N 			<- dim(P)[1]#
			n1 			<- nsamples[j]#
			A[[i]][[j]] <- list()#
			r 			<- (i - 1) * j + j#
			seeds 		<- runif(simulations)
k=1
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp_seed <- seeds[k]*100000#
				if (SamplingDesign=="ACS") {#
					alldata <- createACS(#
						population=P, #
						seed=temp_seed, #
						n1=n1, #
						y_variable=y_variable#
					) %>% #
						as.data.table#
				} else {#
					alldata <- createRACS_flex(#
						population=P, #
						seed=temp_seed, #
						n1=n1, #
						y_variable=y_variable,#
						f_max = f_max#
					) %>% #
						as.data.table#
				}
setwd('/Users/KSauby/Documents/Projects/ACS/R')
A[[i]][[j]][[k]] <- alldata %>% #
					filter(Sampling!="Edge") %>%#
					dplyr::select(n.networks, realization, x, y)#
				cactus_networks <- alldata %>%#
					filter(!(Cactus==0 & m==1)) %>%#
					filter(m!=0)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
if (dim(cactus_networks)[1] > 0) {#
					cactus_networks %<>%#
						group_by(n.networks) %>%#
						summarise(m = m[1]) %>%#
						ungroup %>%#
						mutate(#
							MEAN = mean(m),#
							MAX = max(m),#
							MIN = min(m),#
							MEDIAN = median(m)#
						)#
					A[[i]][[j]][[k]]$mean_m 	<- cactus_networks$MEAN#
					A[[i]][[j]][[k]]$max_m 		<- cactus_networks$MAX#
					A[[i]][[j]][[k]]$min_m 		<- cactus_networks$MIN#
					A[[i]][[j]][[k]]$median_m 	<- cactus_networks$MEDIAN
}
A[[i]][[j]][[k]]
setwd('/Users/KSauby/Documents/Projects/ACS/R')
dim(cactus_networks)[1] > 0
setwd('/Users/KSauby/Documents/Projects/ACS/R')
cactus_networks <- alldata %>%#
					filter(!(Cactus==0 & m==1)) %>%#
					filter(m!=0)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
dim(cactus_networks)[1] > 0
setwd('/Users/KSauby/Documents/Projects/ACS/R')
cactus_networks %<>%#
						group_by(n.networks) %>%#
						summarise(m = m[1])
setwd('/Users/KSauby/Documents/Projects/ACS/R')
cactus_networks
setwd('/Users/KSauby/Documents/Projects/ACS/R')
cactus_networks <- alldata %>%#
					filter(!(Cactus==0 & m==1)) %>%#
					filter(m!=0)
head(cactus_networks)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
dim(cactus_networks)[1] > 0
setwd('/Users/KSauby/Documents/Projects/ACS/R')
cactus_networks %<>%#
						group_by(NetworkID) %>%#
						summarise(m = m[1])
setwd('/Users/KSauby/Documents/Projects/ACS/R')
cactus_networks
setwd('/Users/KSauby/Documents/Projects/ACS/R')
cactus_networks <- alldata %>%#
					#filter(!(Cactus==0 & m==1)) %>%#
					filter(m!=0)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
cactus_networks %<>%#
						group_by(NetworkID) %>%#
						summarise(m = m[1])
setwd('/Users/KSauby/Documents/Projects/ACS/R')
cactus_networks
setwd('/Users/KSauby/Documents/Projects/ACS/R')
cactus_networks <- alldata %>%#
					#filter(!(Cactus==0 & m==1)) %>%#
					filter(m!=0)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
cactus_networks %<>%#
						group_by(NetworkID) %>%#
						summarise(m = m[1]) %>%#
						ungroup %>%#
						mutate(#
							MEAN = mean(m),#
							MAX = max(m),#
							MIN = min(m),#
							MEDIAN = median(m)#
						)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
cactus_networks
setwd('/Users/KSauby/Documents/Projects/ACS/R')
cactus_networks <- alldata %>%#
					#filter(!(Cactus==0 & m==1)) %>%#
					filter(m!=0)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
cactus_networks %<>%#
						group_by(NetworkID) %>%#
						summarise(m = m[1]) %>%#
						mutate(#
							MEAN = mean(m),#
							MAX = max(m),#
							MIN = min(m),#
							MEDIAN = median(m)#
						)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
cactus_networks
setwd('/Users/KSauby/Documents/Projects/ACS/R')
cactus_networks <- alldata %>%#
					#filter(!(Cactus==0 & m==1)) %>%#
					filter(m!=0)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
cactus_networks %<>%#
						group_by(NetworkID) %>%#
						summarise(m = m[1]) %>%#
						summarise(#
							MEAN = mean(m),#
							MAX = max(m),#
							MIN = min(m),#
							MEDIAN = median(m)#
						)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
cactus_networks
setwd('/Users/KSauby/Documents/Projects/ACS/R')
cactus_networks <- alldata %>%#
					#filter(!(Cactus==0 & m==1)) %>%#
					filter(m!=0)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
cactus_networks %<>%#
						group_by(NetworkID) %>%#
						summarise(m = m[1])
setwd('/Users/KSauby/Documents/Projects/ACS/R')
cactus_networks
mean(cactus_networks$m)
max(cactus_networks$m)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
cactus_networks <- alldata %>%#
					#filter(!(Cactus==0 & m==1)) %>%#
					filter(m!=0)#
				if (dim(cactus_networks)[1] > 0) {#
					cactus_networks %<>%#
						group_by(NetworkID) %>%#
						summarise(m = m[1]) %>%#
						summarise(#
							MEAN = mean(m),#
							MAX = max(m),#
							MIN = min(m),#
							MEDIAN = median(m)#
						)#
					A[[i]][[j]][[k]]$mean_m 	<- cactus_networks$MEAN#
					A[[i]][[j]][[k]]$max_m 		<- cactus_networks$MAX#
					A[[i]][[j]][[k]]$min_m 		<- cactus_networks$MIN#
					A[[i]][[j]][[k]]$median_m 	<- cactus_networks$MEDIAN		#
				} else {#
					A[[i]][[j]][[k]]$mean_m 	<- 0#
					A[[i]][[j]][[k]]$max_m 		<- 0#
					A[[i]][[j]][[k]]$min_m 		<- 0#
					A[[i]][[j]][[k]]$median_m 	<- 0#
				}
setwd('/Users/KSauby/Documents/Projects/ACS/R')
A[[i]][[j]][[k]]
setwd('/Users/KSauby/Documents/Projects/ACS/R')
n.networks <- realization <- i <- j <- Sampling <- . <- NetworkID <- NULL#
	TIME 					<- Sys.time()#
	patchdat 				%<>% arrange(n.networks, realization)#
	n.patches 				<- length(unique(patchdat$n.networks))#
	nsample.length 			<- length(nsamples)#
	A 						<- vector("list", n.patches)
i=1
j=1
k=1
setwd('/Users/KSauby/Documents/Projects/ACS/R')
P 			<- patchdat %>% #
							filter(n.networks==unique(patchdat$n.networks)[i])#
			N 			<- dim(P)[1]#
			n1 			<- nsamples[j]#
			A[[i]][[j]] <- list()#
			r 			<- (i - 1) * j + j#
			seeds 		<- runif(simulations)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp_seed <- seeds[k]*100000#
				if (SamplingDesign=="ACS") {#
					alldata <- createACS(#
						population=P, #
						seed=temp_seed, #
						n1=n1, #
						y_variable=y_variable#
					) %>% #
						as.data.table#
				} else {#
					alldata <- createRACS_flex(#
						population=P, #
						seed=temp_seed, #
						n1=n1, #
						y_variable=y_variable,#
						f_max = f_max#
					) %>% #
						as.data.table#
				}#
				A[[i]][[j]][[k]] <- alldata %>% #
					filter(Sampling!="Edge") %>%#
					dplyr::select(n.networks, realization, x, y)#
				cactus_networks <- alldata %>%#
					#filter(!(Cactus==0 & m==1)) %>%#
					filter(m!=0)#
				if (dim(cactus_networks)[1] > 0) {#
					cactus_networks %<>%#
						group_by(NetworkID) %>%#
						summarise(m = m[1]) %>%#
						summarise(#
							MEAN = mean(m),#
							MAX = max(m),#
							MIN = min(m),#
							MEDIAN = median(m)#
						)#
					A[[i]][[j]][[k]]$mean_m 	<- cactus_networks$MEAN#
					A[[i]][[j]][[k]]$max_m 		<- cactus_networks$MAX#
					A[[i]][[j]][[k]]$min_m 		<- cactus_networks$MIN#
					A[[i]][[j]][[k]]$median_m 	<- cactus_networks$MEDIAN		#
				} else {#
					A[[i]][[j]][[k]]$mean_m 	<- 0#
					A[[i]][[j]][[k]]$max_m 		<- 0#
					A[[i]][[j]][[k]]$min_m 		<- 0#
					A[[i]][[j]][[k]]$median_m 	<- 0#
				}#
				A[[i]][[j]][[k]]$seed 				<- temp_seed#
				A[[i]][[j]][[k]]$SamplingDesign 	<- SamplingDesign#
				A[[i]][[j]][[k]]$simulations 		<- simulations#
				A[[i]][[j]][[k]]$realization 		<- P$realization[1]#
				A[[i]][[j]][[k]]$n.networks 		<- P$n.networks[1]#
				A[[i]][[j]][[k]]$N.SRSWOR.plots 	<- n1
setwd('/Users/KSauby/Documents/Projects/ACS/R')
A[[i]][[j]][[k]]
setwd('/Users/KSauby/Documents/Projects/ACS/R')
cactus_networks <- alldata %>%#
					#filter(!(Cactus==0 & m==1)) %>%#
					filter(m!=0)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp2 <- cactus_networks %>%#
						summarise(#
							MEAN = mean(m),#
							MAX = max(m),#
							MIN = min(m),#
							MEDIAN = median(m)#
						)
head(temp2)

887907.69 + 39734.68 + 185073.33
887907.69 + 39734.68 + 185073.33+150000
887907.69 + 39734.68 + 185073.33+150000+50000
1000/40
89.95/3120
89.95/310
89.95/310*43
13.3/11.35
410.26/348.6
37.66/32
50/7
1000/78
78/1000
80*110
8*.33
68/1000
20000/17.2
33.95*1000
94161.58-33950
13711.35+288.66+110.04
1000/35.15
1000/15.79
5566.46/35.15
6000.00/15.79
10000/17.92
16+12+4210
16+12+42+10
93/33203.91
33203.91/93
2364.0000-1162.7910
21054.65/1207.262
26x3
26*3
78+1+0.4
55*75
+8800
55*75 + 8800
42/12
94.93*.1170+90.24*5+(92.13+6+87.2)/3*.833
94.93*.1170+90.24*.05+(92.13+6+87.2)/3*.833
94.93*.1170+90.24*.05+(92.13+6+87.2+79.5)/3*.833
.117*94.93+.05*90.24+.833*(92.13+87.2+6)/3
.117*94.93+.05*90.24+.833*(92.13+87.2+6+79.4)/3
.117+.05+.833
20000/11.26
60000/11.26
.58+4.66+11.64
.29*3
88-4-3-1-16
2.03*.8
*.84.07
4.07*.8
4.95*.8
4.95*.9
42+1+5+6
5.82+2.32
8.14*4
24.44/250
68/500
install.packages("blogdown")
blogdown::install_hugo()
library(blogdown)
blogdown::install_hugo()
library(blogdown)
blogdown::install_hugo()
blogdown::new_site()
library(dplyr)
.libPaths()
library(dplyr)
library(plotly)
library(magrittr)
.libPaths()
41180-35583
41200-35583
6+3.17+5
11.64*.7
.75*4
.85*4
.85*5
.9*5
.9*4
1+2+5+17+12+19
.29*4
.41*6
.41*10
2.89/6
2.89/6*10
.29*4
.58*4
.58*10
.43*4
.43*10
.48*10
.48*4
.39*4
.39*8
.39*10
4*.22
8*.22
4*.29
8*.29
4*.35
8*.35
1.74*5
1.74*5*.9
.58*20
5.99*.95
5.99*.95 - .2
286*.13
6*8*.13
15*.32
33+29
33+29+25
33+29+25+13
1.15-.87
1.15-.62
50+.29+.33
1.15 - .50-.29-.33
8.27+.69
7.76+.69
19+13+7
233.27*11
19+13+7
3081.26-926.29
70.50-52.75
70.50-52.75-.99
70.50-52.75
6.7+3.75
10.79-10.45
39.99*.6
80/3
263.50/541.71
485.04/541.71
263.50/541.71
397.07/541.71
3/75
25.5/75
2.5/75
32/500
5.82/4*10
5.82/4*10*.7
5.82/4*10*.6
5.82/4*10*.65
5.82/4*6*.65
5.82/4*4*.65
5.82/4*4*.6
5.82/4*6*.6
4.94*.8
4.66*.8
4.66*.7
4.66*.75
3.48/4
3.48/4*12
3.48/4*12*.9
3.48/4*12*.8
.29+.32+.05+.05
2.91/2
3.49/2
6.97/2
(3.49+5.82)/2
3.49/2
4.94/2
2.32+14.83
17.15/2
7.57/2
6.99/2
9.31/2
11.64/2
4.66/2
11.64/2
7.57/2
4.66/2
(1.74+2.61+12.21)/2
.04*4+.2*4+.32+.37+.1
.04*4+.2*4+.32+.37+.1+.8+.25+.25+.48+.45+.6+.17+.22+.08
.04*4+.2*4+.32+.37+.1+.8+.25+.25+.48+.45+.6+.17+.22+.08+.13*8
.04*4+.2*4+.32+.37+.1+.8+.25+.25+.48+.45+.6+.17+.22+.08+.13*8+.32+.32+.29+.33+.32
.04*4+.2*4+.32+.37+.1+.8+.25+.25+.48+.45+.6+.17+.22+.08+.13*8+.32+.32+.29+.33+.32+1+.5+.45+.03+.11+.02
12.9-9.78
.22+.08+.25+.17+.6+.25+.32+.33+.29+.32+.32+1+.5+2+1+.04*4+.2*4+.1+.45+.37+.32+.8+.48+.13*8+.12+.03+.11+.02+.45
setwd('/Users/KSauby/Documents/Projects/ACSampling_project')
library(ProjectTemplate)#
#
# when working on a Windows computer#
# setwd("C:/Users/KSauby/Dropbox/gradschool/Research/Projects/sampling")#
#
# load project#
load.project()
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/Figure_generation')
# ----------------------------- original y_HT -------------------------------- ##
temp <- simulation_data_summary_table_original_yHT %>% #
	filter(#
		SamplingDesign=="ACS" | SamplingDesign=="RACS",#
		Plots=="Horvitz Thompson Mean (All Plots)"#
	)#
temp$Stricta_true_mean %<>% round(3)#
temp$Pusilla_true_mean %<>% round(3)#
temp$Cactus_true_mean %<>% round(3)#
#
# bias#
X <- temp %>%#
	dplyr::select(#
		SamplingDesign,#
		population,#
		ovar_n_sims,#
		N.SRSWOR.plots, #
		MEPR_on_Stricta_ratio_mean_RB, #
		CACA_on_Stricta_ratio_mean_RB,#
		Old_Moth_Evidence_Stricta_ratio_mean_RB#
	) %>%#
	reshape2::melt(id.vars=c(#
		"SamplingDesign",#
		"population",#
		"N.SRSWOR.plots",#
		"ovar_n_sims"#
	)) %>%#
	arrange(N.SRSWOR.plots)#
colnames(X)[names(X) == "value"] <- "RB"#
X$variable %<>% str_sub(1,6)#
#
# true values#
Y <- temp %>%#
	dplyr::select(#
		population,#
		Stricta_true_mean#
	) %>%#
	reshape2::melt(id.vars=c(#
		"population"#
	)) %>%#
	dplyr::select(-variable)#
names(Y)[2] <- "True_Value"#
#
Y %<>% unique#
Y$True_Value <- with(Y, paste(True_Value, population))#
#
X %<>% merge(Y, by=c("population"))#
X$variable %<>% as.factor()#
levels(X$variable) <- c("CACA_o", "MEPR_o", "Old_Mo")#
#
X -> cactus_ratio_variable_data_old#
#
cactus_ratio_variable_data_old %<>%#
	mutate(#
		SamplingDesign=replace(#
			SamplingDesign,#
			SamplingDesign=="RACS",#
			"RACS (uncorrected)"#
		)#
	)#
# ----------------------------- new y_HT ------------------------------------- ##
X <- Y <- NULL#
#
temp <- simulation_data_summary_table_new_yHT %>% #
	filter(#
		Plots=="Horvitz Thompson Mean (All Plots)"#
	)	#
temp$Stricta_true_mean %<>% round(3)#
temp$Pusilla_true_mean %<>% round(3)#
temp$Cactus_true_mean %<>% round(3)#
#
# bias#
X <- temp %>%#
	dplyr::select(#
		SamplingDesign,#
		population,#
		ovar_n_sims,#
		N.SRSWOR.plots, #
		MEPR_on_Stricta_ratio_mean_RB, #
		CACA_on_Stricta_ratio_mean_RB,#
		Old_Moth_Evidence_Stricta_ratio_mean_RB#
	) %>%#
	reshape2::melt(id.vars=c(#
		"SamplingDesign",#
		"population",#
		"N.SRSWOR.plots",#
		"ovar_n_sims"#
	)) %>%#
	arrange(N.SRSWOR.plots)#
colnames(X)[names(X) == "value"] <- "RB"#
#
# true values#
Y <- temp %>%#
	dplyr::select(#
		population,#
		Stricta_true_mean#
	) %>%#
	reshape2::melt(id.vars=c(#
		"population"#
	)) %>%#
	dplyr::select(-variable)#
names(Y)[2] <- "True_Value"#
#
Y %<>% unique#
Y$True_Value <- with(Y, paste(True_Value, population))#
#
X %<>% merge(Y, by=c("population"))#
X$variable %<>% as.factor()#
levels(X$variable) <- c("MEPR_o", "CACA_o", "Old_Mo")#
#
X$SamplingDesign <- "RACS (corrected)"#
#
X -> cactus_ratio_variable_data_new#
#
# ----------------------------- new y_HT ------------------------------------- ##
#
cactus_ratio_variable_data <- rbind.fill(#
	cactus_ratio_variable_data_old,#
	cactus_ratio_variable_data_new#
)#
#
levels(cactus_ratio_variable_data$variable) <- c(#
	"a" = expression(atop("Invasive Moth on ", italic("O. stricta"))),#
	"b" = expression(atop("Native Moth on ", italic("O. stricta"))),#
	"c" = expression(atop("Moth Damage on ", italic("O. stricta")))#
)#
#
cactus_ratio_variable_data$SamplingDesign %<>% #
	factor(levels=c(#
		"ACS", #
		"RACS (uncorrected)", #
		"RACS (corrected)"#
	))#
#
levels(cactus_ratio_variable_data$SamplingDesign) <- c(#
	expression(atop("", "ACS")),#
	expression(atop("RACS", "(uncorrected)")),#
	expression(atop("RACS", "(corrected)"))#
)#
levels(cactus_ratio_variable_data$population) <- c(#
	"1 (Low Occ.)",#
	"2",#
	"3",#
	"4",#
	"5",#
	"6 (High Occ.)"#
#
)#
legendposition="bottom"#
legendcolor="black"#
#x_breaks, #
x_angle=360#
xlength=6#
ylength=4#
roundn=2#
#
x = cactus_ratio_variable_data %>% #
	as.data.table %>%#
	setnames("RB", "y_variable") %>%#
	setnames("True_Value", "x_variable") %>%#
	setnames("N.SRSWOR.plots", "grouping_variable") %>%#
	#setnames(variable, "x.variable") %>%#
	as.data.frame %>%#
	filter(y_variable!=-Inf)#
p = ggplot(#
	x, #
	aes(#
		x 		= factor(population), #
		y 		= y_variable, #
		shape 	= factor(grouping_variable), #
		colour = factor(grouping_variable)#
	)#
) +#
geom_hline(aes(yintercept=0)) +  #
geom_point(#
	aes(shape 	= factor(grouping_variable), #
		colour = factor(grouping_variable)#
		), #
	size=6, #
	na.rm=T#
) +#
geom_line(#
	aes(linetype=factor(grouping_variable),#
		colour = factor(grouping_variable),#
		group 	= factor(grouping_variable)), #
	na.rm=T#
) +#
facet_grid(SamplingDesign~variable, scales="free_x", labeller=label_parsed) + #
guides(#
	shape=guide_legend(title="Primary Sample Size"), #
	linetype=guide_legend(title="Primary Sample Size"),#
	colour=guide_legend(title="Primary Sample Size")#
) +#
scale_y_continuous(breaks=c(-60, -40, -20, 0, 20, 40),limits=c(-70,25)) +#
xlab("Population") +#
ylab("Percent Relative Bias of the Occupancy Estimate") +#
theme(#
	legend.position=legendposition,#
	legend.key = element_rect(colour=NA),#
	legend.text = element_text(colour="black", size=24), ##
	legend.title = element_text(colour="black", size=24), ##
	panel.border = element_rect(colour = "black", fill=NA, #
		size=2),#
	panel.background = element_rect(linetype="solid", #
		fill="white"),#
	strip.text = element_text(face="bold", size=20),#
	strip.background = element_rect(fill="white"),#
	axis.text.y = element_text(colour="black", size=14),#
	axis.text.x = element_text(colour="black", angle=45, hjust=0.9, size=18),#
	axis.title.x = element_text(colour="black", size=20),#
	axis.title.y = element_text(colour="black", size=20), text=element_text(family="serif")#
)#
	pdf("insect_occupancy_bias_for_pres.pdf", width=9.5, height=7.9)#
	p#
	dev.off()
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/Figure_generation')
# ----------------------------- original var_y_HT ---------------------------- ##
temp <- simulation_data_summary_table_original_yHT %>% #filter(SamplingDesign=="RACS") %>%#
filter(Plots=="Horvitz Thompson Mean (All Plots)")#
#
temp$Stricta_true_mean %<>% round(3)#
temp$Pusilla_true_mean %<>% round(3)#
temp$Cactus_true_mean %<>% round(3)#
#
# bias#
X <- temp %>%#
	dplyr::select(#
		SamplingDesign,#
		population,#
		ovar_n_sims,#
		N.SRSWOR.plots, #
		Cactus_var_RB, #
		Pusilla_var_RB,#
		Stricta_var_RB#
	) %>%#
	reshape2::melt(id.vars=c(#
		"SamplingDesign",#
		"population",#
		"N.SRSWOR.plots",#
		"ovar_n_sims"#
	)) %>%#
	arrange(N.SRSWOR.plots)#
names(X)[6] <- "RB"#
X$variable %<>% str_sub(1,6)#
#
# true values#
Y <- temp %>%#
	dplyr::select(#
		population,#
		Stricta_true_mean, #
		Pusilla_true_mean, #
		Cactus_true_mean#
	) %>%#
	reshape2::melt(id.vars=c(#
		"population"#
	))#
names(Y)[3] <- "True_Value"#
Y$variable %<>% str_sub(1,6)#
#
Y %<>% unique#
Y$True_Value <- with(Y, paste(True_Value, population))#
#
X %<>% merge(Y, by=c("population", "variable"))#
X$variable %<>% as.factor	#
#
levels(X$variable) <- c(#
	"a" = "Cactus", #
	"b" = expression(paste(italic("O. drummondii"))), #
	"c" = expression(paste(italic("O. stricta")))#
)#
#X$SamplingDesign %<>% as.factor	#
#
#X %<>% filter(Plots!="SRSWOR_data") %>% filter(Plots=="HT")#
X %<>% mutate(Estimator = "var_y_HT")#
var_bias_data_original_y_HT <- X#
var_bias_data_original_y_HT %<>%#
	mutate(#
		SamplingDesign=replace(#
			SamplingDesign,#
			SamplingDesign=="RACS",#
			"RACS (uncorrected)"#
		)#
	)#
# ----------------------------- new var_y_HT --------------------------------- ##
temp <- simulation_data_summary_table_new_yHT %>% filter(SamplingDesign=="RACS") %>%#
filter(Plots=="Horvitz Thompson Mean (All Plots)")#
#
temp$Stricta_true_mean %<>% round(3)#
temp$Pusilla_true_mean %<>% round(3)#
temp$Cactus_true_mean %<>% round(3)#
#
# bias#
X <- temp %>%#
	dplyr::select(#
		SamplingDesign,#
		population,#
		ovar_n_sims,#
		N.SRSWOR.plots, #
		Cactus_var_RB, #
		Pusilla_var_RB,#
		Stricta_var_RB#
	) %>%#
	reshape2::melt(id.vars=c(#
		"SamplingDesign",#
		"population",#
		"N.SRSWOR.plots",#
		"ovar_n_sims"#
	)) %>%#
	arrange(N.SRSWOR.plots)#
names(X)[6] <- "RB"#
X$variable %<>% str_sub(1,6)#
#
# true values#
Y <- temp %>%#
	dplyr::select(#
		population,#
		Stricta_true_mean, #
		Pusilla_true_mean, #
		Cactus_true_mean#
	) %>%#
	reshape2::melt(id.vars=c(#
		"population"#
	))#
names(Y)[3] <- "True_Value"#
Y$variable %<>% str_sub(1,6)#
#
Y %<>% unique#
Y$True_Value <- with(Y, paste(True_Value, population))#
#
X %<>% merge(Y, by=c("population", "variable"))#
X$variable %<>% as.factor	#
#
levels(X$variable) <- c(#
	"a" = "Cactus", #
	"b" = expression(paste(italic("O. drummondii"))), #
	"c" = expression(paste(italic("O. stricta")))#
)#
X$SamplingDesign %<>% as.factor	#
#
X$SamplingDesign <- "RACS (corrected)"#
#
X %<>% mutate(Estimator = "var_y_RACS_HT")#
var_bias_data_new_y_HT <- X#
# ----------------------------- plot ----------------------------------------- ##
occupancy_bias_data <- rbind.fill(#
	var_bias_data_original_y_HT, #
	var_bias_data_new_y_HT#
)#
occupancy_bias_data$SamplingDesign %<>% #
	factor(levels=c(#
		"ACS", #
		"RACS (uncorrected)", #
		"RACS (corrected)"#
	))#
levels(occupancy_bias_data$SamplingDesign) <- c(#
	expression(atop("", "ACS")),#
	expression(atop("RACS", "(uncorrected)")),#
	expression(atop("RACS", "(corrected)"))#
)#
#occupancy_bias_data$Estimator %<>% as.factor#
#levels(occupancy_bias_data$Estimator) <- c(#
#	expression(vary[HT]),#
#	expression(vary["HT,RACS"])#
#)#
#occupancy_bias_data %<>% filter(#
#	population==" (Pop. 2)" |#
#	population=="(Pop. 3)"#
#	)#
#
legendposition="bottom"#
legendcolor="black"#
#x_breaks, #
x_angle=45#
xlength=6#
ylength=4#
roundn=2#
	ylab_name			= "Percent Relative Bias of the Variance Estimate"#
xlab_name			= "True Occupancy"#
x = occupancy_bias_data %>% #
	as.data.table %>%#
	setnames("RB", "y_variable") %>%#
	setnames("True_Value", "x_variable") %>%#
	setnames("N.SRSWOR.plots", "grouping_variable") %>%#
	#setnames(variable, "x.variable") %>%#
	as.data.frame %>%#
	filter(y_variable!=-Inf)#
levels(x$population) <- c(#
	"1 (Low Occ.)",#
	"2",#
	"3",#
	"4",#
	"5",#
	"6 (High Occ.)"#
)#
#
p = ggplot(#
	x %>% filter(population=="1 (Low Occ.)" | population=="2" | population=="3"), #
	aes(#
		x 		= factor(population), #
		y 		= y_variable, #
		shape 	= factor(grouping_variable), #
		colour = factor(grouping_variable)#
	)#
) +#
geom_hline(aes(yintercept=0)) +  #
geom_point(#
	aes(shape 	= factor(grouping_variable), #
		colour = factor(grouping_variable)#
		), #
	size=6, #
	na.rm=T#
) +#
geom_line(#
	aes(linetype=factor(grouping_variable),#
		colour = factor(grouping_variable),#
		group 	= factor(grouping_variable)), #
	na.rm=T#
) +#
facet_grid(SamplingDesign~variable, space="free", labeller=label_parsed) + #
guides(#
	shape=guide_legend(title="Primary Sample Size"), #
	linetype=guide_legend(title="Primary Sample Size"),#
	colour=guide_legend(title="Primary Sample Size")#
) +#
scale_y_continuous(breaks=c(0,500,1000,1500,2000), limits=c(-100,2000)) +#
xlab("Population") +#
ylab(ylab_name) +#
theme(#
	legend.position=legendposition,#
	legend.key = element_rect(colour=NA),#
	legend.text = element_text(colour="black", size=20), ##
	legend.title = element_text(colour="black", size=20), ##
	panel.border = element_rect(colour = "black", fill=NA, #
		size=2),#
	panel.background = element_rect(linetype="solid", #
		fill="white"),#
	strip.text = element_text(face="bold", size=15),#
	strip.background = element_rect(fill="white"),#
	axis.text.y = element_text(size=14, colour="black"),#
	axis.text.x = element_text(angle=45, hjust=0.9, size=16, colour="black"),#
	axis.title.x = element_text(size=20, colour="black"),#
	axis.title.y = element_text(size=20, colour="black"), #
	text=element_text(family="serif")#
)#
pdf("variance_bias_a.pdf", width=6, height=7.9)#
p#
dev.off()#
p = ggplot(#
	x %>% filter(population=="4" | population=="5" | population=="6 (High Occ.)"), #
	aes(#
		x 		= factor(population), #
		y 		= y_variable, #
		shape 	= factor(grouping_variable), #
		colour = factor(grouping_variable)#
	)#
) +#
geom_hline(aes(yintercept=0)) +  #
geom_point(#
	aes(shape 	= factor(grouping_variable), #
		colour = factor(grouping_variable)#
		), #
	size=6, #
	na.rm=T#
) +#
geom_line(#
	aes(linetype=factor(grouping_variable),#
		colour = factor(grouping_variable),#
		group 	= factor(grouping_variable)), #
	na.rm=T#
) +#
facet_grid(SamplingDesign~variable, space="free", labeller=label_parsed) + #
guides(#
	shape=guide_legend(title="Primary Sample Size"), #
	linetype=guide_legend(title="Primary Sample Size"),#
	colour=guide_legend(title="Primary Sample Size")#
) +#
#scale_y_continuous(breaks=c(10,100,1000,10000,100000)) +#
xlab("Population") +#
ylab(ylab_name) +#
theme(#
	legend.position=legendposition,#
	legend.key = element_rect(colour=NA),#
	legend.text = element_text(colour="black", size=20), ##
	legend.title = element_text(colour="black", size=20), ##
	panel.border = element_rect(colour = "black", fill=NA, #
		size=2),#
	panel.background = element_rect(linetype="solid", #
		fill="white"),#
	strip.text = element_text(face="bold", size=15),#
	strip.background = element_rect(fill="white"),#
	axis.text.y = element_text(size=14, colour="black"),#
	axis.text.x = element_text(angle=45, hjust=0.9, size=16, colour="black"),#
	axis.title.x = element_text(size=20, colour="black"),#
	axis.title.y = element_text(size=20, colour="black"), #
	text=element_text(family="serif")#
)#
pdf("variance_bias_b.pdf", width=6, height=7.9)#
p#
dev.off()
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
population.grouping.variables	<- c("population")#
sampling.grouping.variables <- c("N.SRSWOR.plots", "SamplingDesign", "Plots")#
statistics 			<- c("mean", "var")#
ratio.statistics	<- c("mean")
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
simulation_data_summary_table_original_yHT = calculateSamplingBias(#
	population_data_summary	= patch_data_summary_wide, #
	simulation_data		= simdata_all, #
	sampling.grouping.variables	= sampling.grouping.variables, #
	population.grouping.variables = population.grouping.variables,#
	ovar			= ovar, #
	rvar			= rvar,#
	o_rvar			= "Stricta"#
)
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
# -----------------------------------------------------------------------------##
# ABUNDANCE VARIABLES#
# -----------------------------------------------------------------------------##
# -----------------------------------------------------------------------------##
# OCCUPANCY VARIABLES#
# -----------------------------------------------------------------------------##
ovar <- c(#
	"Stricta",#
	"Pusilla",#
	"Cactus"#
)#
# -----------------------------------------------------------------------------##
# RATIO VARIABLES#
# -----------------------------------------------------------------------------##
rvar <- c(#
	"MEPR_on_Stricta",#
	"CACA_on_Stricta",#
	"Percent_Cover_Stricta",#
	"Height_Stricta",#
	#"Old_Moth_Evidence_Pusilla",#
	"Old_Moth_Evidence_Stricta"#
)#
#
# "Percent_Cover_Pusilla",#
# "Height_Pusilla",#
# )
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
simulation_data_summary_table_original_yHT = calculateSamplingBias(#
	population_data_summary	= patch_data_summary_wide, #
	simulation_data		= simdata_all, #
	sampling.grouping.variables	= sampling.grouping.variables, #
	population.grouping.variables = population.grouping.variables,#
	ovar			= ovar, #
	rvar			= rvar,#
	o_rvar			= "Stricta"#
)
calculateSamplingBias
setwd('/Users/KSauby/Documents/Projects/ACS/R')
calculatedSquaredDifferences <- function(dataframe, variables) {#
	# for each simulation and variable, calculate:#
	#	(observed mean - true mean)^2#
	for (i in 1:length(variables)) {#
		dataframe %<>%#
			mutate(#
				observed_minus_true_squared = #
						# observed -#
						(eval(#
							parse(#
								text=paste(#
									variables[i], #
									"_mean_observed", #
									sep=""#
								)#
							)#
						) - #
						# true#
						eval(#
							parse(#
								text = paste(#
								variables[i], #
								"_mean", #
								sep=""#
							)#
						)#
						)#
				)^2#
			) %>%#
			setnames(#
				., #
				"observed_minus_true_squared", #
				paste(#
					variables[i], #
					"_mean_observed_minus_true_squared", #
					sep=""#
				)#
			)#
	}#
	return(dataframe)#
}#
calculateDifferencesinMeans <- function(dataframe, variables) {#
	# for each simulation and variable, calculate:#
	#	observed mean - mean of observed means#
	for (i in 1:length(variables)) {#
		dataframe %<>%#
			mutate(#
				observed_minus_mean_of_observed_means = #
						# (observed -#
						eval(#
							parse(#
								text = paste(#
									variables[i], #
									"_mean_observed", #
									sep=""#
								)#
							)#
						) - #
						# true)#
						eval(#
							parse(#
								text = paste(#
									variables[i], #
									"_mean_of_observed_means", #
									sep=""#
								)#
							)#
						)#
			) %>%#
			setnames(#
				., #
				"observed_minus_mean_of_observed_means", #
				paste(#
					variables[i], #
					"_observed_minus_mean_of_observed_means", #
					sep=""#
				)#
			)#
	}#
	return(dataframe)#
}#
calculateBiasComponents	<- function(dataframe, resultslist, variables) {#
	for (i in 1:length(variables)) {#
		resultslist[[i]] <- list()#
		resultslist[[i]] <- dataframe %>%#
			summarise_(#
				# save true mean#
				mean_RB_true_mean = interp(#
					~var[1], #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean", #
							sep=""#
						)#
					)#
				),#
				# calculate mean of observed means#
				mean_RB_mean_of_observed_means = interp(#
					~mean(var, na.rm = TRUE), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed",#
							sep=""#
						)#
					)#
				),#
				# sample size used to calculate mean of observed means#
				RB_n = interp(#
					~length(var[which(!is.na(var))]), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed",#
							sep=""#
						)#
					)#
				),#
				# calculate MSE#
				MSE_sum_of_observed_minus_true_sqrd = interp(#
					~sum(var, na.rm = TRUE), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed_minus_true_squared",#
							sep=""#
						)#
					)#
				),#
				# sample size used to calculate MSE#
				MSE_n_sims = interp(#
					~length(var[which(!is.na(var))]), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed_minus_true_squared",#
							sep=""#
						)#
					)#
				),#
				# for var_RB: calculate mean of simulated HT variance estimates#
				var_RB_mean_of_var_estimates = interp(#
					~mean(var, na.rm = TRUE), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_var_observed",#
							sep=""#
						)#
					)#
				),#
				# for var_RB: sample size used to calculate mean of simulated HT variance estimates#
				var_RB_mean_of_var_estimates_n = interp(#
					~length(var[which(!is.na(var))]), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_var_observed",#
							sep=""#
						)#
					)#
				),#
				# for var_RB: calculate variance of _mean_observed#
				var_RB_var_of_mean_estimates = interp(#
					~var(variable, na.rm = TRUE), #
					variable = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed",#
							sep=""#
						)#
					)#
				),#
				# for var_RB: calculate sample size used to calculate variance of _mean_observed#
				var_RB_var_of_mean_estimates_n = interp(#
					~length(var[which(!is.na(var))]), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed",#
							sep=""#
						)#
					)#
				)#
			) %>%#
			as.data.frame#
		resultslist[[i]] %<>% #
			mutate(#
				RB = 100 * #
					(mean_RB_mean_of_observed_means - mean_RB_true_mean) / #
					mean_RB_true_mean,#
				MSE = MSE_sum_of_observed_minus_true_sqrd/MSE_n_sims,#
				var_RB = 100 *#
				(var_RB_mean_of_var_estimates - var_RB_var_of_mean_estimates) / #
					var_RB_var_of_mean_estimates,#
				var_RB_n = min(#
					var_RB_mean_of_var_estimates_n, #
					var_RB_var_of_mean_estimates_n#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"mean_RB_true_mean",#
	      		paste(#
	      			variables[i],#
	      			"_true_mean",#
	      			sep=""#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"RB",#
	      		paste(#
	      			variables[i],#
	      			"_mean_RB",#
	      			sep=""#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"MSE",#
	      		paste(#
	      			variables[i],#
	      			"_mean_MSE",#
	      			sep=""#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"var_RB",#
	      		paste(#
	      			variables[i],#
	      			"_var_RB",#
	      			sep=""#
				)#
			) %>%#
			# rename sample size variables#
			setnames(#
	      		.,#
	      		"RB_n",#
	      		paste(#
	      			variables[i],#
	      			"_mean_RB_n",#
	      			sep=""#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"MSE_n_sims",#
	      		paste(#
	      			variables[i],#
	      			"_mean_MSE_n",#
	      			sep=""#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"var_RB_n",#
	      		paste(#
	      			variables[i],#
	      			"_var_RB_n",#
	      			sep=""#
				)#
			) %>%#
			dplyr::select(-c(#
				mean_RB_mean_of_observed_means,#
				MSE_sum_of_observed_minus_true_sqrd,#
				var_RB_mean_of_var_estimates,#
				var_RB_mean_of_var_estimates_n,#
				var_RB_var_of_mean_estimates,#
				var_RB_var_of_mean_estimates_n#
			))#
	}#
	return(resultslist)#
}#
	calculateMeanofObservedMeans <- function(dataframe, variables, nsims) {#
		# add number of simulations to dataset#
		B %<>% merge(#
			n_sims, #
			by = c(#
				population.grouping.variables, #
				sampling.grouping.variables#
			)#
		)#
		# group data to prep for processing by #
		#		population.grouping.variables, #
		#		sampling.grouping.variables, and#
		#		n_sims#
		temp <- dataframe %>% group_by_(.dots = c(#
			population.grouping.variables, #
			sampling.grouping.variables, #
			"n_sims"#
		))#
		# list for saving results#
		C <- vector("list", length(variables))#
		# for each of the population.grouping.variables and sampling.grouping.variables, calculate:#
		#	mean of observed means#
		#	sample size used for those calculations#
		for (i in 1:length(variables)) {#
			C[[i]] <- list()#
			# observed mean#
			C[[i]] <- temp %>%#
				summarise_(#
					mean_of_observed_means = interp(#
						~mean(var, na.rm = TRUE), #
						var = as.name(#
							paste(#
								variables[i],#
								"_mean_observed",#
								sep=""#
							)#
						)#
					),#
					sample_size = interp(#
						~length(var[which(!is.na(var))]), #
						var = as.name(#
							paste(#
								variables[i],#
								"_mean_observed",#
								sep=""#
							)#
						)#
					)#
				) %>%#
			setnames(#
		      	.,#
		      	"mean_of_observed_means",#
		      	paste(#
		      		c(rvar_variables, o_rvar)[i],#
		      		"_mean_of_observed_means",#
		      		sep=""#
				)#
			) %>%#
			setnames(#
		      	.,#
		      	"sample_size",#
		      	paste(#
		      		c(rvar_variables, o_rvar)[i],#
		      		"_mean_of_observed_means_n",#
		      		sep=""#
				)#
			)#
	D <- Reduce(#
		function(x, y) merge(#
			x, y,#
			by=c(#
				population.grouping.variables, #
				sampling.grouping.variables, #
				"n_sims"#
			)#
		),#
		C#
	)#
	dataframe %<>% merge(#
		D, #
		by=c(#
			population.grouping.variables, #
			sampling.grouping.variables,#
			"n_sims"#
		)#
	)#
	return(dataframe)#
}#
#' Calculate Simulation Data Sampling Bias#
#' #
#' @param population_data_summary Summary statistics on the species patch realizations of patches (created by \code{calculateRealizationSummaryStatistics} function).#
#' @param simulation_data Simulation data on sampling of the multiple patch realizations.#
#' @param population.grouping.variables Categorical variables with which to group the population data (e.g., artificial population number if there are more than 1)#
#' @param sampling.grouping.variables Categorical variables with which to group the simulation data (e.g., sampling design used, number of primary samples).#
#' @param ovar Vector of variables for which sampling bias should be estimated.#
#' @param o_rvar Vector of variables for which secondary variables should be estimated. Can be identical to ovar or a subset.#
#' @param rvar Variables for which to use ratio estimators#
#
#' @description#
#
#' @return Dataframe including simulation data summary statistics, including relative bias and mean squared error (MSE) of the mean and variance.#
#
#' @examples#
#' # Create realizations#
#' x_start = 1#
#' x_end = 30#
#' y_start = 1#
#' y_end = 30#
#' n.networks = c(5, 15, 10, 20, 30, 40)#
#' n.realizations = 1#
#' SpeciesInfo = PlotSurveys_season1#
#' Species.Fields = c("Stricta", "Pusilla", "Cactus")#
#' cactus.realizations = createSpeciesPatchRealizations(x_start, x_end,#
#' 	y_start, y_end, buffer=5, n.networks, n.realizations, SpeciesInfo, #
#' 	start.seed=1, Species.Fields)#
#' #
#' # Sample from the realizations#
#' simulations=1#
#' nsamples=c(5,10,20,40)#
#' population <- createPopulation(x_start = 1, x_end = 30, y_start = 1, #
#' 	y_end = 30)#
#' abundance.variables = NULL#
#' occupancy.variables = c(#
#' 	"Stricta",#
#' 	"Pusilla",#
#' 	"Cactus",#
#' 	"CACA_on_Pusilla",#
#' 	"CACA_on_Stricta",#
#' 	"MEPR_on_Pusilla",#
#' 	"MEPR_on_Stricta",#
#' 	"Old_Moth_Evidence_Pusilla",#
#' 	"Old_Moth_Evidence_Stricta"#
#' 	# "Percent_Cover_Pusilla", # how do I do these? they are occupancy nor abundance#
#' 	# "Percent_Cover_Stricta",#
#' 	# "Height_Pusilla",#
#' 	# "Height_Stricta",#
#' )		#
#' patch_data = cactus.realizations#
#' # simulation_data <- sampleSpeciesPatchRealizations(patch_data, simulations, #
#' #	nsamples, population, abundance.variables, occupancy.variables)#
#' #
#' # summary.variables = occupancy.variables#
#' # grouping.variables = c("n.networks", "realization")#
#' # dataset = cactus.realizations#
#' # patch_data_summary <- calculateRealizationSummaryStatistics(dataset, #
#' # 	summary.variables, grouping.variables)#
#' # avar = NULL#
#' @export#
#
calculateSamplingBias <- function(#
	population_data_summary, #
	simulation_data, #
	population.grouping.variables, #
	sampling.grouping.variables,#
	ovar,#
	o_rvar,#
	rvar#
)#
{#
	rvar_variables <- paste(rvar, "_ratio", sep="")#
	. <- n_sims <- A <- B <- C <- D <- E <- I <- G <- H <- NULL#
	A <- merge(#
		population_data_summary, #
		simulation_data, #
		by=population.grouping.variables#
	)#
	# ------------------------------------------------------------------------ ##
	# OCCUPANCY VARIABLES	#
	# ------------------------------------------------------------------------ ##
	B <- A #
	# add number of simulations to dataset#
	n_sims <- B %>% #
		group_by_(.dots = c(#
			population.grouping.variables, #
			sampling.grouping.variables#
		)) %>%#
		summarise(n_sims = n())#
	B %<>% calculateMeanofObservedMeans(dataframe=B, variables=ovar)#
	# ------------------------------------------------------------------------ ##
	# RATIO VARIABLES	#
	# ------------------------------------------------------------------------ ##
	E <- A#
	E %<>% filter(Stricta_mean_observed!=0)#
	E %<>% calculateMeanofObservedMeans(dataframe=B, variables=c(rvar_variables, o_rvar))#
	E %<>% calculatedSquaredDifferences(variables=c(o_rvar, rvar_variables))#
	E %<>% calculateDifferencesinMeans(variables=c(o_rvar, rvar_variables))#
#
	B %<>% calculatedSquaredDifferences(variables=ovar)#
	B %<>% calculateDifferencesinMeans(variables=ovar)#
	# calculate bias and MSE#
	# occupancy variables#
	H <- vector("list", length(ovar))#
	X.grp <- B %>% #
		group_by_(.dots=c(#
			population.grouping.variables, #
			sampling.grouping.variables, #
			"n_sims"#
		)) %>% #
		calculateBiasComponents(., resultslist=H, variables=ovar)#
	Y <- Reduce(#
		function(x, y) merge(#
			x, y,#
			by=c(#
				population.grouping.variables, #
				sampling.grouping.variables, #
				"n_sims"#
			)#
		),#
		X.grp#
	) %>%#
		setnames("n_sims", "ovar_n_sims")#
	# ratio variables#
	H <- vector("list", length(rvar))#
	X.grp <- E %>% #
		group_by_(.dots=c(#
			population.grouping.variables, #
			sampling.grouping.variables, #
			"n_sims"#
		)) %>% #
		calculateBiasComponents(., resultslist=H, variables=rvar_variables)#
	Z <- Reduce(#
		function(x, y) merge(#
			x, y,#
			by=c(#
				population.grouping.variables, #
				sampling.grouping.variables, #
				"n_sims"#
			)#
		),#
		X.grp#
	) %>%#
		setnames("n_sims", "rvar_n_sims")#
	Y %<>% merge(Z, #
		by=c(#
			population.grouping.variables, #
			sampling.grouping.variables#
		),#
		all=T#
	)#
	return(Y)#
}
}
setwd('/Users/KSauby/Documents/Projects/ACS/R')
calculatedSquaredDifferences <- function(dataframe, variables) {#
	# for each simulation and variable, calculate:#
	#	(observed mean - true mean)^2#
	for (i in 1:length(variables)) {#
		dataframe %<>%#
			mutate(#
				observed_minus_true_squared = #
						# observed -#
						(eval(#
							parse(#
								text=paste(#
									variables[i], #
									"_mean_observed", #
									sep=""#
								)#
							)#
						) - #
						# true#
						eval(#
							parse(#
								text = paste(#
								variables[i], #
								"_mean", #
								sep=""#
							)#
						)#
						)#
				)^2#
			) %>%#
			setnames(#
				., #
				"observed_minus_true_squared", #
				paste(#
					variables[i], #
					"_mean_observed_minus_true_squared", #
					sep=""#
				)#
			)#
	}#
	return(dataframe)#
}#
calculateDifferencesinMeans <- function(dataframe, variables) {#
	# for each simulation and variable, calculate:#
	#	observed mean - mean of observed means#
	for (i in 1:length(variables)) {#
		dataframe %<>%#
			mutate(#
				observed_minus_mean_of_observed_means = #
						# (observed -#
						eval(#
							parse(#
								text = paste(#
									variables[i], #
									"_mean_observed", #
									sep=""#
								)#
							)#
						) - #
						# true)#
						eval(#
							parse(#
								text = paste(#
									variables[i], #
									"_mean_of_observed_means", #
									sep=""#
								)#
							)#
						)#
			) %>%#
			setnames(#
				., #
				"observed_minus_mean_of_observed_means", #
				paste(#
					variables[i], #
					"_observed_minus_mean_of_observed_means", #
					sep=""#
				)#
			)#
	}#
	return(dataframe)#
}#
calculateBiasComponents	<- function(dataframe, resultslist, variables) {#
	for (i in 1:length(variables)) {#
		resultslist[[i]] <- list()#
		resultslist[[i]] <- dataframe %>%#
			summarise_(#
				# save true mean#
				mean_RB_true_mean = interp(#
					~var[1], #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean", #
							sep=""#
						)#
					)#
				),#
				# calculate mean of observed means#
				mean_RB_mean_of_observed_means = interp(#
					~mean(var, na.rm = TRUE), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed",#
							sep=""#
						)#
					)#
				),#
				# sample size used to calculate mean of observed means#
				RB_n = interp(#
					~length(var[which(!is.na(var))]), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed",#
							sep=""#
						)#
					)#
				),#
				# calculate MSE#
				MSE_sum_of_observed_minus_true_sqrd = interp(#
					~sum(var, na.rm = TRUE), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed_minus_true_squared",#
							sep=""#
						)#
					)#
				),#
				# sample size used to calculate MSE#
				MSE_n_sims = interp(#
					~length(var[which(!is.na(var))]), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed_minus_true_squared",#
							sep=""#
						)#
					)#
				),#
				# for var_RB: calculate mean of simulated HT variance estimates#
				var_RB_mean_of_var_estimates = interp(#
					~mean(var, na.rm = TRUE), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_var_observed",#
							sep=""#
						)#
					)#
				),#
				# for var_RB: sample size used to calculate mean of simulated HT variance estimates#
				var_RB_mean_of_var_estimates_n = interp(#
					~length(var[which(!is.na(var))]), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_var_observed",#
							sep=""#
						)#
					)#
				),#
				# for var_RB: calculate variance of _mean_observed#
				var_RB_var_of_mean_estimates = interp(#
					~var(variable, na.rm = TRUE), #
					variable = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed",#
							sep=""#
						)#
					)#
				),#
				# for var_RB: calculate sample size used to calculate variance of _mean_observed#
				var_RB_var_of_mean_estimates_n = interp(#
					~length(var[which(!is.na(var))]), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed",#
							sep=""#
						)#
					)#
				)#
			) %>%#
			as.data.frame#
		resultslist[[i]] %<>% #
			mutate(#
				RB = 100 * #
					(mean_RB_mean_of_observed_means - mean_RB_true_mean) / #
					mean_RB_true_mean,#
				MSE = MSE_sum_of_observed_minus_true_sqrd/MSE_n_sims,#
				var_RB = 100 *#
				(var_RB_mean_of_var_estimates - var_RB_var_of_mean_estimates) / #
					var_RB_var_of_mean_estimates,#
				var_RB_n = min(#
					var_RB_mean_of_var_estimates_n, #
					var_RB_var_of_mean_estimates_n#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"mean_RB_true_mean",#
	      		paste(#
	      			variables[i],#
	      			"_true_mean",#
	      			sep=""#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"RB",#
	      		paste(#
	      			variables[i],#
	      			"_mean_RB",#
	      			sep=""#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"MSE",#
	      		paste(#
	      			variables[i],#
	      			"_mean_MSE",#
	      			sep=""#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"var_RB",#
	      		paste(#
	      			variables[i],#
	      			"_var_RB",#
	      			sep=""#
				)#
			) %>%#
			# rename sample size variables#
			setnames(#
	      		.,#
	      		"RB_n",#
	      		paste(#
	      			variables[i],#
	      			"_mean_RB_n",#
	      			sep=""#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"MSE_n_sims",#
	      		paste(#
	      			variables[i],#
	      			"_mean_MSE_n",#
	      			sep=""#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"var_RB_n",#
	      		paste(#
	      			variables[i],#
	      			"_var_RB_n",#
	      			sep=""#
				)#
			) %>%#
			dplyr::select(-c(#
				mean_RB_mean_of_observed_means,#
				MSE_sum_of_observed_minus_true_sqrd,#
				var_RB_mean_of_var_estimates,#
				var_RB_mean_of_var_estimates_n,#
				var_RB_var_of_mean_estimates,#
				var_RB_var_of_mean_estimates_n#
			))#
	}#
	return(resultslist)#
}#
	calculateMeanofObservedMeans <- function(dataframe, variables, nsims) {#
		# add number of simulations to dataset#
		B %<>% merge(#
			n_sims, #
			by = c(#
				population.grouping.variables, #
				sampling.grouping.variables#
			)#
		)#
		# group data to prep for processing by #
		#		population.grouping.variables, #
		#		sampling.grouping.variables, and#
		#		n_sims#
		temp <- dataframe %>% group_by_(.dots = c(#
			population.grouping.variables, #
			sampling.grouping.variables, #
			"n_sims"#
		))#
		# list for saving results#
		C <- vector("list", length(variables))#
		# for each of the population.grouping.variables and sampling.grouping.variables, calculate:#
		#	mean of observed means#
		#	sample size used for those calculations#
		for (i in 1:length(variables)) {#
			C[[i]] <- list()#
			# observed mean#
			C[[i]] <- temp %>%#
				summarise_(#
					mean_of_observed_means = interp(#
						~mean(var, na.rm = TRUE), #
						var = as.name(#
							paste(#
								variables[i],#
								"_mean_observed",#
								sep=""#
							)#
						)#
					),#
					sample_size = interp(#
						~length(var[which(!is.na(var))]), #
						var = as.name(#
							paste(#
								variables[i],#
								"_mean_observed",#
								sep=""#
							)#
						)#
					)#
				) %>%#
			setnames(#
		      	.,#
		      	"mean_of_observed_means",#
		      	paste(#
		      		c(rvar_variables, o_rvar)[i],#
		      		"_mean_of_observed_means",#
		      		sep=""#
				)#
			) %>%#
			setnames(#
		      	.,#
		      	"sample_size",#
		      	paste(#
		      		c(rvar_variables, o_rvar)[i],#
		      		"_mean_of_observed_means_n",#
		      		sep=""#
				)#
			)#
	D <- Reduce(#
		function(x, y) merge(#
			x, y,#
			by=c(#
				population.grouping.variables, #
				sampling.grouping.variables, #
				"n_sims"#
			)#
		),#
		C#
	)#
	dataframe %<>% merge(#
		D, #
		by=c(#
			population.grouping.variables, #
			sampling.grouping.variables,#
			"n_sims"#
		)#
	)#
	return(dataframe)#
}#
#' Calculate Simulation Data Sampling Bias#
#' #
#' @param population_data_summary Summary statistics on the species patch realizations of patches (created by \code{calculateRealizationSummaryStatistics} function).#
#' @param simulation_data Simulation data on sampling of the multiple patch realizations.#
#' @param population.grouping.variables Categorical variables with which to group the population data (e.g., artificial population number if there are more than 1)#
#' @param sampling.grouping.variables Categorical variables with which to group the simulation data (e.g., sampling design used, number of primary samples).#
#' @param ovar Vector of variables for which sampling bias should be estimated.#
#' @param o_rvar Vector of variables for which secondary variables should be estimated. Can be identical to ovar or a subset.#
#' @param rvar Variables for which to use ratio estimators#
#
#' @description#
#
#' @return Dataframe including simulation data summary statistics, including relative bias and mean squared error (MSE) of the mean and variance.#
#
#' @examples#
#' # Create realizations#
#' x_start = 1#
#' x_end = 30#
#' y_start = 1#
#' y_end = 30#
#' n.networks = c(5, 15, 10, 20, 30, 40)#
#' n.realizations = 1#
#' SpeciesInfo = PlotSurveys_season1#
#' Species.Fields = c("Stricta", "Pusilla", "Cactus")#
#' cactus.realizations = createSpeciesPatchRealizations(x_start, x_end,#
#' 	y_start, y_end, buffer=5, n.networks, n.realizations, SpeciesInfo, #
#' 	start.seed=1, Species.Fields)#
#' #
#' # Sample from the realizations#
#' simulations=1#
#' nsamples=c(5,10,20,40)#
#' population <- createPopulation(x_start = 1, x_end = 30, y_start = 1, #
#' 	y_end = 30)#
#' abundance.variables = NULL#
#' occupancy.variables = c(#
#' 	"Stricta",#
#' 	"Pusilla",#
#' 	"Cactus",#
#' 	"CACA_on_Pusilla",#
#' 	"CACA_on_Stricta",#
#' 	"MEPR_on_Pusilla",#
#' 	"MEPR_on_Stricta",#
#' 	"Old_Moth_Evidence_Pusilla",#
#' 	"Old_Moth_Evidence_Stricta"#
#' 	# "Percent_Cover_Pusilla", # how do I do these? they are occupancy nor abundance#
#' 	# "Percent_Cover_Stricta",#
#' 	# "Height_Pusilla",#
#' 	# "Height_Stricta",#
#' )		#
#' patch_data = cactus.realizations#
#' # simulation_data <- sampleSpeciesPatchRealizations(patch_data, simulations, #
#' #	nsamples, population, abundance.variables, occupancy.variables)#
#' #
#' # summary.variables = occupancy.variables#
#' # grouping.variables = c("n.networks", "realization")#
#' # dataset = cactus.realizations#
#' # patch_data_summary <- calculateRealizationSummaryStatistics(dataset, #
#' # 	summary.variables, grouping.variables)#
#' # avar = NULL#
#' @export#
#
calculateSamplingBias <- function(#
	population_data_summary, #
	simulation_data, #
	population.grouping.variables, #
	sampling.grouping.variables,#
	ovar,#
	o_rvar,#
	rvar#
)#
{#
	rvar_variables <- paste(rvar, "_ratio", sep="")#
	. <- n_sims <- A <- B <- C <- D <- E <- I <- G <- H <- NULL#
	A <- merge(#
		population_data_summary, #
		simulation_data, #
		by=population.grouping.variables#
	)#
	# ------------------------------------------------------------------------ ##
	# OCCUPANCY VARIABLES	#
	# ------------------------------------------------------------------------ ##
	B <- A #
	# add number of simulations to dataset#
	n_sims <- B %>% #
		group_by_(.dots = c(#
			population.grouping.variables, #
			sampling.grouping.variables#
		)) %>%#
		summarise(n_sims = n())#
	B %<>% calculateMeanofObservedMeans(dataframe=B, variables=ovar)#
	# ------------------------------------------------------------------------ ##
	# RATIO VARIABLES	#
	# ------------------------------------------------------------------------ ##
	E <- A#
	E %<>% filter(Stricta_mean_observed!=0)#
	E %<>% calculateMeanofObservedMeans(dataframe=B, variables=c(rvar_variables, o_rvar))#
	E %<>% calculatedSquaredDifferences(variables=c(o_rvar, rvar_variables))#
	E %<>% calculateDifferencesinMeans(variables=c(o_rvar, rvar_variables))#
#
	B %<>% calculatedSquaredDifferences(variables=ovar)#
	B %<>% calculateDifferencesinMeans(variables=ovar)#
	# calculate bias and MSE#
	# occupancy variables#
	H <- vector("list", length(ovar))#
	X.grp <- B %>% #
		group_by_(.dots=c(#
			population.grouping.variables, #
			sampling.grouping.variables, #
			"n_sims"#
		)) %>% #
		calculateBiasComponents(., resultslist=H, variables=ovar)#
	Y <- Reduce(#
		function(x, y) merge(#
			x, y,#
			by=c(#
				population.grouping.variables, #
				sampling.grouping.variables, #
				"n_sims"#
			)#
		),#
		X.grp#
	) %>%#
		setnames("n_sims", "ovar_n_sims")#
	# ratio variables#
	H <- vector("list", length(rvar))#
	X.grp <- E %>% #
		group_by_(.dots=c(#
			population.grouping.variables, #
			sampling.grouping.variables, #
			"n_sims"#
		)) %>% #
		calculateBiasComponents(., resultslist=H, variables=rvar_variables)#
	Z <- Reduce(#
		function(x, y) merge(#
			x, y,#
			by=c(#
				population.grouping.variables, #
				sampling.grouping.variables, #
				"n_sims"#
			)#
		),#
		X.grp#
	) %>%#
		setnames("n_sims", "rvar_n_sims")#
	Y %<>% merge(Z, #
		by=c(#
			population.grouping.variables, #
			sampling.grouping.variables#
		),#
		all=T#
	)#
	return(Y)#
}
}
setwd('/Users/KSauby/Documents/Projects/ACS/R')
calculatedSquaredDifferences <- function(dataframe, variables) {#
	# for each simulation and variable, calculate:#
	#	(observed mean - true mean)^2#
	for (i in 1:length(variables)) {#
		dataframe %<>%#
			mutate(#
				observed_minus_true_squared = #
						# observed -#
						(eval(#
							parse(#
								text=paste(#
									variables[i], #
									"_mean_observed", #
									sep=""#
								)#
							)#
						) - #
						# true#
						eval(#
							parse(#
								text = paste(#
								variables[i], #
								"_mean", #
								sep=""#
							)#
						)#
						)#
				)^2#
			) %>%#
			setnames(#
				., #
				"observed_minus_true_squared", #
				paste(#
					variables[i], #
					"_mean_observed_minus_true_squared", #
					sep=""#
				)#
			)#
	}#
	return(dataframe)#
}#
calculateDifferencesinMeans <- function(dataframe, variables) {#
	# for each simulation and variable, calculate:#
	#	observed mean - mean of observed means#
	for (i in 1:length(variables)) {#
		dataframe %<>%#
			mutate(#
				observed_minus_mean_of_observed_means = #
						# (observed -#
						eval(#
							parse(#
								text = paste(#
									variables[i], #
									"_mean_observed", #
									sep=""#
								)#
							)#
						) - #
						# true)#
						eval(#
							parse(#
								text = paste(#
									variables[i], #
									"_mean_of_observed_means", #
									sep=""#
								)#
							)#
						)#
			) %>%#
			setnames(#
				., #
				"observed_minus_mean_of_observed_means", #
				paste(#
					variables[i], #
					"_observed_minus_mean_of_observed_means", #
					sep=""#
				)#
			)#
	}#
	return(dataframe)#
}#
calculateBiasComponents	<- function(dataframe, resultslist, variables) {#
	for (i in 1:length(variables)) {#
		resultslist[[i]] <- list()#
		resultslist[[i]] <- dataframe %>%#
			summarise_(#
				# save true mean#
				mean_RB_true_mean = interp(#
					~var[1], #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean", #
							sep=""#
						)#
					)#
				),#
				# calculate mean of observed means#
				mean_RB_mean_of_observed_means = interp(#
					~mean(var, na.rm = TRUE), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed",#
							sep=""#
						)#
					)#
				),#
				# sample size used to calculate mean of observed means#
				RB_n = interp(#
					~length(var[which(!is.na(var))]), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed",#
							sep=""#
						)#
					)#
				),#
				# calculate MSE#
				MSE_sum_of_observed_minus_true_sqrd = interp(#
					~sum(var, na.rm = TRUE), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed_minus_true_squared",#
							sep=""#
						)#
					)#
				),#
				# sample size used to calculate MSE#
				MSE_n_sims = interp(#
					~length(var[which(!is.na(var))]), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed_minus_true_squared",#
							sep=""#
						)#
					)#
				),#
				# for var_RB: calculate mean of simulated HT variance estimates#
				var_RB_mean_of_var_estimates = interp(#
					~mean(var, na.rm = TRUE), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_var_observed",#
							sep=""#
						)#
					)#
				),#
				# for var_RB: sample size used to calculate mean of simulated HT variance estimates#
				var_RB_mean_of_var_estimates_n = interp(#
					~length(var[which(!is.na(var))]), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_var_observed",#
							sep=""#
						)#
					)#
				),#
				# for var_RB: calculate variance of _mean_observed#
				var_RB_var_of_mean_estimates = interp(#
					~var(variable, na.rm = TRUE), #
					variable = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed",#
							sep=""#
						)#
					)#
				),#
				# for var_RB: calculate sample size used to calculate variance of _mean_observed#
				var_RB_var_of_mean_estimates_n = interp(#
					~length(var[which(!is.na(var))]), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed",#
							sep=""#
						)#
					)#
				)#
			) %>%#
			as.data.frame#
		resultslist[[i]] %<>% #
			mutate(#
				RB = 100 * #
					(mean_RB_mean_of_observed_means - mean_RB_true_mean) / #
					mean_RB_true_mean,#
				MSE = MSE_sum_of_observed_minus_true_sqrd/MSE_n_sims,#
				var_RB = 100 *#
				(var_RB_mean_of_var_estimates - var_RB_var_of_mean_estimates) / #
					var_RB_var_of_mean_estimates,#
				var_RB_n = min(#
					var_RB_mean_of_var_estimates_n, #
					var_RB_var_of_mean_estimates_n#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"mean_RB_true_mean",#
	      		paste(#
	      			variables[i],#
	      			"_true_mean",#
	      			sep=""#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"RB",#
	      		paste(#
	      			variables[i],#
	      			"_mean_RB",#
	      			sep=""#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"MSE",#
	      		paste(#
	      			variables[i],#
	      			"_mean_MSE",#
	      			sep=""#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"var_RB",#
	      		paste(#
	      			variables[i],#
	      			"_var_RB",#
	      			sep=""#
				)#
			) %>%#
			# rename sample size variables#
			setnames(#
	      		.,#
	      		"RB_n",#
	      		paste(#
	      			variables[i],#
	      			"_mean_RB_n",#
	      			sep=""#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"MSE_n_sims",#
	      		paste(#
	      			variables[i],#
	      			"_mean_MSE_n",#
	      			sep=""#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"var_RB_n",#
	      		paste(#
	      			variables[i],#
	      			"_var_RB_n",#
	      			sep=""#
				)#
			) %>%#
			dplyr::select(-c(#
				mean_RB_mean_of_observed_means,#
				MSE_sum_of_observed_minus_true_sqrd,#
				var_RB_mean_of_var_estimates,#
				var_RB_mean_of_var_estimates_n,#
				var_RB_var_of_mean_estimates,#
				var_RB_var_of_mean_estimates_n#
			))#
	}#
	return(resultslist)#
}#
	calculateMeanofObservedMeans <- function(dataframe, variables, nsims) {#
		# add number of simulations to dataset#
		B %<>% merge(#
			n_sims, #
			by = c(#
				population.grouping.variables, #
				sampling.grouping.variables#
			)#
		)#
		# group data to prep for processing by #
		#		population.grouping.variables, #
		#		sampling.grouping.variables, and#
		#		n_sims#
		temp <- dataframe %>% group_by_(.dots = c(#
			population.grouping.variables, #
			sampling.grouping.variables, #
			"n_sims"#
		))#
		# list for saving results#
		C <- vector("list", length(variables))#
		# for each of the population.grouping.variables and sampling.grouping.variables, calculate:#
		#	mean of observed means#
		#	sample size used for those calculations#
		for (i in 1:length(variables)) {#
			C[[i]] <- list()#
			# observed mean#
			C[[i]] <- temp %>%#
				summarise_(#
					mean_of_observed_means = interp(#
						~mean(var, na.rm = TRUE), #
						var = as.name(#
							paste(#
								variables[i],#
								"_mean_observed",#
								sep=""#
							)#
						)#
					),#
					sample_size = interp(#
						~length(var[which(!is.na(var))]), #
						var = as.name(#
							paste(#
								variables[i],#
								"_mean_observed",#
								sep=""#
							)#
						)#
					)#
				) %>%#
			setnames(#
		      	.,#
		      	"mean_of_observed_means",#
		      	paste(#
		      		c(rvar_variables, o_rvar)[i],#
		      		"_mean_of_observed_means",#
		      		sep=""#
				)#
			) %>%#
			setnames(#
		      	.,#
		      	"sample_size",#
		      	paste(#
		      		c(rvar_variables, o_rvar)[i],#
		      		"_mean_of_observed_means_n",#
		      		sep=""#
				)#
			)#
	D <- Reduce(#
		function(x, y) merge(#
			x, y,#
			by=c(#
				population.grouping.variables, #
				sampling.grouping.variables, #
				"n_sims"#
			)#
		),#
		C#
	)#
	dataframe %<>% merge(#
		D, #
		by=c(#
			population.grouping.variables, #
			sampling.grouping.variables,#
			"n_sims"#
		)#
	)#
	return(dataframe)#
}
}
setwd('/Users/KSauby/Documents/Projects/ACS/R')
calculatedSquaredDifferences <- function(dataframe, variables) {#
	# for each simulation and variable, calculate:#
	#	(observed mean - true mean)^2#
	for (i in 1:length(variables)) {#
		dataframe %<>%#
			mutate(#
				observed_minus_true_squared = #
						# observed -#
						(eval(#
							parse(#
								text=paste(#
									variables[i], #
									"_mean_observed", #
									sep=""#
								)#
							)#
						) - #
						# true#
						eval(#
							parse(#
								text = paste(#
								variables[i], #
								"_mean", #
								sep=""#
							)#
						)#
						)#
				)^2#
			) %>%#
			setnames(#
				., #
				"observed_minus_true_squared", #
				paste(#
					variables[i], #
					"_mean_observed_minus_true_squared", #
					sep=""#
				)#
			)#
	}#
	return(dataframe)#
}#
calculateDifferencesinMeans <- function(dataframe, variables) {#
	# for each simulation and variable, calculate:#
	#	observed mean - mean of observed means#
	for (i in 1:length(variables)) {#
		dataframe %<>%#
			mutate(#
				observed_minus_mean_of_observed_means = #
						# (observed -#
						eval(#
							parse(#
								text = paste(#
									variables[i], #
									"_mean_observed", #
									sep=""#
								)#
							)#
						) - #
						# true)#
						eval(#
							parse(#
								text = paste(#
									variables[i], #
									"_mean_of_observed_means", #
									sep=""#
								)#
							)#
						)#
			) %>%#
			setnames(#
				., #
				"observed_minus_mean_of_observed_means", #
				paste(#
					variables[i], #
					"_observed_minus_mean_of_observed_means", #
					sep=""#
				)#
			)#
	}#
	return(dataframe)#
}#
calculateBiasComponents	<- function(dataframe, resultslist, variables) {#
	for (i in 1:length(variables)) {#
		resultslist[[i]] <- list()#
		resultslist[[i]] <- dataframe %>%#
			summarise_(#
				# save true mean#
				mean_RB_true_mean = interp(#
					~var[1], #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean", #
							sep=""#
						)#
					)#
				),#
				# calculate mean of observed means#
				mean_RB_mean_of_observed_means = interp(#
					~mean(var, na.rm = TRUE), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed",#
							sep=""#
						)#
					)#
				),#
				# sample size used to calculate mean of observed means#
				RB_n = interp(#
					~length(var[which(!is.na(var))]), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed",#
							sep=""#
						)#
					)#
				),#
				# calculate MSE#
				MSE_sum_of_observed_minus_true_sqrd = interp(#
					~sum(var, na.rm = TRUE), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed_minus_true_squared",#
							sep=""#
						)#
					)#
				),#
				# sample size used to calculate MSE#
				MSE_n_sims = interp(#
					~length(var[which(!is.na(var))]), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed_minus_true_squared",#
							sep=""#
						)#
					)#
				),#
				# for var_RB: calculate mean of simulated HT variance estimates#
				var_RB_mean_of_var_estimates = interp(#
					~mean(var, na.rm = TRUE), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_var_observed",#
							sep=""#
						)#
					)#
				),#
				# for var_RB: sample size used to calculate mean of simulated HT variance estimates#
				var_RB_mean_of_var_estimates_n = interp(#
					~length(var[which(!is.na(var))]), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_var_observed",#
							sep=""#
						)#
					)#
				),#
				# for var_RB: calculate variance of _mean_observed#
				var_RB_var_of_mean_estimates = interp(#
					~var(variable, na.rm = TRUE), #
					variable = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed",#
							sep=""#
						)#
					)#
				),#
				# for var_RB: calculate sample size used to calculate variance of _mean_observed#
				var_RB_var_of_mean_estimates_n = interp(#
					~length(var[which(!is.na(var))]), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed",#
							sep=""#
						)#
					)#
				)#
			) %>%#
			as.data.frame#
		resultslist[[i]] %<>% #
			mutate(#
				RB = 100 * #
					(mean_RB_mean_of_observed_means - mean_RB_true_mean) / #
					mean_RB_true_mean,#
				MSE = MSE_sum_of_observed_minus_true_sqrd/MSE_n_sims,#
				var_RB = 100 *#
				(var_RB_mean_of_var_estimates - var_RB_var_of_mean_estimates) / #
					var_RB_var_of_mean_estimates,#
				var_RB_n = min(#
					var_RB_mean_of_var_estimates_n, #
					var_RB_var_of_mean_estimates_n#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"mean_RB_true_mean",#
	      		paste(#
	      			variables[i],#
	      			"_true_mean",#
	      			sep=""#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"RB",#
	      		paste(#
	      			variables[i],#
	      			"_mean_RB",#
	      			sep=""#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"MSE",#
	      		paste(#
	      			variables[i],#
	      			"_mean_MSE",#
	      			sep=""#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"var_RB",#
	      		paste(#
	      			variables[i],#
	      			"_var_RB",#
	      			sep=""#
				)#
			) %>%#
			# rename sample size variables#
			setnames(#
	      		.,#
	      		"RB_n",#
	      		paste(#
	      			variables[i],#
	      			"_mean_RB_n",#
	      			sep=""#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"MSE_n_sims",#
	      		paste(#
	      			variables[i],#
	      			"_mean_MSE_n",#
	      			sep=""#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"var_RB_n",#
	      		paste(#
	      			variables[i],#
	      			"_var_RB_n",#
	      			sep=""#
				)#
			) %>%#
			dplyr::select(-c(#
				mean_RB_mean_of_observed_means,#
				MSE_sum_of_observed_minus_true_sqrd,#
				var_RB_mean_of_var_estimates,#
				var_RB_mean_of_var_estimates_n,#
				var_RB_var_of_mean_estimates,#
				var_RB_var_of_mean_estimates_n#
			))#
	}#
	return(resultslist)#
}
setwd('/Users/KSauby/Documents/Projects/ACS/R')
calculatedSquaredDifferences <- function(dataframe, variables) {#
	# for each simulation and variable, calculate:#
	#	(observed mean - true mean)^2#
	for (i in 1:length(variables)) {#
		dataframe %<>%#
			mutate(#
				observed_minus_true_squared = #
						# observed -#
						(eval(#
							parse(#
								text=paste(#
									variables[i], #
									"_mean_observed", #
									sep=""#
								)#
							)#
						) - #
						# true#
						eval(#
							parse(#
								text = paste(#
								variables[i], #
								"_mean", #
								sep=""#
							)#
						)#
						)#
				)^2#
			) %>%#
			setnames(#
				., #
				"observed_minus_true_squared", #
				paste(#
					variables[i], #
					"_mean_observed_minus_true_squared", #
					sep=""#
				)#
			)#
	}#
	return(dataframe)#
}#
calculateDifferencesinMeans <- function(dataframe, variables) {#
	# for each simulation and variable, calculate:#
	#	observed mean - mean of observed means#
	for (i in 1:length(variables)) {#
		dataframe %<>%#
			mutate(#
				observed_minus_mean_of_observed_means = #
						# (observed -#
						eval(#
							parse(#
								text = paste(#
									variables[i], #
									"_mean_observed", #
									sep=""#
								)#
							)#
						) - #
						# true)#
						eval(#
							parse(#
								text = paste(#
									variables[i], #
									"_mean_of_observed_means", #
									sep=""#
								)#
							)#
						)#
			) %>%#
			setnames(#
				., #
				"observed_minus_mean_of_observed_means", #
				paste(#
					variables[i], #
					"_observed_minus_mean_of_observed_means", #
					sep=""#
				)#
			)#
	}#
	return(dataframe)#
}#
calculateBiasComponents	<- function(dataframe, resultslist, variables) {#
	for (i in 1:length(variables)) {#
		resultslist[[i]] <- list()#
		resultslist[[i]] <- dataframe %>%#
			summarise_(#
				# save true mean#
				mean_RB_true_mean = interp(#
					~var[1], #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean", #
							sep=""#
						)#
					)#
				),#
				# calculate mean of observed means#
				mean_RB_mean_of_observed_means = interp(#
					~mean(var, na.rm = TRUE), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed",#
							sep=""#
						)#
					)#
				),#
				# sample size used to calculate mean of observed means#
				RB_n = interp(#
					~length(var[which(!is.na(var))]), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed",#
							sep=""#
						)#
					)#
				),#
				# calculate MSE#
				MSE_sum_of_observed_minus_true_sqrd = interp(#
					~sum(var, na.rm = TRUE), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed_minus_true_squared",#
							sep=""#
						)#
					)#
				),#
				# sample size used to calculate MSE#
				MSE_n_sims = interp(#
					~length(var[which(!is.na(var))]), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed_minus_true_squared",#
							sep=""#
						)#
					)#
				),#
				# for var_RB: calculate mean of simulated HT variance estimates#
				var_RB_mean_of_var_estimates = interp(#
					~mean(var, na.rm = TRUE), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_var_observed",#
							sep=""#
						)#
					)#
				),#
				# for var_RB: sample size used to calculate mean of simulated HT variance estimates#
				var_RB_mean_of_var_estimates_n = interp(#
					~length(var[which(!is.na(var))]), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_var_observed",#
							sep=""#
						)#
					)#
				),#
				# for var_RB: calculate variance of _mean_observed#
				var_RB_var_of_mean_estimates = interp(#
					~var(variable, na.rm = TRUE), #
					variable = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed",#
							sep=""#
						)#
					)#
				),#
				# for var_RB: calculate sample size used to calculate variance of _mean_observed#
				var_RB_var_of_mean_estimates_n = interp(#
					~length(var[which(!is.na(var))]), #
					var = #
					as.name(#
						paste(#
							variables[i],#
							"_mean_observed",#
							sep=""#
						)#
					)#
				)#
			) %>%#
			as.data.frame#
		resultslist[[i]] %<>% #
			mutate(#
				RB = 100 * #
					(mean_RB_mean_of_observed_means - mean_RB_true_mean) / #
					mean_RB_true_mean,#
				MSE = MSE_sum_of_observed_minus_true_sqrd/MSE_n_sims,#
				var_RB = 100 *#
				(var_RB_mean_of_var_estimates - var_RB_var_of_mean_estimates) / #
					var_RB_var_of_mean_estimates,#
				var_RB_n = min(#
					var_RB_mean_of_var_estimates_n, #
					var_RB_var_of_mean_estimates_n#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"mean_RB_true_mean",#
	      		paste(#
	      			variables[i],#
	      			"_true_mean",#
	      			sep=""#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"RB",#
	      		paste(#
	      			variables[i],#
	      			"_mean_RB",#
	      			sep=""#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"MSE",#
	      		paste(#
	      			variables[i],#
	      			"_mean_MSE",#
	      			sep=""#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"var_RB",#
	      		paste(#
	      			variables[i],#
	      			"_var_RB",#
	      			sep=""#
				)#
			) %>%#
			# rename sample size variables#
			setnames(#
	      		.,#
	      		"RB_n",#
	      		paste(#
	      			variables[i],#
	      			"_mean_RB_n",#
	      			sep=""#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"MSE_n_sims",#
	      		paste(#
	      			variables[i],#
	      			"_mean_MSE_n",#
	      			sep=""#
				)#
			) %>%#
			setnames(#
	      		.,#
	      		"var_RB_n",#
	      		paste(#
	      			variables[i],#
	      			"_var_RB_n",#
	      			sep=""#
				)#
			) %>%#
			dplyr::select(-c(#
				mean_RB_mean_of_observed_means,#
				MSE_sum_of_observed_minus_true_sqrd,#
				var_RB_mean_of_var_estimates,#
				var_RB_mean_of_var_estimates_n,#
				var_RB_var_of_mean_estimates,#
				var_RB_var_of_mean_estimates_n#
			))#
	}#
	return(resultslist)#
}#
calculateMeanofObservedMeans <- function(dataframe, variables, nsims) {#
	# add number of simulations to dataset#
	B %<>% merge(#
		n_sims, #
		by = c(#
			population.grouping.variables, #
			sampling.grouping.variables#
		)#
	)#
	# group data to prep for processing by #
	#		population.grouping.variables, #
	#		sampling.grouping.variables, and#
	#		n_sims#
	temp <- dataframe %>% group_by_(.dots = c(#
		population.grouping.variables, #
		sampling.grouping.variables, #
		"n_sims"#
	))#
	# list for saving results#
	C <- vector("list", length(variables))#
	# for each of the population.grouping.variables and sampling.grouping.variables, calculate:#
	#	mean of observed means#
	#	sample size used for those calculations#
	for (i in 1:length(variables)) {#
		C[[i]] <- list()#
		# observed mean#
		C[[i]] <- temp %>%#
			summarise_(#
				mean_of_observed_means = interp(#
					~mean(var, na.rm = TRUE), #
					var = as.name(#
						paste(#
							variables[i],#
							"_mean_observed",#
							sep=""#
						)#
					)#
				),#
				sample_size = interp(#
					~length(var[which(!is.na(var))]), #
					var = as.name(#
						paste(#
							variables[i],#
							"_mean_observed",#
							sep=""#
						)#
					)#
				)#
			) %>%#
			setnames(#
		      	.,#
		      	"mean_of_observed_means",#
		      	paste(#
		      		c(rvar_variables, o_rvar)[i],#
		      		"_mean_of_observed_means",#
		      		sep=""#
				)#
			) %>%#
			setnames(#
		      	.,#
		      	"sample_size",#
		      	paste(#
		      		c(rvar_variables, o_rvar)[i],#
		      		"_mean_of_observed_means_n",#
		      		sep=""#
				)#
			)#
		D <- Reduce(#
			function(x, y) merge(#
				x, y,#
				by=c(#
					population.grouping.variables, #
					sampling.grouping.variables, #
					"n_sims"#
				)#
			),#
			C#
		)#
		dataframe %<>% merge(#
			D, #
			by=c(#
				population.grouping.variables, #
				sampling.grouping.variables,#
				"n_sims"#
			)#
		)#
	}#
	return(dataframe)#
}
setwd('/Users/KSauby/Documents/Projects/ACS/R')
rvar_variables <- paste(rvar, "_ratio", sep="")#
	. <- n_sims <- A <- B <- C <- D <- E <- I <- G <- H <- NULL#
	A <- merge(#
		population_data_summary, #
		simulation_data, #
		by=population.grouping.variables#
	)
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
population_data_summary	= patch_data_summary_wide
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
# -----------------------------------------------------------------------------##
# ABUNDANCE VARIABLES#
# -----------------------------------------------------------------------------##
# -----------------------------------------------------------------------------##
# OCCUPANCY VARIABLES#
# -----------------------------------------------------------------------------##
ovar <- c(#
	"Stricta",#
	"Pusilla",#
	"Cactus"#
)#
# -----------------------------------------------------------------------------##
# RATIO VARIABLES#
# -----------------------------------------------------------------------------##
rvar <- c(#
	"MEPR_on_Stricta",#
	"CACA_on_Stricta",#
	"Percent_Cover_Stricta",#
	"Height_Stricta",#
	#"Old_Moth_Evidence_Pusilla",#
	"Old_Moth_Evidence_Stricta"#
)#
#
# "Percent_Cover_Pusilla",#
# "Height_Pusilla",#
# )
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
# calculate realization summary statistics#
patch_data_summary <- CactusRealizationSummary#
#
### ADD LEVELS TO PATCH_DATA BASED ON THIS SUMMARY#
#
# LEVELS OF CACTUS OCCUPANCY#
Cactus_mean <- patch_data_summary[[2]] %>% filter(variable=="Cactus") %$% Mean#
patch_data$population.for.plotting <- patch_data$population#
levels(patch_data$population.for.plotting) <- c(#
	expression(atop(#
		'Population 1',#
		'Cactus Occupancy'~mu[C]~' = 0.032'#
	)), #
	expression(atop(#
		'Population 2',#
		mu[C]~' = 0.064'#
	)), #
	expression(atop(#
		'Population 3',#
		mu[C]~' = 0.098'#
	)), #
	expression(atop(#
		'Population 4',#
		mu[C]~' = 0.144'#
	)), #
	expression(atop(#
		'Population 5',#
		mu[C]~' = 0.157'#
	)), #
	expression(atop(#
		'Population 6',#
		mu[C]~' = 0.24'#
	))#
)#
#
# LEVELS OF STRICTA OCCUPANCY#
patch_data$population.for.plotting -> patch_data$stricta_occ#
Stricta_mean <- patch_data_summary[[2]] %>% filter(variable=="Stricta") %$% Mean#
#
levels(patch_data$stricta_occ) <- c(#
	expression(atop(#
		'Population 1',#
		italic("O. stricta")*","~mu[s]~' = 0.019'#
	)), #
	expression(atop(#
		'Population 2',#
		mu[s]~' = 0.047'#
	)), #
	expression(atop(#
		'Population 3',#
		mu[s]~' = 0.063'#
	)), #
	expression(atop(#
		'Population 4',#
		mu[s]~' = 0.091'#
	)), #
	expression(atop(#
		'Population 5',#
		mu[s]~' = 0.111'#
	)), #
	expression(atop(#
		'Population 6',#
		mu[s]~' = 0.152'#
	))#
)#
#
# LEVELS OF PUSILLA OCCUPANCY#
patch_data$population.for.plotting -> patch_data$pusilla_occ#
Pusilla_mean <- patch_data_summary[[2]] %>% filter(variable=="Pusilla") %$% Mean#
levels(patch_data$pusilla_occ) <- c(#
	expression(atop(#
		'Population 1',#
		italic("O. drummondii")*","~mu[d]~' = 0.014'#
	)), #
	expression(atop(#
		'Population 2',#
		mu[d]~' = 0.03'#
	)), #
	expression(atop(#
		'Population 3',#
		mu[d]~' = 0.042'#
	)), #
	expression(atop(#
		'Population 4',#
		mu[d]~' = 0.078'#
	)), #
	expression(atop(#
		'Population 5',#
		mu[d]~' = 0.053'#
	)), #
	expression(atop(#
		'Population 6',#
		mu[d]~' = 0.11'#
	))#
) #
patch_data %<>% mutate(#
	Stricta_vars = paste(Stricta, CACA_on_Stricta, MEPR_on_Stricta),#
	Pusilla_vars = paste(Pusilla, CACA_on_Pusilla, MEPR_on_Pusilla),#
	Cactus_vars = paste(Pusilla, Stricta),#
	Cactus_occ = Cactus,#
	Moth_damage_vars = paste(#
		Cactus,#
		Old_Moth_Evidence_Pusilla,#
		Old_Moth_Evidence_Stricta#
	)#
)#
patch_data$Cactus_occ %<>% as.factor#
levels(patch_data$Cactus_occ) <- c("Cacti Absent", "Cacti Present")#
#
patch = patch_data %>% filter(population==unique(patch_data$population)[3])#
#
patch_data_stricta <- patch_data %>% filter(Stricta_vars!="0 0 0")#
patch_data_stricta$Stricta_vars %<>% as.factor#
patch_data_pusilla <- patch_data %>% filter(Pusilla_vars!="0 0 0")#
patch_data_pusilla$Pusilla_vars %<>% as.factor#
patch_data_cactus <- patch_data %>% filter(Cactus_vars!="0 0")#
patch_data_cactus$Cactus_vars %<>% as.factor#
patch_data_moth_damage <- patch_data %>% filter(Moth_damage_vars!="0 0 0")#
patch_data_moth_damage$Moth_damage_vars %<>% as.factor#
# Optimal m_threshold#
#
expand.grid.df <- function(...) Reduce(function(...) merge(..., by=NULL), list(...))#
patch_data_summary_f_max <- expand.grid.df(patch_data_summary[[1]], f_max = 1:3) %>%#
setnames("y", "f_max")#
#
patch_data_summary_f_max$optimal_m_threshold <- c(#
	3,3,3,4,3,4,#
	5,7,7,8,7,9,#
	7,10,10,12,11,14#
)
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
simdata_SRSWOR_only <- rbind.fill(#
	sim.12Nov16, # sample sizes from RACS sampling#
	sim.12Nov16_ACS # sample sizes from ACS sampling, NOT included in RACS#
	)#
simdata_SRSWOR_only %$% unique(Plots)#
#simdata_SRSWOR_only %<>% dplyr::select(-Plots)#
levels(simdata_SRSWOR_only$n.networks) <- c("5","10","15","20","30","40")#
#-----------------------------------------------------------------------------##
simdata <- rbind.fill(#
	sim.6Apr16,#
	sim.6Apr16.2,#
	sim.6Apr16.3#
) %>%#
dplyr::select(-c(#
	Percent_Cover_Pusilla_mean_observed,#
	Percent_Cover_Stricta_mean_observed,#
	Height_Pusilla_mean_observed,#
	Height_Stricta_mean_observed,#
	Percent_Cover_Pusilla_var_observed,#
	Percent_Cover_Stricta_var_observed,#
	Height_Pusilla_var_observed,   #
	Height_Stricta_var_observed#
)) %>%#
rbind.fill(#
	sim.27June16,#
	sim.27June16_1,#
	sim.27June16_2#
)#
#
colnames(simdata)[names(simdata) == "Restricted"] <- "SamplingDesign"#
#
unique(simdata$SamplingDesign)#
simdata %<>% mutate(SamplingDesign="ACS")#
#simdata %<>% filter(Plots == "Horvitz Thompson Mean (All Plots)") %>% dplyr::select(-Plots)#
simdata$n.networks %<>% as.factor#
#-----------------------------------------------------------------------------##
simdata_restricted <- rbind.fill(	#
	sim.5Apr16.RACS,#
	sim.5Apr16.RACS.2,#
	sim.5Apr16.RACS.3,#
	sim.5Apr16.RACS.4,#
	sim.5Apr16.RACS.5,#
	sim.5Apr16.RACS.6,#
	sim.5Apr16.RACS.7#
) %>%#
# I Removed these because I had calculated them incorrectly?#
# remove height and percent cover since I did not calculate those correctly#
dplyr::select(-c(#
	Percent_Cover_Pusilla_mean_observed,#
	Percent_Cover_Stricta_mean_observed,#
	Height_Pusilla_mean_observed,#
	Height_Stricta_mean_observed,#
	Percent_Cover_Pusilla_var_observed,#
	Percent_Cover_Stricta_var_observed,#
	Height_Pusilla_var_observed,   #
	Height_Stricta_var_observed#
)) %>%#
rbind.fill(#
	sim.16June16, #
	sim.16June16.2, #
	sim.16June16.3,#
	sim.16June16.4,#
	sim.16June16.5#
)#
colnames(simdata_restricted)[names(simdata_restricted) == "Restricted"] <- "SamplingDesign"#
#
unique(simdata_restricted$SamplingDesign)#
simdata_restricted %<>% mutate(SamplingDesign="RACS")#
#simdata_restricted %<>% filter(Plots == "Horvitz Thompson Mean (All Plots)") %>% dplyr::select(-Plots)#
simdata_restricted$n.networks %<>% as.factor#
simdata_all <- rbind.fill(#
	simdata_restricted,#
	simdata#
)#
#
colnames(simdata_all)[names(simdata_all) == "CACA_on_Stricta_mean_observed"] <- "CACA_on_Stricta_ratio_mean_observed"#
#
colnames(simdata_all)[names(simdata_all) == "CACA_on_Stricta_var_observed"] <- "CACA_on_Stricta_ratio_var_observed"#
#
colnames(simdata_all)[names(simdata_all) == "MEPR_on_Stricta_mean_observed"] <- "MEPR_on_Stricta_ratio_mean_observed"#
#
colnames(simdata_all)[names(simdata_all) == "MEPR_on_Stricta_var_observed"] <- "MEPR_on_Stricta_ratio_var_observed"#
#
colnames(simdata_all)[names(simdata_all) == "Old_Moth_Evidence_Pusilla_mean_observed"] <- "Old_Moth_Evidence_Pusilla_ratio_mean_observed"#
#
colnames(simdata_all)[names(simdata_all) == "Old_Moth_Evidence_Pusilla_var_observed"] <- "Old_Moth_Evidence_Pusilla_ratio_var_observed"#
#
colnames(simdata_all)[names(simdata_all) == "Old_Moth_Evidence_Stricta_mean_observed"] <- "Old_Moth_Evidence_Stricta_ratio_mean_observed"#
#
colnames(simdata_all)[names(simdata_all) == "Old_Moth_Evidence_Stricta_var_observed"] <- "Old_Moth_Evidence_Stricta_ratio_var_observed"#
#
colnames(simdata_all)[names(simdata_all) == "Percent_Cover_Stricta_mean_observed"] <- "Percent_Cover_Stricta_ratio_mean_observed"#
#
colnames(simdata_all)[names(simdata_all) == "Percent_Cover_Stricta_var_observed"] <- "Percent_Cover_Stricta_ratio_var_observed"#
#
colnames(simdata_all)[names(simdata_all) == "Height_Stricta_mean_observed"] <- "Height_Stricta_ratio_mean_observed"#
#
colnames(simdata_all)[names(simdata_all) == "Height_Stricta_var_observed"] <- "Height_Stricta_ratio_var_observed"#
#
colnames(simdata_all)[names(simdata_all) == "n.networks"] <- "population"#
#
simdata_all$population %<>% as.factor()#
levels(simdata_all$population) <- 1:6#
setwd("/Users/KSauby/Documents/Projects/ACSampling_project")#
	cache("simdata_restricted")	#
	cache("simdata")	#
	cache("simdata_all")
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
population_data_summary	= patch_data_summary_wide
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
population.grouping.variables	<- c("population")#
sampling.grouping.variables <- c("N.SRSWOR.plots", "SamplingDesign", "Plots")#
statistics 			<- c("mean", "var")#
ratio.statistics	<- c("mean")#
#
patch_data_summary_wide <- createWidePopulationSummaryStatistics(#
	PopulationSummaryStatistics = patch_data_summary,#
	ovar = ovar,#
	rvar = rvar#
)
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
population_data_summary	= patch_data_summary_wide
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
simulation_data		= simdata_all
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
o_rvar			= "Stricta"
setwd('/Users/KSauby/Documents/Projects/ACS/R')
rvar_variables <- paste(rvar, "_ratio", sep="")#
	. <- n_sims <- A <- B <- C <- D <- E <- I <- G <- H <- NULL#
	A <- merge(#
		population_data_summary, #
		simulation_data, #
		by=population.grouping.variables#
	)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
# ------------------------------------------------------------------------ ##
	B <- A #
	# add number of simulations to dataset#
	n_sims <- B %>% #
		group_by_(.dots = c(#
			population.grouping.variables, #
			sampling.grouping.variables#
		)) %>%#
		summarise(n_sims = n())#
	B %<>% calculateMeanofObservedMeans(dataframe=B, variables=ovar)#
	# ------------------------------------------------------------------------ ##
	# RATIO VARIABLES	#
	# ------------------------------------------------------------------------ ##
	E <- A
setwd('/Users/KSauby/Documents/Projects/ACS/R')
B <- A #
	# add number of simulations to dataset#
	n_sims <- B %>% #
		group_by_(.dots = c(#
			population.grouping.variables, #
			sampling.grouping.variables#
		)) %>%#
		summarise(n_sims = n())
setwd('/Users/KSauby/Documents/Projects/ACS/R')
variables=ovar
setwd('/Users/KSauby/Documents/Projects/ACS/R')
dataframe=B
setwd('/Users/KSauby/Documents/Projects/ACS/R')
B %<>% merge(#
		n_sims, #
		by = c(#
			population.grouping.variables, #
			sampling.grouping.variables#
		)#
	)#
	# group data to prep for processing by #
	#		population.grouping.variables, #
	#		sampling.grouping.variables, and#
	#		n_sims#
	temp <- dataframe %>% group_by_(.dots = c(#
		population.grouping.variables, #
		sampling.grouping.variables, #
		"n_sims"#
	))#
	# list for saving results#
	C <- vector("list", length(variables))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
rvar_variables <- paste(rvar, "_ratio", sep="")#
	. <- n_sims <- A <- B <- C <- D <- E <- I <- G <- H <- NULL#
	A <- merge(#
		population_data_summary, #
		simulation_data, #
		by=population.grouping.variables#
	)#
	# ------------------------------------------------------------------------ ##
	# OCCUPANCY VARIABLES	#
	# ------------------------------------------------------------------------ ##
	B <- A #
	# add number of simulations to dataset#
	n_sims <- B %>% #
		group_by_(.dots = c(#
			population.grouping.variables, #
			sampling.grouping.variables#
		)) %>%#
		summarise(n_sims = n())
setwd('/Users/KSauby/Documents/Projects/ACS/R')
B <- A #
	# add number of simulations to dataset#
	B %<>% #
		group_by_(.dots = c(#
			population.grouping.variables, #
			sampling.grouping.variables#
		)) %>%#
		mutate(n_sims = n())
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp <- dataframe %>% group_by_(.dots = c(#
		population.grouping.variables, #
		sampling.grouping.variables, #
		"n_sims"#
	))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
dataframe=B
setwd('/Users/KSauby/Documents/Projects/ACS/R')
variables=ovar

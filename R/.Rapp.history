21.4*.813
21.4 -21.4*.813
library(lubridaste)
library(lubrida=te)
library(lubridate)
-v
install.packages("rgeos", repos="http://R-Forge.R-project.org")#
require(rgeos)
library(rgeos)
require(rgeos)
library(rgeos)
install.packages("rgdal", repos="http://R-Forge.R-project.org")#
require(rgdal)
R CMD INSTALL ~/Downloads/rgdal_0.9-1.tar.gz --configure-args='--with-gdal-config=/Library/Frameworks/GDAL.framework/Programs/gdal-config#
 --with-proj-include=/Library/Frameworks/PROJ.framework/Headers#
 --with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib'
R CMD INSTALL ~/Downloads/rgdal_0.9-1.tar.gz --configure-args='--with-gdal-config=/Library/Frameworks/GDAL.framework/Programs/gdal-config--with-proj-include=/Library/Frameworks/PROJ.framework/Headers--with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib'
library(lme3)
library(lme4)
300/241
.244*30
1.25*300
1.25*240
7*12
7849-7527
322/1353
8028-7527
501/1353
8028-7957
1353-501
852/71
7956-7878
8176-8029
8176-8092
250*.75
250*.25
42*2 + 17*2
118/19
21/6.2
59.5*.75
59.5*.5 + 59.5
71/12
597/80
597/8
432/8
15*8 + 9*3
?seq_len
7.25/3
7.25/4
for(i in 0:9){x=cos(2*pi/10*i);y=x+1;z=(y-2)*22;pie(c(y,8-y),col=c(0,7),init.angl=135-z,bo=F,la=NA)}
install.packages("ProjectTemplate")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("data.table")
install.packages("corrgram")
install.packages("survival")
install.packages("shapefiles")
install.packages("rgdal")
install.packages("PBSmapping")
install.packages("sp")
install.packages("gdistance")
install.packages("chron")
install.packages("unmarked")
install.packages("lme4")
install.packages("rgeos", repos="http://R-Forge.R-project.org", type="source")#
require(rgeos)
install.packages('rgdal',repos="http://www.stats.ox.ac.uk/pub/RWin")
library(rgdal)
install.packages("http://cran.r-project.org/src/contrib/rgdal_0.9-1.tar.gz", repos = NULL, type="source", configure.args = "--with-gdal-config=/Library/Frameworks/GDAL.framework/Versions/1.10/unix/bin/gdal-config --with-proj-include=/Library/Frameworks/PROJ.framework/unix/include --with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib")
18/1.618
189+114
library(lubridate)
library(magrittr)
seasons <- data.frame(#
	   SE = as.POSIXct(c("2009-3-20", "2010-3-20", "2011-3-20", "2012-3-20", #
            "2013-3-20", "2014-3-20"), format="%Y-%m-%d"),#
	   SS = as.POSIXct(c("2009-6-21", "2010-6-21", "2011-6-21", "2012-6-20",#
            "2013-6-20", "2014-6-20"), format="%Y-%m-%d"),#
	   FE = as.POSIXct(c("2009-9-22", "2010-9-23", "2011-9-23", "2012-9-22",#
            "2013-9-22", "2014-9-22"), format="%Y-%m-%d"),#
	   WS = as.POSIXct(c("2009-12-21", "2010-12-21", "2011-12-22", "2012-12-21", #
            "2013-12-21", "2014-12-21"), format="%Y-%m-%d")#
    )#
#
    assignSeason <- function(dat, SeasonStarts=seasons) {#
	    dat %<>% mutate(#
		    Season = lapply(Date,#
				function(x) {#
					findInterval(#
						x, #
						SeasonStarts[which(year(x)==year(SeasonStarts$WS)), ]#
					)#
				}#
			) %>% unlist	#
		)#
	    dat[which(dat$Season==0 | dat$Season==4), ]$Season 	<- "Winter"#
	    dat[which(dat$Season==1), ]$Season 					<- "Spring"#
	    dat[which(dat$Season==2), ]$Season 					<- "Summer"#
	    dat[which(dat$Season==3), ]$Season 					<- "Fall"#
	    return(dat)#
    }
dat = data.frame(#
	    Date = as.POSIXct(strptime(as.Date("2011-12-01", format = "%Y-%m-%d") + #
            (0:10)*30, format="%Y-%m-%d" ))#
    )#
    dat %>% assignSeason
library(dplyr)
dat = data.frame(#
	    Date = as.POSIXct(strptime(as.Date("2011-12-01", format = "%Y-%m-%d") + #
            (0:10)*30, format="%Y-%m-%d" ))#
    )#
    dat %>% assignSeason
library(devtoolks)
library(devtools)
?install_github
devtools::install_github("ksauby/ACSampling", auth_token="2ab30a602e52fae481f4249cc25e892c0a9ccfc7", subdir="/code/Restricted_ACS_Simulations/ACSampling", repos=NULL)
devtools::install_github("ksauby/ACSampling", auth_token="2794c3f10db92f525181a0b1f6c19064fe3a2ef3", subdir="/code/Restricted_ACS_Simulations/ACSampling", repos=NULL)
devtools::install("~/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="~/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="~/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install_local(path="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
library(devtools)
devtools::install_local(path="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
install.packages("~/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
??limit
37-13
24/37
37-13
26/37
25/37
23/37
29/37
30/37
22/37
30/37
29/37
28/37
27/37
35/37
30/37
29/37
26/37
26/37 - .6757
28/37
30/37
29/37
37-12
25/37
219*.8
219*.8 - 17
26/3
17/900
42/900
49/900
setwd('/Users/KSauby/Documents/Projects/ACSampling_project')
library(ProjectTemplate)#
#
# when working on a Windows computer#
# setwd("C:/Users/KSauby/Dropbox/gradschool/Research/Projects/sampling")#
#
# load project#
load.project()
library(ACSampling)
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
test_that("createSRSWOR, Does the function work when setting the seed for random sampling?", {#
	data(Thompson1990Figure1Population)#
	Z <- createSRS(Thompson1990Figure1Population, 10, seed=26)#
	expect_that(#
		dim(Z[which(Z$y_value==2), ])[1],#
		equals(1)#
	)#
})#
test_that("createSRSWOR, Does the function work without setting the seed for random sampling?", {#
	Z <- createSRS(Thompson1990Figure1Population, 10)#
	expect_that(#
		dim(Z)[1],#
		equals(10)#
	)#
})#
test_that("createSRSWOR, Does the function work for without replacement sampling?", {#
	Z <- createSRS(Thompson1990Figure1Population, 10)#
	expect_that(#
		dim(Z[which(Z$Sampling=="SRSWOR"), ])[1],#
		equals(10)#
	)#
})#
test_that("createSRSWOR, Does the function work for with replacement sampling?", {#
	Z <- createSRS(Thompson1990Figure1Population, 10, wreplacement=T)#
	expect_that(#
		dim(Z[which(Z$Sampling=="SRSWR"), ])[1],#
		equals(10)#
	)#
})#
test_that("createACS, Does the function work when providing the seed and without providing the initial sample? Example 1: no adaptive cluster sampling takes place.", {#
	data(Thompson1990Figure1Population)#
	Z <- createACS(Thompson1990Figure1Population, 10, "y_value", seed=2)#
	expect_that(#
		dim(Z[which(Z$y_value > 0), ])[1],#
		equals(0)#
	)#
})#
test_that("createACS, Does the function work when providing the seed and without providing the initial sample? Example 2: adaptive cluster sampling takes place", {#
	Z <- createACS(Thompson1990Figure1Population, 10, "y_value", seed=26)#
	expect_that(#
		dim(Z[which(Z$y_value > 0), ])[1],#
		equals(11)#
	)#
})#
test_that("createACS, Does the function work when providing the initial sample?", {#
	S <- createSRS(Thompson1990Figure1Population, 10, seed=2)#
	S[5, c("x", "y")] <- c(10,6)#
	init <- S[, c("x", "y")]#
	Z <- createACS(Thompson1990Figure1Population, 10, "y_value", #
		initial_sample=init) #
	expect_that(#
		dim(Z[which(Z$y_value > 0), ])[1],#
		equals(11)#
	)#
})#
test_that("createACS, Are y-values of edge units equal to 0?", {#
	expect_that(#
		unique(Z[which(Z$Sampling == "Edge"), ]$y_value),#
		equals(0)#
	)#
})#
test_that("createACS, Are m-values of edge units 0?", {#
	expect_that(#
		unique(Z[which(Z$Sampling == "Edge"), ]$m),#
		equals(0)#
	)#
})#
test_that("createACS, Does the function work when no seed or initial sample is provided?", {#
	Z <- createACS(Thompson1990Figure1Population, 10, "y_value")#
	expect_gte(#
		dim(Z)[1],#
		10#
	)#
})
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
createSRS(Thompson1990Figure1Population, 10, seed=26)
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
createACS(Thompson1990Figure1Population, 10, "y_value", seed=2)#
	expect_that(#
		dim(Z[which(Z$y_value > 0), ])[1],#
		equals(0)#
	)
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
Z <- createACS(Thompson1990Figure1Population, 10, "y_value", seed=26)
Z
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
expect_that(#
		unique(Z[which(Z$Sampling == "Edge"), ]$y_value),#
		equals(0)#
	)
Z[duplicated(Z), ]
Z[duplicated(Z), ] %>% dim
Z = rbind(Z, Z[1, ])
Z
Z[duplicated(Z), ] %>% dim
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
test_that("createACS, Are there duplicates units in the sample?", {#
	Z <- createACS(Thompson1990Figure1Population, 10, "y_value", seed=26)#
	expect_that(#
		dim(Z[duplicated(Z), ])[1],#
		equals(0)#
	)
)
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
test_that("createACS, Are there duplicates units in the sample?", {#
	Z <- createACS(Thompson1990Figure1Population, 10, "y_value", seed=26)#
	expect_that(#
		dim(Z[duplicated(Z), ])[1],#
		equals(0)#
	)#
})
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
dim(Z[duplicated(Z), ])[1]
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
Z <- createACS(Thompson1990Figure1Population, 10, "y_value", seed=26)
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
dim(Z[duplicated(Z), ])[1]
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
test_that("createACS, Are there duplicates units in the sample?", {#
	Z <- createACS(Thompson1990Figure1Population, 10, "y_value", seed=26)#
	expect_that(#
		dim(Z[duplicated(Z), ])[1],#
		equals(0)#
	)#
})
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
data(Thompson1990Figure1Population)#
	Z <- createRACS(Thompson1990Figure1Population, 10, "y_value", seed=2)#
	expect_that(#
		dim(Z[which(Z$y_value > 0), ])[1],#
		equals(0)#
	)
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
test_that("createRACS, Does the function work when providing the seed and without providing the initial sample? Example 2: adaptive cluster sampling takes place", {#
	Z <- createRACS(Thompson1990Figure1Population, 10, "y_value", seed=26)#
	expect_that(#
		dim(Z[which(Z$y_value > 0), ])[1],#
		equals(11)#
	)
)
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
test_that("createRACS, Does the function work when providing the seed and without providing the initial sample? Example 2: adaptive cluster sampling takes place", {#
	Z <- createRACS(Thompson1990Figure1Population, 10, "y_value", seed=26)#
	expect_that(#
		dim(Z[which(Z$y_value > 0), ])[1],#
		equals(11)#
	)#
})
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
Z <- createRACS(Thompson1990Figure1Population, 10, "y_value", seed=26)
Z
Z %>% arrange(Sampling)
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
test_that("createRACS, Does the function work when providing the seed and without providing the initial sample? Example 2: adaptive cluster sampling takes place", {#
	Z <- createRACS(Thompson1990Figure1Population, 10, "y_value", seed=26)#
	expect_that(#
		dim(Z[which(Z$y_value > 0), ])[1],#
		equals(4)#
	)#
})
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
S <- createSRS(Thompson1990Figure1Population, 10, seed=2)#
	S[5, c("x", "y")] <- c(10,6)#
	init <- S[, c("x", "y")]#
	Z <- createRACS(Thompson1990Figure1Population, 10, "y_value", #
		initial_sample=init) #
	expect_that(#
		dim(Z[which(Z$y_value > 0), ])[1],#
		equals(11)#
	)#
})
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
test_that("createRACS, Does the function work when providing the initial sample?", {#
	S <- createSRS(Thompson1990Figure1Population, 10, seed=2)#
	S[5, c("x", "y")] <- c(10,6)#
	init <- S[, c("x", "y")]#
	Z <- createRACS(Thompson1990Figure1Population, 10, "y_value", #
		initial_sample=init) #
	expect_that(#
		dim(Z[which(Z$y_value > 0), ])[1],#
		equals(11)#
	)#
})
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
test_that("createRACS, Are y-values of edge units equal to 0?", {#
	Z <- createRACS(Thompson1990Figure1Population, 10, "y_value", seed=26)#
	expect_that(#
		unique(Z[which(Z$Sampling == "Edge"), ]$y_value),#
		equals(0)#
	)#
})
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
test_that("createRACS, Are m-values of edge units 0?", {#
	Z <- createRACS(Thompson1990Figure1Population, 10, "y_value", seed=26)#
	expect_that(#
		unique(Z[which(Z$Sampling == "Edge"), ]$m),#
		equals(0)#
	)#
})
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
test_that("createRACS, Does the function work when no seed or initial sample is provided?", {#
	Z <- createRACS(Thompson1990Figure1Population, 10, "y_value")#
	expect_gte(#
		dim(Z)[1],#
		10#
	)#
})
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
test_that("createRACS, Are there duplicates units in the sample?", {#
	Z <- createRACS(Thompson1990Figure1Population, 10, "y_value", seed=26)#
	expect_that(#
		dim(Z[duplicated(Z), ])[1],#
		equals(0)#
	)#
})
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
S <- createSRS(Thompson1990Figure1Population, 10, seed=2)#
	S[5, c("x", "y")] <- c(10,6)#
	init <- S[, c("x", "y")]
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
init
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
Z <- createRACS(Thompson1990Figure1Population, 10, "y_value", #
		initial_sample=init)
population=Thompson1990Figure1Population;n1=10;y_variable="y_value";initial_sample=init
setwd('/Users/KSauby/Documents/Projects/ACS/R')
y_value <- x <- y <- Sampling <- NetworkID <- m <- everything <- NULL#
	if (is.data.frame(initial_sample)) {#
		S = merge(population, initial_sample, all.y=TRUE) 	#
		S$Sampling <- "Primary Sample"#
	} else {#
		if (!is.na(seed)) {set.seed(seed)}#
		S <- createSRS(population, n1)#
	}
setwd('/Users/KSauby/Documents/Projects/ACS/R')
Networks <- S %>% #
		filter(eval(parse(text = paste("S$", y_variable, sep=""))) > condition)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
condition=0
setwd('/Users/KSauby/Documents/Projects/ACS/R')
Networks <- S %>% #
		filter(eval(parse(text = paste("S$", y_variable, sep=""))) > condition)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
dim(Networks)[1] > 0
setwd('/Users/KSauby/Documents/Projects/ACS/R')
names(S)[names(S) == y_variable] <- 'y_value'#
		names(population)[names(population) == y_variable] <- 'y_value'#
		# List to save data#
		Z = list()#
		# fill in edge units
setwd('/Users/KSauby/Documents/Projects/ACS/R')
for (i in 1:dim(Networks)[1]) {#
  	    	L = Networks[i, ]#
    	    Z[[i]] <- as.data.frame(matrix(NA,1,1))#
    	    # northern neighbor of SRSWOR plot#
    	    Z[[i]][2, "x"] = L$x#
    	    Z[[i]][2, "y"] = L$y + 1#
    	    # if plot has cacti, survey its neighbors#
  	      	if (dim(population %>% #
				filter(#
  					y_value > condition, #
  			  		x==L$x,#
  			  		y==L$y + 1#
				))[1] > 0#
			) {#
			    # neighbor to north#
			    Z[[i]][6, "x"] = Z[[i]][2, "x"]#
			   	Z[[i]][6, "y"] = Z[[i]][2, "y"] + 1#
			    # neighbor to east#
			    Z[[i]][7, "x"] = Z[[i]][2, "x"] + 1#
			    Z[[i]][7, "y"] = Z[[i]][2, "y"]#
			    # neighbor to west#
			    Z[[i]][8, "x"] = Z[[i]][2, "x"] - 1#
			    Z[[i]][8, "y"] = Z[[i]][2, "y"]#
			}#
	      	# southern neighbor of SRSWOR plot#
	      	Z[[i]][3, "x"] = L$x#
	      	Z[[i]][3, "y"] = L$y - 1#
	      	# if plot has cacti, survey its neighbors#
	      	if (dim(population %>% #
				filter(#
  					y_value > condition, #
					x==L$x,#
					y==L$y - 1#
				))[1] > 0#
			) {#
				# neighbor to south#
			    Z[[i]][9, "x"] = Z[[i]][3, "x"]#
			    Z[[i]][9, "y"] = Z[[i]][3, "y"] - 1#
			   	# neighbor to east#
			    Z[[i]][10, "x"] = Z[[i]][3, "x"] + 1#
			    Z[[i]][10, "y"] = Z[[i]][3, "y"]#
			    # neighbor to west#
			    Z[[i]][11, "x"] = Z[[i]][3, "x"] - 1#
			    Z[[i]][11, "y"] = Z[[i]][3, "y"]#
			}#
	      	# eastern neighbor of SRSWOR plot#
	      	Z[[i]][4, "x"] = L$x + 1#
	      	Z[[i]][4, "y"] = L$y#
	      	# if plot has cacti, survey its neighbors#
	      	if (dim(population %>% #
			  	filter(#
  					y_value > condition, #
			  	 	x==L$x + 1,#
			  	  	y==L$y#
				))[1] > 0#
			) {#
	        	# neighbor to south#
	        	Z[[i]][12, "x"] = Z[[i]][4, "x"]#
	        	Z[[i]][12, "y"] = Z[[i]][4, "y"] - 1#
	        	# neighbor to north#
	        	Z[[i]][13, "x"] = Z[[i]][4, "x"]#
	        	Z[[i]][13, "y"] = Z[[i]][4, "y"] + 1#
	        	# neighbor to east#
	        	Z[[i]][14, "x"] = Z[[i]][4, "x"] + 1#
	        	Z[[i]][14, "y"] = Z[[i]][4, "y"]#
			}#
	      	# western neighbor of SRSWOR plot#
	      	Z[[i]][5, "x"] = L$x - 1#
	      	Z[[i]][5, "y"] = L$y#
	      	# if plot has cacti, survey its neighbors#
	      	if (dim(population %>% #
			  	filter(#
  					y_value > condition, #
			  	  	x==L$x - 1,#
			  	  	y==L$y#
				))[1] > 0#
			) {#
	        	# neighbor to south#
	        	Z[[i]][15, "x"] = Z[[i]][5, "x"]#
	        	Z[[i]][15, "y"] = Z[[i]][5, "y"] - 1#
	        	# neighbor to north#
	        	Z[[i]][16, "x"] = Z[[i]][5, "x"]#
	        	Z[[i]][16, "y"] = Z[[i]][5, "y"] + 1#
	        	# neighbor to west#
	        	Z[[i]][17, "x"] = Z[[i]][5, "x"] - 1#
	        	Z[[i]][17, "y"] = Z[[i]][5, "y"]#
	      	}#
	      	# Z[[i]][, "ClusterID"] = L[, "SamplingNumber"]				#
	    }
setwd('/Users/KSauby/Documents/Projects/ACS/R')
sample <- do.call(rbind.data.frame, Z) # compress plot list to dataframe#
	    sample = merge(sample, population, all.x=T, by=c("x", "y")) %>%#
	    	filter(!is.na(x) & !is.na(y)) %>% # remove NAs#
	    	rbind.fill(S) %>% # merge with SRSWOR plots#
			arrange(Sampling)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
no_duplicates <- sample[!duplicated(sample[, c("x", "y")]), ]
setwd('/Users/KSauby/Documents/Projects/ACS/R')
X = no_duplicates %>% #
			filter(y_value > condition) %>%#
		  	assignNetworkMembership
setwd('/Users/KSauby/Documents/Projects/ACS/R')
Y = no_duplicates %>% filter(#
				y_value == condition, #
				Sampling=="SRSWOR"#
		)
Y
setwd('/Users/KSauby/Documents/Projects/ACS/R')
no_duplicates
setwd('/Users/KSauby/Documents/Projects/ACS/R')
# give primary sample plots not satisfying condition NetworkIDs#
		Y = no_duplicates %>% filter(#
				y_value == condition, #
				Sampling=="SRSWOR" | Sampling=="SRSWR" | Sampling=="Primary Sample"#
		)
T
T
Y
setwd('/Users/KSauby/Documents/Projects/ACS/R')
Y$NetworkID <- seq(#
			from = (max(X$NetworkID) + 1), #
			to = (max(X$NetworkID) + dim(Y)[1]), #
			by = 1#
		)#
		# get list of cluster/edge plots not satifying condition#
		Z = no_duplicates %>% filter(#
				y_value == condition, #
				is.na(Sampling)#
		)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
if (dim(Z)[1] > 0) {#
			Z$NetworkID <- NA#
			Z$Sampling <- "Edge"#
			Z$m <- 0			#
			# merge back together		#
			Z = rbind.fill(X,Y,Z)	#
		} else {#
			# merge back together		#
			Z = rbind.fill(X,Y)			#
		}
setwd('/Users/KSauby/Documents/Projects/ACS/R')
if (dim(Z[which(is.na(Z$Sampling)), ])[1] > 0) {#
			Z[which(is.na(Z$Sampling)), ]$Sampling <- "Cluster"#
		}#
		# rename filtering variable#
		Z %<>% select(x, y, NetworkID, m, y_value, Sampling)#
		names(Z)[names(Z) == 'y_value'] <- y_variable#
		# add species attribute data
setwd('/Users/KSauby/Documents/Projects/ACS/R')
Z %<>% #
			merge(population %>% select(-NetworkID, -m)) %>%#
			select(x, y, NetworkID, m, y_value, Sampling, everything())
setwd('/Users/KSauby/Documents/Projects/ACS/R')
if (dim(Z[duplicated(Z[, c("x", "y")]), ])[1] > 0) {#
			warning("Duplicates remaining in RACS sample")#
			stop()#
		}
Z
setwd('/Users/KSauby/Documents/Projects/ACS/R')
#' Create a Restricted Adaptive Cluster Sample#
#' #
#' @param population grid of population to be sampled.#
#' @param seed vector of numbers to feed to \code{set.seed()} so that the sampling is reproducible.#
#' @param n1 initial sample size (sampled according to simple random sampling without replacement).#
#' @param y_variable Variable of interest, used to determine condition under which adaptive cluster sampling takes place.#
#' @param condition Threshold value of the y variable that initiates Restricted ACS. Defaults to \code{0}.#
#' @param initial_sample List of x and y coordinates of the initial sample. Defaults to "NA" so that the initial sample is selected according to simple random sampling without replacement.#
#' @return A restricted adaptive cluster sample.#
#' @examples#
#' library(ggplot2)#
#' Z = createRestrictedACS(Thompson1990Figure1Population, seed=26, n1=10, "y_value")#
#' ggplot() +#
#' 	geom_point(data=Thompson1990Figure1Population, aes(x,y, size=factor(y_value),#
#' 		shape=factor(y_value))) +#
#' 	scale_shape_manual(values=c(1, rep(16, length(2:13)))) +#
#' 	geom_point(data=Z, aes(x,y), shape=0, size=7)#
#
#' @references Sauby, K.E and Christman, M.C. \emph{In preparation.} A Sampling Strategy Designed to Maximize the Efficiency of Data Collection of Food Web Relationships.#
#
#' @export#
createRACS <- function(population, n1, y_variable, condition=0, seed=NA, initial_sample=NA) {#
	y_value <- x <- y <- Sampling <- NetworkID <- m <- everything <- NULL#
	if (is.data.frame(initial_sample)) {#
		S = merge(population, initial_sample, all.y=TRUE) 	#
		S$Sampling <- "Primary Sample"#
	} else {#
		if (!is.na(seed)) {set.seed(seed)}#
		S <- createSRS(population, n1)#
	}#
	Networks <- S %>% #
		filter(eval(parse(text = paste("S$", y_variable, sep=""))) > condition)#
	# if there are units that satisfy the condition, fill in cluster/edge units#
	if (dim(Networks)[1] > 0) {#
		names(S)[names(S) == y_variable] <- 'y_value'#
		names(population)[names(population) == y_variable] <- 'y_value'#
		# List to save data#
		Z = list()#
		# fill in edge units#
	    for (i in 1:dim(Networks)[1]) {#
  	    	L = Networks[i, ]#
    	    Z[[i]] <- as.data.frame(matrix(NA,1,1))#
    	    # northern neighbor of SRSWOR plot#
    	    Z[[i]][2, "x"] = L$x#
    	    Z[[i]][2, "y"] = L$y + 1#
    	    # if plot has cacti, survey its neighbors#
  	      	if (dim(population %>% #
				filter(#
  					y_value > condition, #
  			  		x==L$x,#
  			  		y==L$y + 1#
				))[1] > 0#
			) {#
			    # neighbor to north#
			    Z[[i]][6, "x"] = Z[[i]][2, "x"]#
			   	Z[[i]][6, "y"] = Z[[i]][2, "y"] + 1#
			    # neighbor to east#
			    Z[[i]][7, "x"] = Z[[i]][2, "x"] + 1#
			    Z[[i]][7, "y"] = Z[[i]][2, "y"]#
			    # neighbor to west#
			    Z[[i]][8, "x"] = Z[[i]][2, "x"] - 1#
			    Z[[i]][8, "y"] = Z[[i]][2, "y"]#
			}#
	      	# southern neighbor of SRSWOR plot#
	      	Z[[i]][3, "x"] = L$x#
	      	Z[[i]][3, "y"] = L$y - 1#
	      	# if plot has cacti, survey its neighbors#
	      	if (dim(population %>% #
				filter(#
  					y_value > condition, #
					x==L$x,#
					y==L$y - 1#
				))[1] > 0#
			) {#
				# neighbor to south#
			    Z[[i]][9, "x"] = Z[[i]][3, "x"]#
			    Z[[i]][9, "y"] = Z[[i]][3, "y"] - 1#
			   	# neighbor to east#
			    Z[[i]][10, "x"] = Z[[i]][3, "x"] + 1#
			    Z[[i]][10, "y"] = Z[[i]][3, "y"]#
			    # neighbor to west#
			    Z[[i]][11, "x"] = Z[[i]][3, "x"] - 1#
			    Z[[i]][11, "y"] = Z[[i]][3, "y"]#
			}#
	      	# eastern neighbor of SRSWOR plot#
	      	Z[[i]][4, "x"] = L$x + 1#
	      	Z[[i]][4, "y"] = L$y#
	      	# if plot has cacti, survey its neighbors#
	      	if (dim(population %>% #
			  	filter(#
  					y_value > condition, #
			  	 	x==L$x + 1,#
			  	  	y==L$y#
				))[1] > 0#
			) {#
	        	# neighbor to south#
	        	Z[[i]][12, "x"] = Z[[i]][4, "x"]#
	        	Z[[i]][12, "y"] = Z[[i]][4, "y"] - 1#
	        	# neighbor to north#
	        	Z[[i]][13, "x"] = Z[[i]][4, "x"]#
	        	Z[[i]][13, "y"] = Z[[i]][4, "y"] + 1#
	        	# neighbor to east#
	        	Z[[i]][14, "x"] = Z[[i]][4, "x"] + 1#
	        	Z[[i]][14, "y"] = Z[[i]][4, "y"]#
			}#
	      	# western neighbor of SRSWOR plot#
	      	Z[[i]][5, "x"] = L$x - 1#
	      	Z[[i]][5, "y"] = L$y#
	      	# if plot has cacti, survey its neighbors#
	      	if (dim(population %>% #
			  	filter(#
  					y_value > condition, #
			  	  	x==L$x - 1,#
			  	  	y==L$y#
				))[1] > 0#
			) {#
	        	# neighbor to south#
	        	Z[[i]][15, "x"] = Z[[i]][5, "x"]#
	        	Z[[i]][15, "y"] = Z[[i]][5, "y"] - 1#
	        	# neighbor to north#
	        	Z[[i]][16, "x"] = Z[[i]][5, "x"]#
	        	Z[[i]][16, "y"] = Z[[i]][5, "y"] + 1#
	        	# neighbor to west#
	        	Z[[i]][17, "x"] = Z[[i]][5, "x"] - 1#
	        	Z[[i]][17, "y"] = Z[[i]][5, "y"]#
	      	}#
	      	# Z[[i]][, "ClusterID"] = L[, "SamplingNumber"]				#
	    } #
	    sample <- do.call(rbind.data.frame, Z) # compress plot list to dataframe#
	    sample = merge(sample, population, all.x=T, by=c("x", "y")) %>%#
	    	filter(!is.na(x) & !is.na(y)) %>% # remove NAs#
	    	rbind.fill(S) %>% # merge with SRSWOR plots#
			arrange(Sampling)#
	    # remove duplicates#
		no_duplicates <- sample[!duplicated(sample[, c("x", "y")]), ]#
		# give plots satisfying condition NetworkIDs#
		X = no_duplicates %>% #
			filter(y_value > condition) %>%#
		  	assignNetworkMembership#
		# give primary sample plots not satisfying condition NetworkIDs#
		Y = no_duplicates %>% filter(#
				y_value == condition, #
				Sampling=="SRSWOR" | Sampling=="SRSWR" | Sampling=="Primary Sample"#
		)#
        Y$NetworkID <- seq(#
			from = (max(X$NetworkID) + 1), #
			to = (max(X$NetworkID) + dim(Y)[1]), #
			by = 1#
		)#
		# get list of cluster/edge plots not satifying condition#
		Z = no_duplicates %>% filter(#
				y_value == condition, #
				is.na(Sampling)#
		)#
		# if there are plots not satisfying the condition, make NetworkIDs and m values of Cluster plots not satifying condition "NA"#
		if (dim(Z)[1] > 0) {#
			Z$NetworkID <- NA#
			Z$Sampling <- "Edge"#
			Z$m <- 0			#
			# merge back together		#
			Z = rbind.fill(X,Y,Z)	#
		} else {#
			# merge back together		#
			Z = rbind.fill(X,Y)			#
		}#
		if (dim(Z[which(is.na(Z$Sampling)), ])[1] > 0) {#
			Z[which(is.na(Z$Sampling)), ]$Sampling <- "Cluster"#
		}#
		# rename filtering variable#
		Z %<>% select(x, y, NetworkID, m, y_value, Sampling)#
		names(Z)[names(Z) == 'y_value'] <- y_variable#
		# add species attribute data#
		Z %<>% #
			merge(population %>% select(-NetworkID, -m)) %>%#
			select(x, y, NetworkID, m, y_value, Sampling, everything())#
		# warning	#
		if (dim(Z[duplicated(Z[, c("x", "y")]), ])[1] > 0) {#
			warning("Duplicates remaining in RACS sample")#
			stop()#
		}	#
  		return(Z)#
	} #
	else {#
		# add species attribute data to sample#
		S %<>% merge(population)#
		return(S)#
	}#
}
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
S <- createSRS(Thompson1990Figure1Population, 10, seed=2)#
	S[5, c("x", "y")] <- c(10,6)#
	init <- S[, c("x", "y")]#
	Z <- createRACS(Thompson1990Figure1Population, 10, "y_value", #
		initial_sample=init) #
	expect_that(#
		dim(Z[which(Z$y_value > 0), ])[1],#
		equals(11)#
	)
Z
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
S <- createSRS(Thompson1990Figure1Population, 10, seed=2)#
	S[5, c("x", "y")] <- c(10,6)#
	init <- S[, c("x", "y")]#
	Z <- createRACS(Thompson1990Figure1Population, 10, "y_value", #
		initial_sample=init) #
	expect_that(#
		dim(Z[which(Z$y_value > 0), ])[1],#
		equals(9)#
	)
?assignNetworkMembership
empty = rep(0,20)#
P = rbind(#
	c(rep(0,4),5,13,3,rep(0,13)),#
	c(rep(0,4),2,11,2,rep(0,13)),#
	as.data.frame(sapply(empty, rep, 11)), # rows 3-13#
	c(rep(0,9),3,1,rep(0,9)),#
	c(rep(0,8),5,39,10,rep(0,9)),#
	c(rep(0,8),5,13,4,rep(0,9)),#
	c(rep(0,7),2,22,3,rep(0,10)),#
	c(rep(0,12),10,8,rep(0,6)),#
	c(rep(0,12),7,22,rep(0,6)),#
	c(rep(0,20))#
)
P
P = cbind(#
	expand.grid(x = rev(1:20), y = 1:20), #
	y_value = as.vector(unlist(P))#
	)#
names(P)[1:2] <- c("y", "x")
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
Thompson1990Figure1Population
setwd('/Users/KSauby/Documents/Projects/ACS/R')
empty = rep(0,20)#
	P = rbind(#
		c(rep(0,4),5,13,3,rep(0,13)),#
		c(rep(0,4),2,11,2,rep(0,13)),#
		as.data.frame(sapply(empty, rep, 11)), # rows 3-13#
		c(rep(0,9),3,1,rep(0,9)),#
		c(rep(0,8),5,39,10,rep(0,9)),#
		c(rep(0,8),5,13,4,rep(0,9)),#
		c(rep(0,7),2,22,3,rep(0,10)),#
		c(rep(0,12),10,8,rep(0,6)),#
		c(rep(0,12),7,22,rep(0,6)),#
		c(rep(0,20))#
	)
P
setwd('/Users/KSauby/Documents/Projects/ACS/R')
data(Thompson1990Figure1Population)
ggplot(data=Thompson1990Figure1Population %>% filter(y_value > 0), aes(x,y, size=factor(y_value))) + geom_point()
setwd('/Users/KSauby/Documents/Projects/ACS/R')
assignNetworkMembership(P %>% filter(y_value > 0))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
assignNetworkMembership(Thompson1990Figure1Population %>% filter(y_value > 0))#
#'

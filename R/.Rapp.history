popgroupvar
A
head(podata)
head(popdata)
head(B)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
#' Return the sum of a vector, after removing NAs.#
#' #
#' @param x Vectors of data.#
#' @description Written for use in the tables::tabular function to create publication-ready tables.#
#
Sum <- function(x) {sum(x, na.rm=TRUE)}#
#
#' Return the mean of a vector with up to two decimal places, after removing NAs.#
#' #
#' @param x Vectors of data.#
#' @description Written for use in the tables::tabular function to create publication-ready tables.#
#
Mean <- function(x) base::mean(x, na.rm=TRUE)#
#' Return the population variance of a vector, after removing NAs, and round.#
#'#
#' @param x Vectors of data.#
#' @description Written for use in the tables::tabular function to create publication-ready tables.#
#
PopVariance <- function(x) {#
	temp <- sum((x-mean(x))^2)/length(x)#
}#
#
#' Population Coefficient of Variation#
#' #
#' @param x Vectors of data.#
#
popCV <- function(x) {sqrt(PopVariance(x))/Mean(x)}#
#
#' Calculate Summary Statistics for Patch Population Data#
#' #
#' @param population_data Data on multiple realizations of patches of the species of interest within the grid of locations (created by \code{createSpeciesPatchPopulations} function).#
#' @param summaryvar Vector of variables for which summary statistics should be calculated.#
#' @param popgroupvar String identifying the categorical variable identifying the different populations.#
#' @param rvar Vector of variables for which ratio estimators should be used.#
#' @param spatweights Vector of spatial weight matrix styles. Can take on values "W", "B", "C", "U", "S", and "minmax". See nb2listw for more details.#
#
#' @description Calculates summary statistics for patch population data.#
#
#' @return Dataframe including summary statistics for each column identified in \code{summaryvar} and for each category identified in \code{popgroupvar}.#
#
#' @export#
#' @importFrom dplyr ungroup sym group_by_at#
#' @importFrom stringr str_sub#
#' @importFrom stats var#
#' @importFrom sp coordinates#
#' @importFrom spdep cell2nb nb2listw joincount.test moran.test #
#
#' @examples#
#' library(magrittr)#
#' library(dplyr)#
#' ovar = c(#
#' 	"Stricta",#
#' 	"Pusilla",#
#' 	"Cactus",#
#' 	"CACA_on_Pusilla",#
#' 	"CACA_on_Stricta",#
#' 	"MEPR_on_Pusilla",#
#' 	"MEPR_on_Stricta",#
#' 	"Old_Moth_Evidence_Pusilla",#
#' 	"Old_Moth_Evidence_Stricta"#
#' 	# "Percent_Cover_Pusilla", # how do I do these? they are occupancy nor abundance#
#' 	# "Percent_Cover_Stricta",#
#' 	# "Height_Pusilla",#
#' 	# "Height_Stricta",#
#' )		#
#' summaryvar = ovar#
#' # WHAT WAS I THINK HERE? for grouping variables?#
#' popgroupvar = "n.networks" # c("n.networks", "realization")#
#' # create realizations#
#' x_start = 1#
#' x_end = 30#
#' y_start = 1#
#' y_end = 30#
#' n.networks = c(5, 15, 10, 20, 30, 40)#
#' n.realizations = 1#
#' SpeciesInfo = PlotSurveys_season1#
#' start.seed=1#
#' buffer=5#
#' rvar = c("CACA_on_Stricta", "CACA_on_Pusilla")#
#' cactus.realizations <- createSpeciesPatchRealizations(x_start, x_end,#
#' 	y_start, y_end, buffer, n.networks, n.realizations, SpeciesInfo, start.seed,#
#' 	ovar)#
#' patch_data_summary <- calculatePopulationSummaryStatistics(cactus.realizations, #
#' 	summaryvar=ovar, popgroupvar=popgroupvar, nrow=30, ncol=30)#
calculatePopSummaryStats <- function(#
	popdata, #
	summaryvar, #
	rvar=NULL, #
	popgroupvar,#
	spatweights="S",#
	nrow,#
	ncol#
) {#
	POPVAR <- sym(popgroupvar)#
	popdata %<>% arrange(!!POPVAR)#
	# for each popgroupvar combo, calculate summary statistics for m and number of species patches#
	# this calculates the m statistics for the unique Network sizes#
	Y1 <- popdata %>%#
		group_by_at(c("NetworkID", popgroupvar)) %>%#
		summarise(m = .data$m[1]) %>%#
		group_by_at(popgroupvar) %>%#
		summarise(#
			m_min_unique_neigh = min(.data$m),#
			m_max_unique_neigh = max(.data$m),#
			m_mean_unique_neigh = mean(.data$m),#
			m_var_unique_neigh = var(.data$m),#
			n_Species_Patches = #
				length(unique(.data$NetworkID[which(.data$m>1)]))#
		) %>%#
		ungroup %>%#
		as.data.frame#
	# this calculates the m statistics for all units#
	Y2 = popdata %>%#
	group_by_at(popgroupvar) %>%#
		summarise(#
			m_min = min(.data$m),#
			m_max = max(.data$m),#
			m_mean = mean(.data$m),#
			m_var = var(.data$m)#
		) %>%#
		ungroup %>%#
		as.data.frame#
	Z = popdata %>%#
		group_by_at(popgroupvar) %>%#
		summarise(N = length(.data$m)) %>%#
		ungroup %>%#
		as.data.frame#
	Y1 %<>% #
		merge(Y2, by=popgroupvar) %>%#
		merge(Z, by=popgroupvar)	#
	# spatial statistics and other characteristics of variables#
	A <- list()#
	popvar <- paste(#
		"popdata$", #
		popgroupvar, #
		sep=""#
	)#
	for (i in 1:length(unique(eval(parse(text=popvar))))) {#
		temp <- popdata %>%#
			filter(!!POPVAR == unique(!!POPVAR)[i])#
		temp %<>% arrange(.data$x,.data$y)#
		# spatial statistics#
		coordinates(temp) = ~ x + y#
		A[[i]] <- list()#
		for (j in 1:length(summaryvar)) {#
			A[[i]][[j]] <- data.frame(variable = summaryvar[j])#
			if (summaryvar[j] %in% rvar) {#
				temp_ratio <- temp %>% as.data.frame#
				temp_ratio %<>% #
					.[.[colnames(.)==str_sub(summaryvar[j],-7,-1)]==1, ]	#
				tempvar <- eval(parse(text =#
						paste("temp_ratio$", summaryvar[j], sep="")#
					))#
				coordinates(temp_ratio) = ~ x + y#
			} else {#
				tempvar <- eval(parse(text =#
					paste("temp$", summaryvar[j], sep="")#
				))	#
			}#
			A[[i]][[j]]$Mean_tempvar 	<- Mean(tempvar)#
			A[[i]][[j]]$Var_tempvar 	<- PopVariance(tempvar)#
			A[[i]][[j]]$CV_tempvar 		<- popCV(tempvar)#
			A[[i]][[j]]$Total_tempvar 	<- Sum(tempvar)#
			A[[i]][[j]]$SSQ_R			<- calculateSSQR(#
				popdata = as.data.frame(temp),#
				variable = summaryvar[j],#
				popgroupvar#
			)$SSQ_R#
			# for join counts and moran's i, change NAs in rvar's to zeros#
			temp2 <- temp#
			temp2@data[rvar][is.na(temp2@data[rvar])] <- 0#
			if (length(tempvar[which(tempvar > 0)]) > 0) {#
				# join counts and moran's i#
				nb <- cell2nb(nrow = nrow, ncol = ncol)#
				if ("W" %in% spatweights) {#
					lwb <- nb2listw(nb, style = "W") # convert to spatweights#
					# I think cells are indexed by row, then column#
					A[[i]][[j]]$JoinCountTest.W <- joincount.test(as.factor(#
						eval(parse(text=paste(#
							"temp2$",#
							summaryvar[j],#
							sep=""#
						)))),#
						lwb#
					)[[2]]$estimate[1]#
					A[[i]][[j]]$MoranI.W <- moran.test(#
						eval(parse(text=paste(#
							"temp2$",#
							summaryvar[j],#
							sep=""#
						))),#
						lwb#
					)$estimate[1]#
				}#
				if ("B" %in% spatweights) {#
					lwb <- nb2listw(nb, style = "B") # convert to spatweights#
					# I think cells are indexed by row, then column#
					A[[i]][[j]]$JoinCountTest.B <- joincount.test(as.factor(#
						eval(parse(text=paste(#
							"temp2$",#
							summaryvar[j],#
							sep=""#
						)))),#
						lwb#
					)[[2]]$estimate[1]#
					A[[i]][[j]]$MoranI.B <- moran.test(#
						eval(parse(text=paste(#
							"temp2$",#
							summaryvar[j],#
							sep=""#
						))),#
						lwb#
					)$estimate[1]#
				}	#
				if ("C" %in% spatweights) {#
					lwb <- nb2listw(nb, style = "C") # convert to spatweights#
					# I think cells are indexed by row, then column#
					A[[i]][[j]]$JoinCountTest.C <- joincount.test(as.factor(#
						eval(parse(text=paste(#
							"temp2$",#
							summaryvar[j],#
							sep=""#
						)))),#
						lwb#
					)[[2]]$estimate[1]#
					A[[i]][[j]]$MoranI.C <- moran.test(#
						eval(parse(text=paste(#
							"temp2$",#
							summaryvar[j],#
							sep=""#
						))),#
						lwb#
					)$estimate[1]#
				}	#
				if ("U" %in% spatweights) {#
					lwb <- nb2listw(nb, style = "U") # convert to spatweights#
					# I think cells are indexed by row, then column#
					A[[i]][[j]]$JoinCountTest.U <- joincount.test(as.factor(#
						eval(parse(text=paste(#
							"temp2$",#
							summaryvar[j],#
							sep=""#
						)))),#
						lwb#
					)[[2]]$estimate[1]#
					A[[i]][[j]]$MoranI.U <- moran.test(#
						eval(parse(text=paste(#
							"temp2$",#
							summaryvar[j],#
							sep=""#
						))),#
						lwb#
					)$estimate[1]#
				}	#
				if ("S" %in% spatweights) {#
					lwb <- nb2listw(nb, style = "S") # convert to spatweights#
					# I think cells are indexed by row, then column#
					A[[i]][[j]]$JoinCountTest.S <- joincount.test(as.factor(#
						# NEED TO FIGURE OUT HOW TO GET RID OF NAs#
						# OR CAN YOU JUST NOT DO JOINT COUNT TEST FOR RVAR#
						eval(parse(text=paste(#
							"temp2$",#
							summaryvar[j],#
							sep=""#
						)))),#
						lwb#
					)[[2]]$estimate[1]#
					A[[i]][[j]]$MoranI.S <- moran.test(#
						eval(parse(text=paste(#
							"temp2$",#
							summaryvar[j],#
							sep=""#
						))),#
						lwb#
					)$estimate[1]#
				}	#
				if ("minmax" %in% spatweights) {#
					lwb <- nb2listw(nb, style = "minmax") # convert to spatweights#
					# I think cells are indexed by row, then column#
					A[[i]][[j]]$JoinCountTest.minmax <- joincount.test(#
						as.factor(eval(parse(text=paste(#
							"temp2$",#
							summaryvar[j],#
							sep=""#
						)))),#
						lwb#
					)[[2]]$estimate[1]#
					A[[i]][[j]]$MoranI.minmax <- moran.test(#
						eval(parse(text=paste(#
							"temp2$",#
							summaryvar[j],#
							sep=""#
						))),#
						lwb#
					)$estimate[1]#
				}	#
			} else {#
				if ("W" %in% spatweights) {#
					A[[i]][[j]]$JoinCountTest.W <- NA#
					A[[i]][[j]]$MoranI.W <- NA#
				}#
				if ("B" %in% spatweights) {#
					A[[i]][[j]]$JoinCountTest.B <- NA#
					A[[i]][[j]]$MoranI.B <- NA#
				}	#
				if ("C" %in% spatweights) {#
					A[[i]][[j]]$JoinCountTest.C <- NA#
					A[[i]][[j]]$MoranI.C <- NA#
				}	#
				if ("U" %in% spatweights) {#
					A[[i]][[j]]$JoinCountTest.U <- NA#
					A[[i]][[j]]$MoranI.U <- NA#
				}	#
				if ("S" %in% spatweights) {#
					A[[i]][[j]]$JoinCountTest.S <- NA#
					A[[i]][[j]]$MoranI.S <- NA#
				}	#
				if ("minmax" %in% spatweights) {#
					A[[i]][[j]]$JoinCountTest.minmax <- NA#
					A[[i]][[j]]$MoranI.minmax <- NA#
				}	#
			}#
		}#
		A[[i]] <- do.call(rbind.data.frame, A[[i]])#
		A[[i]]$population <- unique(eval(parse(#
			text=paste(#
				"popdata$", #
				popgroupvar, #
				sep=""#
			)#
		)))[i]#
	}#
	B <- do.call(rbind.data.frame, A)#
	B %<>% arrange(variable, population) %>%#
		dplyr::rename(#
			Mean = Mean_tempvar,#
			Var = Var_tempvar,#
			CV = CV_tempvar,#
			Total = Total_tempvar#
		)#
	return(list(Y1, B))#
}
?calculatePopulationSummaryStatistics
patch_data_summary <- calculatePopulationSummaryStatistics(cactus.realizations, #
	summaryvar=ovar, popgroupvar=grouping.variables)
patch_data_summary <- calculatePopSummaryStats(cactus.realizations, #
	summaryvar=ovar, popgroupvar=grouping.variables)
patch_data_summary <- calculatePopSummaryStats(cactus.realizations, #
	summaryvar=ovar, popgroupvar=grouping.variables, nrow=30, ncol=30)
tail patch_data_summary
tail(patch_data_summary)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
#' Sample species patch realizations simulations#
#
#' @param yVar variable upon which adaptive cluster sampling criterion is based#
#' @param popdata patch realizations#
#' @param sims Number of simulations per population.#
#' @param n1 Vector of initial sample size(s) for the initial simple random sample(s) without replacement; can be a single value or vector of values#
#' @param avar Vector of variables for which abundance should be estimated.#
#' @param ovar Vector of variables for which occupancy should be estimated.#
#' @param rvar Vector of variables for which ratio estimators should be used.#
#' @param SamplingDesign Whether restricted or unrestricted adaptive cluster sampling should be performed; defaults to \code{FALSE}.#
#' @param y_HT_formula Default is "Thompson".#
#' @param var_formula Default is "var_y_HT".#
#' @param mThrshld Default is NULL.#
#' @param f_max Default is 2.#
#' @param SampleEstimators If "TRUE", calculate the sample mean and sample variance for each simulation. Default is FALSE.#
#' @param SpatStat If "TRUE", for each simulation calculate Moran's I, and the nugget, sill, and range of the semivariogram. Default is TRUE#
#' @param weights If SpatStat is "TRUE", this is a vector giving spatial weight matrix styles to use to calculate the Join Count and Moran's I statistics. Can take on values "W", "B", "C", "U", "S", and "minmax". See nb2listw for more details.#
#' @param mChar If "TRUE", for each simulation calculate summary statistics (median, mean, min, and max) for the sample's m values. Also, for each simulation and for the set of unique m values, calculate the same summary statistics.#
#' @param popvar Default is "n.networks"#
#' @param realvar Default is "realization"#
#
#' @description This function simulates sampling of multiple realizations of patches of the species of interest within the grid of locations created with \code{createPopulation}.#
#
#' @references Sauby, K.E and Christman, M.C. \emph{In preparation.} Restricted adaptive cluster sampling.#
#
#' @importFrom foreach foreach #
#' @importFrom foreach %dopar% #
#' @importFrom dplyr select_#
#' @export#
#
#' @examples#
#' sims=200#
#' n1=c(5,10,20,40)#
#' population <- createPopulation(x_start = 1, x_end = 30, y_start = 1, y_end = 30)#
#' avar = NULL#
#' ovar = c(#
#' 	"Stricta",#
#' 	"Pusilla",#
#' 	"Cactus",#
#' 	"CACA_on_Pusilla",#
#' 	"CACA_on_Stricta",#
#' 	"MEPR_on_Pusilla",#
#' 	"MEPR_on_Stricta",#
#' 	"Old_Moth_Evidence_Pusilla",#
#' 	"Old_Moth_Evidence_Stricta"#
#' 	# "Percent_Cover_Pusilla", # how do I do these? they are occupancy nor abundance#
#' 	# "Percent_Cover_Stricta",#
#' 	# "Height_Pusilla",#
#' 	# "Height_Stricta",#
#' )		#
#' # popdata = cactus.realizations#
#' # simulation_data <- sampleSpeciesPatchRealizations(popdata, sims, #
#' # 	n1, population, avar, ovar)#
#' # sims=200#
#' # #n1=c(75,150,225,300,350)#
#' # simulation_data_SRSWOR <- sampleSpeciesPatchRealizations(popdata, #
#' # 	sims, n1, population, avar, ovar)#
#' # # save data#
#' # write.csv(simulation_data_SRSWOR, file=paste("simulation_data_SRSWOR", #
#' # format(Sys.time(), "%Y-%m-%d_%H-%M"), ".csv", sep=""))#
#' #  write.csv(simulation_data, file=paste("simulation_data", format(Sys.time(), #
#' # "%Y-%m-%d_%H-%M"), ".csv", sep=""))#
#
sampleRealizations <- function(#
	popdata, #
	sims, #
	n1, #
	avar, #
	ovar, #
	rvar,#
	#ACS=TRUE, #
	SamplingDesign="ACS",#
	yVar,#
	y_HT_formula = "y_HT",#
	var_formula = "var_y_HT",#
	mThreshold = NULL,#
	f_max = 2,#
	SampleEstimators = FALSE,#
	SpatStat = TRUE,#
	mChar = TRUE,#
	popvar = "n.networks",#
	realvar = "realization",#
	weights="S"#
) #
{#
	n.networks <- realization <- i <- j <- Sampling <- . <- NetworkID <- NULL#
	TIME 					<- Sys.time()#
	popdata 				%<>% arrange(!!! syms(c(popvar, realvar)))#
	var 					<- c(ovar, avar, rvar)#
	n.patches 				<- length(unique(eval(parse(text=paste(#
								"popdata$",#
								popvar,#
								sep=""#
							)))))#
	nsample.length 			<- length(n1)#
	A 						<- vector("list", n.patches)#
	# c() - same code calculates the HT estimators for occupancy and abundance#
	oavar 					<- c(ovar, avar)#
	# empty dataframes will be cbind'd together after HT estimators calculated#
	occ_abund_var 			<- data.frame(row.names = 1:length(c(ovar, avar))) #
	occ_abund_mean 			<- data.frame(row.names = 1:length(c(ovar, avar)))#
	Ratio 					<- data.frame(row.names = 1:length(rvar)) #
	# the names to assign the estimates#
	occ_abund_mean_names 	<- paste(ovar, avar, "MeanObs", sep="")#
	occ_abund_var_names 	<- paste(ovar, avar, "VarObs", sep="")#
	ratio_mean_names 		<- paste(rvar, "RMeanObs", sep="")#
	ratio_var_names 		<- paste(rvar, "RVarObs", sep="")#
	# i=1;j=1;k=1#
	Z = foreach (#
		i = 1:n.patches, # for each species density#
		.inorder = FALSE, #
		.packages = c("magrittr", "foreach", "plyr", "dplyr", "data.table",#
		 	"ACSampling", "intergraph", "network", "igraph", "stringr", "spdep"), #
		.combine = "rbind.fill",#
		#.errorhandling = "pass",#
		.verbose = TRUE#
		) %:%#
	 	foreach (#
			j = 1:nsample.length, # for each sampling effort#
			.combine = "rbind.fill",#
			.inorder = FALSE#
		) %dopar% {#
			cat(paste(i,j, sep="_"))#
			P 			<- popdata %>% #
							filter(n.networks==unique(#
								eval(parse(text=paste(#
									"popdata$",#
									popvar,#
									sep=""#
								)))#
							)[i])#
			N 			<- dim(P)[1]#
			n1 			<- n1[j]#
			A[[i]][[j]] <- list()#
			r 			<- (i - 1) * j + j#
			seeds 		<- runif(sims)#
		    for (k in 1:sims) {#
				temp_seed <- seeds[k]*100000#
				if (SamplingDesign=="ACS")#
				{#
					alldata <- createACS(#
						PopData=P, #
						seed=temp_seed, #
						n1=n1, #
						yVar=yVar#
					) %>% #
						as.data.table#
				} else if (SamplingDesign=="RACS")#
				{#
					alldata <- createRACS(#
						PopData=P, #
						seed=temp_seed, #
						n1=n1, #
						yVar=yVar,#
						f_max=f_max#
					) %>% #
						as.data.table#
				} else#
				{#
					alldata <- createSRS(#
						PopData=P, #
						seed=temp_seed, #
						n1=n1#
					) %>% #
						as.data.table#
				}#
				alldata_all <- alldata#
				if (SampleEstimators == TRUE) {#
					################ SRSWOR Sampling ######################
					if (SamplingDesign!="ACS" & SamplingDesign!="RACS") {#
						# datasets to apply simple mean/variance and simple ratio estimator#
						dats <- "alldata"#
					}#
					if (SamplingDesign=="ACS" | SamplingDesign=="RACS") {#
						################ SRSWOR Data, alldata #################
						SRSWOR_data <- alldata %>% #
							filter(Sampling=="SRSWOR") %>% #
							as.data.table#
						alldata %<>% filter(Sampling!="Edge") %>% #
							as.data.table#
						# datasets to apply simple mean/variance and simple ratio estimatr#
						dats <- c("SRSWOR_data", "alldata")#
					}#
					# datasets to apply simple mean/variance and simple ratio estimator#
					# sample mean and variance applied to alldata, SRSWOR_data#
					SampleMeanVar <- list()#
					for (n in 1:length(dats)) {#
						dat <- eval(parse(text=dats[[n]]))[, oavar, with=FALSE] %>% #
							summarise_each(funs(#
								mean(., na.rm=T), #
								var(., na.rm=T)#
							))#
						setnames(#
							dat,#
							names(dat), #
							paste(names(dat), "observed", sep="_")#
						)#
						dat$Plots <- dats[n]#
						SampleMeanVar[[n]] <- dat#
					}#
					SampleMeanVar %<>% rbind.fill#
					# simple ratio estimators applied to alldata, SRSWOR_data#
					if (!(is.null(rvar))) {#
						SmpRatio <- list()#
						for (n in 1:length(dats)) {#
							SmpRatio[[n]] <- data.frame(Var1 = NA)#
							for (l in 1:length(rvar)) {#
								y = eval(parse(#
										text=paste(#
											dats[n], #
											"$", #
											rvar[l], #
											sep=""#
										)#
								))#
								x = eval(parse(#
										text = paste(#
											dats[n], #
											"$",#
											str_sub(rvar[l],-7,-1), #
											sep=""#
										)#
								))#
								m = rep(1, length(y)) # equal P(inclusion) for all#
								SmpRatio[[n]]$Var1 <- R_hat(#
									y = y,#
									x = x,#
									N = N,#
									n1 = n1,#
									m = m#
								)#
							 	SmpRatio[[n]]$Var2 = var_R_hat(#
							 		y = y, #
							 		x = x,#
									N = N, #
							 		n1 = n1, #
							 		m = m#
							 	)#
								names(SmpRatio[[n]])[(dim(SmpRatio[[n]])[2]-1): #
									dim(SmpRatio[[n]])[2]] <- #
									c(#
										paste(#
											rvar[l], #
											"RMeanObs", #
											sep=""#
										),#
										paste(#
											rvar[l], #
											"RVarObs", #
											sep=""#
										)#
									)#
							}#
							SmpRatio[[n]] %<>% mutate(Plots = dats[n])#
						}#
						SmpRatio <- do.call(rbind.data.frame, Ratio)#
					}#
				    SampleMeanVar %<>% merge(SmpRatio)	#
				} else#
				{#
					alldata %<>% filter(Sampling!="Edge") %>% #
						as.data.table#
				}#
				if (SamplingDesign=="ACS" | SamplingDesign=="RACS") {#
					################ HORVITZ-THOMPSON ESTIMATORS ################
					HT_results <- list()#
					alldata %<>% setkey(NetworkID)#
					# OCCUPANCY AND ABUNDANCE#
					# summarise data for mean calculations#
					O <- alldata %>% #
						filter(Sampling!="Edge") %>%#
						select_(.dots=c(oavar,"NetworkID","m")) %>%#
						as.data.table#
					# calculate y_HT#
					m <- O$m#
					if (y_HT_formula == "y_HT_RACS")#
					{#
						HT_results[[1]] <- O %>%#
						.[, oavar, with=FALSE] %>% #
							.[, lapply(#
								.SD,#
								new_y_HT,#
								N	= N, #
								n1	= n1,#
								m	= m,#
								mThreshold = mThreshold#
							)]#
					} else if (y_HT_formula == "y_HT")#
					{#
						HT_results[[1]] <- O %>%#
							select_(.dots=oavar) %>%#
							.[, lapply(#
								.SD,#
								y_HT,#
								N	= N, #
								n1	= n1,#
								m	= m#
							)]#
					}#
					names(HT_results[[1]]) <- c(occ_abund_mean_names)#
					# summarise data for variance calculations#
					O_smd <- alldata %>% #
						.[, c(#
							paste(oavar, "_network_sum", sep=""), #
							"NetworkID", #
							"m"#
						), with=FALSE] %>% #
						filter(!(is.na(NetworkID))) %>%#
						as.data.table %>%#
						.[, lapply(.SD, function(x) {x[1]}), by=NetworkID]#
					m <- O_smd$m#
					# var_y_HT#
					if (var_formula == "var_y_HT_RACS") {#
						HT_results[[2]] <- O_smd[, paste(#
							oavar, #
							"_network_sum", #
							sep=""#
						), with=FALSE] %>%#
							.[, lapply(#
								.SD, #
								var_y_HT_RACS, #
								N 	= N, #
								n1 	= n1, #
								m	= m,#
								mThreshold = mThreshold#
							)]#
						names(HT_results[[2]]) <- c(occ_abund_var_names)#
					} else if (var_formula == "var_y_HT") {#
						HT_results[[2]] <- O_smd[, paste(#
							oavar, #
							"_network_sum", #
							sep=""#
						), with=FALSE] %>%#
							.[, lapply(#
								.SD, #
								var_y_HT, #
								N 	= N, #
								n1 	= n1, #
								m	= m#
							)]#
						names(HT_results[[2]]) <- c(occ_abund_var_names)#
						#######################################################
					} else if (var_formula == "var_pi") {#
						HT_results[[2]] <- O_smd[, paste(#
							oavar, #
							"_network_sum", #
							sep=""#
						), with=FALSE] %>%#
							.[, lapply(#
								.SD, #
								var_pi, #
								N 	= N, #
								n1 	= n1, #
								m	= m#
							)]#
						names(HT_results[[2]]) <- c(occ_abund_var_names)#
					}#
					# RATIO DATA#
					if (!(is.null(rvar))) {#
						# RATIO#
						# summarise data for variance calculations#
						# do I want to use summarised for everything??????????????#
						mvals <- alldata %>%#
							group_by(NetworkID) %>%#
							summarise(m = m[1])#
						R_smd <- alldata %>%#
							filter(Sampling!="Edge") %>%#
							as.data.table %>%#
							.[, c(rvar, ovar, "NetworkID"), with=FALSE] %>%#
							.[, lapply(.SD, sum, na.rm=T), by=NetworkID] %>%#
							merge(mvals, by="NetworkID")#
						# summarise data for mean calculations#
						# R <- alldata %>% #
						#	filter(Sampling!="Edge") %>%#
						#	.[, c(rvar, ovar, "m"), with=FALSE]#
						HT_results[[3]] <- data.frame(Var1 = NA)#
						for (l in 1:length(rvar)) {#
							y = eval(parse(text=paste("R_smd$", rvar[l], #
								sep="")))#
							x = eval(parse(text = paste("R_smd$", #
								str_sub(rvar[l],-7,-1), sep="")))#
							HT_results[[3]]$Var1 = R_hat(#
								y = y,#
								x = x,#
								N = N, #
								n1 = n1, #
								m = R_smd$m#
							)#
						 	HT_results[[3]]$Var2 = var_R_hat(#
						 		y = y, #
						 		x = x,#
								N = N, #
						 		n1 = n1, #
						 		m = R_smd$m#
						 	)#
							names(HT_results[[3]])[ #
								(dim(HT_results[[3]])[2] - 1) : #
								dim(HT_results[[3]])[2]#
							] <- c(#
									paste(#
										rvar[l], #
										"RMeanObs", #
										sep=""#
									),#
									paste(#
										rvar[l], #
										"RVarObs", #
										sep=""#
									)#
								)#
						}#
					}#
					# merge together			#
					All_HT <- HT_results %>% #
						as.data.frame %>%#
						mutate(Plots = "Horvitz Thompson Mean (All Plots)")#
					# merge estimates#
					if (SampleEstimators == TRUE) {#
						A[[i]][[j]][[k]] = rbind.fill(SampleMeanVar, All_HT)#
					} else#
					{#
						A[[i]][[j]][[k]] <- All_HT#
					}#
				} else#
				{#
					A[[i]][[j]][[k]] <- SampleMeanVar#
				}#
				# add other information#
				A[[i]][[j]][[k]]$simulation 		= k#
				A[[i]][[j]][[k]]$seed 				= temp_seed#
				A[[i]][[j]][[k]]$N.ACS.plots 		= dim(alldata_all)[1] - n1#
				A[[i]][[j]][[k]]$N.Total.plots 		= dim(alldata_all)[1]#
				A[[i]][[j]][[k]]$realvar = eval(parse(text=paste(#
														"P$",#
														realvar,#
														sep=""#
													)))[1]#
				A[[i]][[j]][[k]]$popvar		= eval(parse(text=paste(#
														"P$",#
														popvar,#
														sep=""#
													)))[1]#
				A[[i]][[j]][[k]]$N.SRSWOR.plots 	= n1#
				# m characteristics#
				if (mChar == TRUE) {#
					if (sum(alldata_all$Cactus) > 0) {#
						temp <- alldata_all[which(#
							eval(parse(text=yVar)) > 0#
						),] #
						A[[i]][[j]][[k]]$mean_m <- mean(temp$m)#
						A[[i]][[j]][[k]]$median_m <- median(temp$m)#
						A[[i]][[j]][[k]]$max_m <- max(temp$m)#
						A[[i]][[j]][[k]]$min_m <- min(temp$m)#
						temp %<>%#
							group_by(NetworkID) %>%#
							summarise(m = m[1]) %>%#
							summarise(#
								MEAN = mean(m),#
								MAX = max(m),#
								MIN = min(m),#
								MEDIAN = median(m)#
							)#
						A[[i]][[j]][[k]]$mean_uniq_m <- temp$MEAN#
						A[[i]][[j]][[k]]$median_uniq_m <- temp$MEDIAN#
						A[[i]][[j]][[k]]$max_uniq_m <- temp$MAX#
						A[[i]][[j]][[k]]$min_uniq_m <- temp$MIN#
					} else#
					{#
						A[[i]][[j]][[k]]$mean_m <- NA#
						A[[i]][[j]][[k]]$median_m <- NA#
						A[[i]][[j]][[k]]$max_m <- NA#
						A[[i]][[j]][[k]]$min_m <- NA#
						A[[i]][[j]][[k]]$mean_uniq_m <- NA#
						A[[i]][[j]][[k]]$median_uniq_m <- NA#
						A[[i]][[j]][[k]]$max_uniq_m <- NA#
						A[[i]][[j]][[k]]$min_uniq_m <- NA#
					}#
				}#
				# Spatial Statistics#
				if (SpatStat == TRUE) {#
					if (sum(alldata_all$Cactus) > 1) {#
						temp <- alldata_all %>%#
							as.data.frame %>%#
							# get rid of edge units - not involved in calculation of m#
							filter(!(is.na(NetworkID))) %>%#
							arrange(x, y)#
							# dnearneigh - why was this here?#
						nb <- cell2nb(#
							nrow = max(temp$x) - min(temp$x), #
							ncol = max(temp$y) - min(temp$y)#
						)#
						coordinates(temp) = ~ x+y#
						data_dist <- dim(#
							as.matrix(dist(cbind(temp$x, temp$y)))#
						)[1]#
						if ("W" %in% weights) {#
							lwb <- nb2listw(nb, style = "W") # convert to weights#
							# I think cells are indexed by row, then column#
							A[[i]][[j]][[k]]$JoinCountTest.W <- #
								joincount.test(as.factor(temp$Cactus),#
								lwb#
							)[[2]]$estimate[1]#
							A[[i]][[j]][[k]]$MoranI.W <- moran.test(#
								temp$Cactus,#
								lwb#
							)$estimate[1]#
						}#
						if ("B" %in% weights) {#
							lwb <- nb2listw(nb, style = "B") # convert to weights#
							# I think cells are indexed by row, then column#
							A[[i]][[j]][[k]]$JoinCountTest.B <- #
								joincount.test(as.factor(#
								temp$Cactus),#
								lwb#
							)[[2]]$estimate[1]#
							A[[i]][[j]][[k]]$MoranI.B <- moran.test(#
								temp$Cactus,#
								lwb#
							)$estimate[1]#
						}	#
						if ("C" %in% weights) {#
							lwb <- nb2listw(nb, style = "C") # convert to weights#
							# I think cells are indexed by row, then column#
							A[[i]][[j]][[k]]$JoinCountTest.C <- #
								joincount.test(as.factor(#
								temp$Cactus),#
								lwb#
							)[[2]]$estimate[1]#
							A[[i]][[j]][[k]]$MoranI.C <- moran.test(#
								temp$Cactus,#
								lwb#
							)$estimate[1]#
						}	#
						if ("U" %in% weights) {#
							lwb <- nb2listw(nb, style = "U") # convert to weights#
							# I think cells are indexed by row, then column#
							A[[i]][[j]][[k]]$JoinCountTest.U <- #
								joincount.test(as.factor(#
								temp$Cactus),#
								lwb#
							)[[2]]$estimate[1]#
							A[[i]][[j]][[k]]$MoranI.U <- moran.test(#
								temp$Cactus,#
								lwb#
							)$estimate[1]#
						}	#
						if ("S" %in% weights) {#
							lwb <- nb2listw(nb, style = "S") # convert to weights#
							# I think cells are indexed by row, then column#
							A[[i]][[j]][[k]]$JoinCountTest.S <- #
								joincount.test(as.factor(#
								temp$Cactus),#
								lwb#
							)[[2]]$estimate[1]#
							A[[i]][[j]][[k]]$MoranI.S <- moran.test(#
								temp$Cactus,#
								lwb#
							)$estimate[1]#
						}	#
						if ("minmax" %in% weights) {#
							lwb <- nb2listw(nb, style = "minmax") # convert to weights#
							# I think cells are indexed by row, then column#
							A[[i]][[j]][[k]]$JoinCountTest.minmax <- #
								joincount.test(as.factor(#
								temp$Cactus),#
								lwb#
							)[[2]]$estimate[1]#
							A[[i]][[j]][[k]]$MoranI.minmax <- #
								moran.test(#
								temp$Cactus,#
								lwb#
							)$estimate[1]#
						}#
					} else {#
						if ("W" %in% weights) {#
							A[[i]][[j]][[k]]$JoinCountTest.W <- NA#
							A[[i]][[j]][[k]]$MoranI.W <- NA#
						}#
						if ("B" %in% weights) {#
							A[[i]][[j]][[k]]$JoinCountTest.B <- NA#
							A[[i]][[j]][[k]]$MoranI.B <- NA#
						}	#
						if ("C" %in% weights) {#
							A[[i]][[j]][[k]]$JoinCountTest.C <- NA#
							A[[i]][[j]][[k]]$MoranI.C <- NA#
						}	#
						if ("U" %in% weights) {#
							A[[i]][[j]][[k]]$JoinCountTest.U <- NA#
							A[[i]][[j]][[k]]$MoranI.U <- NA#
						}	#
						if ("S" %in% weights) {#
							A[[i]][[j]][[k]]$JoinCountTest.S <- NA#
							A[[i]][[j]][[k]]$MoranI.S <- NA#
						}	#
						if ("minmax" %in% weights) {#
							A[[i]][[j]][[k]]$JoinCountTest.minmax <- NA#
							A[[i]][[j]][[k]]$MoranI.minmax <- NA#
						}	#
					}#
				}#
			}#
			do.call(rbind.data.frame, A[[i]][[j]])#
	}#
	Z$f_max 		= f_max#
	Z$mThreshold 	= mThreshold#
	Z$nSims			= sims#
	Z$SimDate 		= format(Sys.time(), "%m-%d-%y")#
	Z$y_HT_formula 	= y_HT_formula#
	Z$SmplngDsgn 	= SamplingDesign#
	Z$MrnsIWghtMtrx = weights#
	print(Sys.time() - TIME)#
	return(Z)#
}
setwd('/Users/KSauby/Documents/Projects/ACS/R')
sims=200#
n1=c(5,10,20,40)#
population <- createPopulation(x_start = 1, x_end = 30, y_start = 1, y_end = 30)#
avar = NULL#
ovar = c(#
	"Stricta",#
	"Pusilla",#
	"Cactus",#
	"CACA_on_Pusilla",#
	"CACA_on_Stricta",#
	"MEPR_on_Pusilla",#
	"MEPR_on_Stricta",#
	"Old_Moth_Evidence_Pusilla",#
	"Old_Moth_Evidence_Stricta"#
	# "Percent_Cover_Pusilla", # how do I do these? they are occupancy nor abundance#
	# "Percent_Cover_Stricta",#
	# "Height_Pusilla",#
	# "Height_Stricta",#
)		#
popdata = cactus.realizations
setwd('/Users/KSauby/Documents/Projects/ACS/R')
simulation_data <- sampleRealizations(popdata, sims, #
n1, population, avar, ovar)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
SamplingDesign="ACS"
setwd('/Users/KSauby/Documents/Projects/ACS/R')
y_HT_formula = "y_HT"
setwd('/Users/KSauby/Documents/Projects/ACS/R')
var_formula = "var_y_HT"
mThreshold = NULL;#
	f_max = 2;#
	SampleEstimators = FALSE;#
	SpatStat = TRUE;#
	mChar = TRUE;#
	popvar = "n.networks";#
	realvar = "realization";#
	weights="S"
setwd('/Users/KSauby/Documents/Projects/ACS/R')
n.networks <- realization <- i <- j <- Sampling <- . <- NetworkID <- NULL#
	TIME 					<- Sys.time()#
	popdata 				%<>% arrange(!!! syms(c(popvar, realvar)))#
	var 					<- c(ovar, avar, rvar)#
	n.patches 				<- length(unique(eval(parse(text=paste(#
								"popdata$",#
								popvar,#
								sep=""#
							)))))#
	nsample.length 			<- length(n1)#
	A 						<- vector("list", n.patches)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
POPVAR <- sym(popvar)#
	REALVAR <- sym(realvar)#
	n.networks <- realization <- i <- j <- Sampling <- . <- NetworkID <- NULL#
	TIME 					<- Sys.time()#
	popdata 				%<>% arrange(!!! POPVAR, REALVAR)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
popdata 				%<>% arrange(!!!c(POPVAR, REALVAR))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
popdata 				%<>% arrange_at(popvar, realvar))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
popdata 				%<>% arrange_at(popvar, realvar)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
popdata 				%<>% arrange_at(c(popvar, realvar))
head(popdata)
tail(realvar)
tail(popdata)
?arrangeat
?arrange_at
setwd('/Users/KSauby/Documents/Projects/ACS/R')
var 					<- c(ovar, avar, rvar)#
	n.patches 				<- length(unique(eval(parse(text=paste(#
								"popdata$",#
								popvar,#
								sep=""#
							)))))#
	nsample.length 			<- length(n1)#
	A 						<- vector("list", n.patches)#
	# c() - same code calculates the HT estimators for occupancy and abundance#
	oavar 					<- c(ovar, avar)#
	# empty dataframes will be cbind'd together after HT estimators calculated#
	occ_abund_var 			<- data.frame(row.names = 1:length(c(ovar, avar))) #
	occ_abund_mean 			<- data.frame(row.names = 1:length(c(ovar, avar)))#
	Ratio 					<- data.frame(row.names = 1:length(rvar))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
occ_abund_mean_names 	<- paste(ovar, avar, "MeanObs", sep="")#
	occ_abund_var_names 	<- paste(ovar, avar, "VarObs", sep="")#
	ratio_mean_names 		<- paste(rvar, "RMeanObs", sep="")#
	ratio_var_names 		<- paste(rvar, "RVarObs", sep="")#
	# i=1;j=1;k=1
i=1
j=1
k=1
l=1
setwd('/Users/KSauby/Documents/Projects/ACS/R')
cat(paste(i,j, sep="_"))#
			P 			<- popdata %>% #
							filter(n.networks==unique(#
								eval(parse(text=paste(#
									"popdata$",#
									popvar,#
									sep=""#
								)))#
							)[i])#
			N 			<- dim(P)[1]#
			n1 			<- n1[j]#
			A[[i]][[j]] <- list()
setwd('/Users/KSauby/Documents/Projects/ACS/R')
r 			<- (i - 1) * j + j#
			seeds 		<- runif(sims)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp_seed <- seeds[k]*100000
setwd('/Users/KSauby/Documents/Projects/ACS/R')
SamplingDesign=="ACS"
setwd('/Users/KSauby/Documents/Projects/ACS/R')
alldata <- createACS(#
						PopData=P, #
						seed=temp_seed, #
						n1=n1, #
						yVar=yVar#
					)
createACS
setwd('/Users/KSauby/Documents/Projects/ACS/R')
alldata <- createACS(#
						popdata=P, #
						seed=temp_seed, #
						n1=n1, #
						yvar=yvar#
					)
yVar
yvar="Cactus"
setwd('/Users/KSauby/Documents/Projects/ACS/R')
alldata <- createACS(#
						popdata=P, #
						seed=temp_seed, #
						n1=n1, #
						yvar=yvar#
					)
alldata
n1
setwd('/Users/KSauby/Documents/Projects/ACS/R')
alldata_all <- alldata
setwd('/Users/KSauby/Documents/Projects/ACS/R')
SampleEstimators == TRUE
setwd('/Users/KSauby/Documents/Projects/ACS/R')
alldata %<>% filter(Sampling!="Edge")
setwd('/Users/KSauby/Documents/Projects/ACS/R')
SamplingDesign=="ACS" | SamplingDesign=="RACS"
setwd('/Users/KSauby/Documents/Projects/ACS/R')
OAVAR <- syms(oavar)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
O <- alldata %>% #
						filter(Sampling!="Edge") %>%#
						select(!!!OAVAR, NetworkID, m))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
O <- alldata %>% #
						filter(Sampling!="Edge") %>%#
						select(!!!OAVAR, NetworkID, m)
head(O)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
m <- O$m#
					if (y_HT_formula == "y_HT_RACS")
{}
y_HT_formula == "y_HT_RACS"
setwd('/Users/KSauby/Documents/Projects/ACS/R')
HT_results[[1]] <- O %>%#
						.[, oavar, with=FALSE] %>% #
							.[, lapply(#
								.SD,#
								new_y_HT,#
								N	= N, #
								n1	= n1,#
								m	= m,#
								mThreshold = mThreshold#
							)]
setwd('/Users/KSauby/Documents/Projects/ACS/R')
HT_results[[1]] <- O %>%#
						dplyr::select(oavar)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
HT_results[[1]] <- O %>%#
						dplyr::select(!!!OAVAR)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
HT_results <- list()
setwd('/Users/KSauby/Documents/Projects/ACS/R')
HT_results[[1]] <- O %>%#
						dplyr::select(!!!OAVAR)
head(HT_results[[1]])
setwd('/Users/KSauby/Documents/Projects/ACS/R')
HT_results[[1]] <- O %>%#
							dplyr::select(!!!OAVAR) %>%#
							map(!new_y_HT(. ~ new_y_HT,#
								N	= N, #
								n1	= n1,#
								m	= m,#
								mThreshold = mThreshold))
library(purrr)
HT_results[[1]] <- O %>%#
							dplyr::select(!!!OAVAR) %>%#
							map(!new_y_HT(. ~ new_y_HT,#
								N	= N, #
								n1	= n1,#
								m	= m,#
								mThreshold = mThreshold))
new_y_HT
setwd('/Users/KSauby/Documents/Projects/ACS/R')
mThreshold
head(O)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
HT_results[[1]] <- O %>%#
							dplyr::select(!!!OAVAR) %>%#
							map(!new_y_HT(. ~ new_y_HT,#
								N	= N, #
								n1	= n1,#
								m	= m,#
								m_threshold = mThreshold))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
HT_results[[1]] <- O %>%#
							dplyr::select(!!!OAVAR) %>%#
							map(!new_y_HT(. ~ new_y_HT,#
								N	= N, #
								n1	= n1,#
								m	= m,#
								m_threshold = m_threshold))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
HT_results[[1]] <- O %>%#
							dplyr::select(!!!OAVAR) %>%#
							map(!new_y_HT(. ~ new_y_HT,#
								N	= N, #
								n1	= n1,#
								m	= m,#
								m_threshold = 2))
?t.test
setwd('/Users/KSauby/Documents/Projects/ACS/R')
HT_results[[1]] <- O %>%#
							dplyr::select(!!!OAVAR) %>%#
							map(!new_y_HT(.x,#
								N	= N, #
								n1	= n1,#
								m	= m,#
								m_threshold = 2))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
HT_results[[1]] <- O %>%#
							dplyr::select(!!!OAVAR) %>%#
							map(!new_y_HT(#
								N	= N, #
								n1	= n1,#
								m	= m,#
								m_threshold = 2))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
new_y_HT
setwd('/Users/KSauby/Documents/Projects/ACS/R')
HT_results[[1]] <- O %>%#
							dplyr::select(!!!OAVAR) %>%#
							map(!new_y_HT(. ~#
								N	= N, #
								n1	= n1,#
								m	= m,#
								m_threshold = 2))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
HT_results[[1]] <- O %>%#
							dplyr::select(!!!OAVAR) %>%#
							map(!new_y_HT(. ~ N	= N, #
								n1	= n1,#
								m	= m,#
								m_threshold = 2))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
HT_results[[1]] <- O %>%#
							dplyr::select(!!!OAVAR) %>%#
							map(new_y_HT(. ~ N	= N, #
								n1	= n1,#
								m	= m,#
								m_threshold = 2))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
HT_results[[1]] <- O %>%#
							dplyr::select(!!!OAVAR) %>%#
							map(~new_y_HT(. ~ N	= N, #
								n1	= n1,#
								m	= m,#
								m_threshold = 2))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
HT_results[[1]] <- O %>%#
							dplyr::select(!!!OAVAR) %>%#
							map(. ~new_y_HT(N= N, #
								n1	= n1,#
								m	= m,#
								m_threshold = 2))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
HT_results[[1]] <- O %>%#
							dplyr::select(!!!OAVAR) %>%#
							map( ~new_y_HT(N= N, #
								n1	= n1,#
								m	= m,#
								m_threshold = 2))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
HT_results[[1]] <- O %>%#
							dplyr::select(!!!OAVAR) %>%#
							map( ~new_y_HT(. ~ N= N, #
								n1	= n1,#
								m	= m,#
								m_threshold = 2))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
HT_results[[1]] <- O %>%#
							dplyr::select(!!!OAVAR) %>%#
							map( ~new_y_HT(y = .,  N= N, #
								n1	= n1,#
								m	= m,#
								m_threshold = 2))
HT_results[[1]]
HT_results[[1]]$Stricta
setwd('/Users/KSauby/Documents/Projects/ACS/R')
cat(paste(i,j, sep="_"))#
			P 			<- popdata %>% #
							filter(n.networks==unique(#
								eval(parse(text=paste(#
									"popdata$",#
									popvar,#
									sep=""#
								)))#
							)[i])#
			N 			<- dim(P)[1]#
			n1 			<- n1[j]#
			A[[i]][[j]] <- list()#
			r 			<- (i - 1) * j + j#
			seeds 		<- runif(sims)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp_seed <- seeds[k]*100000#
				if (SamplingDesign=="ACS") {#
					alldata <- createACS(#
						popdata=P, #
						seed=temp_seed, #
						n1=n1, #
						yvar=yvar#
					)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
alldata <- createRACS(#
						popdata=P, #
						seed=temp_seed, #
						n1=n1, #
						yvar=yvar,#
						f_max=f_max#
					)
)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp_seed <- seeds[k]*100000
setwd('/Users/KSauby/Documents/Projects/ACS/R')
alldata <- createACS(#
						popdata=P, #
						seed=temp_seed, #
						n1=n1, #
						yvar=yvar#
					)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
alldata <- createRACS(#
						popdata=P, #
						seed=temp_seed, #
						n1=n1, #
						yvar=yvar,#
						f_max=f_max#
					)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
alldata <- createSRS(#
						popdata=P, #
						seed=temp_seed, #
						n1=n1#
					)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
alldata_all <- alldata
setwd('/Users/KSauby/Documents/Projects/ACS/R')
SamplingDesign=="ACS" | SamplingDesign=="RACS"
setwd('/Users/KSauby/Documents/Projects/ACS/R')
SRSWOR_data <- alldata %>% #
							filter(Sampling=="SRSWOR")#
						alldata %<>% filter(Sampling!="Edge")#
						#apply simple mean/variance & simple ratio estimator to:#
						dats <- c("SRSWOR_data", "alldata")
str(dats)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
SampleMeanVar <- list()
setwd('/Users/KSauby/Documents/Projects/ACS/R')
dat <- eval(parse(text=dats[[n]])) %>%#
						filter(!!!OAVAR)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
dat <- eval(parse(text=dats[[n]]))
n
n=1
dat <- eval(parse(text=dats[[n]]))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
dat <- eval(parse(text=dats[[n]])) %>%#
						filter(!!!OAVAR)
head(dat)
OAVAR
setwd('/Users/KSauby/Documents/Projects/ACS/R')
dat <- eval(parse(text=dats[[n]])) %>%#
						select(!!!OAVAR)
head(dat)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
dat <- eval(parse(text=dats[[n]])) %>%#
						select(!!!OAVAR)#
							summarise_each(funs(#
								mean(., na.rm=T), #
								var(., na.rm=T)#
							))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
dat <- eval(parse(text=dats[[n]])) %>%#
						select(!!!OAVAR)#
							summarise_each(list(#
								mean(., na.rm=T), #
								var(., na.rm=T)#
							))
63-39
dat <- eval(parse(text=dats[[n]])) %>%#
						select(!!!OAVAR)#
							summarise_each(#
								mean = mean(., na.rm=T), #
								var = var(., na.rm=T)#
							))
dat <- eval(parse(text=dats[[n]])) %>%#
						select(!!!OAVAR)#
							summarise_each(#
								mean = mean(., na.rm=T), #
								var = var(., na.rm=T)#
							)
dat <- eval(parse(text=dats[[n]])) %>%#
						select(!!!OAVAR) %>%							summarise_each(#
								mean = mean(., na.rm=T), #
								var = var(., na.rm=T)#
							)
dat <- eval(parse(text=dats[[n]])) %>%#
						select(!!!OAVAR) %>%							summarise_each(#
								mean = mean(na.rm=T), #
								var = var(na.rm=T)#
							)
dat <- eval(parse(text=dats[[n]])) %>%#
						select(!!!OAVAR) %>%							summarise_all(#
								funs(mean, var), na.rm=T#
							)
head(dat)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
dat <- eval(parse(text=dats[[n]])) %>%#
							select(!!!OAVAR) %>%#
							summarise_each(list(#
								mean(., na.rm=T), #
								var(., na.rm=T)#
							))#
						names(dat) <- str_replace(names(x), "(.*)", "\\1_obs")
n
dats[[n]]
setwd('/Users/KSauby/Documents/Projects/ACS/R')
eval(parse(text=dats[[n]])) %>%#
							select(!!!OAVAR) %>%#
							summarise_each(list(#
								mean(., na.rm=T), #
								var(., na.rm=T)#
							))
eval(parse(text=dats[[n]])) %>%#
							select(!!!OAVAR)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
dat <- eval(parse(text=dats[[n]])) %>%#
							select(!!!OAVAR) %>%#
							summarise_all(#
								funs(mean, var), na.rm=T#
							)#
						names(dat) <- str_replace(names(x), "(.*)", "\\1_obs")
setwd('/Users/KSauby/Documents/Projects/ACS/R')
names(dat) <- str_replace(names(dat), "(.*)", "\\1_obs")
dat
setwd('/Users/KSauby/Documents/Projects/ACS/R')
dat$Plots <- dats[n]
dat
setwd('/Users/KSauby/Documents/Projects/ACS/R')
SampleMeanVar[[n]] <- dat
SampleMeanVar
setwd('/Users/KSauby/Documents/Projects/ACS/R')
!(is.null(rvar))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
SampleMeanVar %<>% rbind.fill
setwd('/Users/KSauby/Documents/Projects/ACS/R')
SmpRatio <- list()
n=1
setwd('/Users/KSauby/Documents/Projects/ACS/R')
SmpRatio[[n]] <- data.frame(Var1 = NA)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
rvar
l=1
setwd('/Users/KSauby/Documents/Projects/ACS/R')
y = eval(parse(#
										text=paste(#
											dats[n], #
											"$", #
											rvar[l], #
											sep=""#
										)#
								))#
								x = eval(parse(#
										text = paste(#
											dats[n], #
											"$",#
											str_sub(rvar[l],-7,-1), #
											sep=""#
										)#
								))#
								m = rep(1, length(y)) # equal P(inclusion) for all#
								SmpRatio[[n]]$Var1 <- R_hat(#
									y = y,#
									x = x,#
									N = N,#
									n1 = n1,#
									m = m#
								)#
							 	SmpRatio[[n]]$Var2 = var_R_hat(#
							 		y = y, #
							 		x = x,#
									N = N, #
							 		n1 = n1, #
							 		m = m#
							 	)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
names(SmpRatio[[n]])[(dim(SmpRatio[[n]])[2]-1): #
									dim(SmpRatio[[n]])[2]] <- #
									c(#
										paste(#
											rvar[l], #
											"RMeanObs", #
											sep=""#
										),#
										paste(#
											rvar[l], #
											"RVarObs", #
											sep=""#
										)#
									)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
SmpRatio[[n]] %<>% mutate(Plots = dats[n])
setwd('/Users/KSauby/Documents/Projects/ACS/R')
SmpRatio <- do.call(rbind.data.frame, Ratio)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
HT_results <- list()#
					# OCCUPANCY AND ABUNDANCE#
					# summarise data for mean calculations#
					O <- alldata %>% #
						filter(Sampling!="Edge") %>%#
						select(!!!OAVAR, NetworkID, m)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
m <- O$m#
					if (y_HT_formula == "y_HT_RACS")
setwd('/Users/KSauby/Documents/Projects/ACS/R')
HT_results[[1]] <- O %>%#
							dplyr::select(!!!OAVAR) %>%#
							summarise_all(#
								funs(new_y_HT),#
								N=N,#
								n1	= n1,#
								m	= m,#
								m_threshold = 2#
							)
HT_results[[1]]
setwd('/Users/KSauby/Documents/Projects/ACS/R')
HT_results[[1]] <- O %>%#
						dplyr::select(!!!OAVAR) %>%#
						summarise_all(#
							funs(y_HT),#
							N = N,#
							n1 = n1,#
							m = m#
						)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
occ_abund_mean_names
names(alldata)
head(SRSWOR_data)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
O_smd <- alldata %>% #
						select(!!!OAVAR, NetworkID, m)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
O_smd <- alldata %>% #
						select(!!!OAVAR, NetworkID, m) %>%#
						#.[, c(#
						#	paste(oavar, "_network_sum", sep=""), #
						#	"NetworkID", #
						#	"m"#
						#), with=FALSE] %>% #
						filter(!(is.na(NetworkID))) %>%#
						summarise_all(funs(x[1]))
head(O_smd)
tail(O_smd)
O_smd
setwd('/Users/KSauby/Documents/Projects/ACS/R')
O_smd <- alldata %>% #
						select(!!!OAVAR, NetworkID, m) %>%#
						#.[, c(#
						#	paste(oavar, "_network_sum", sep=""), #
						#	"NetworkID", #
						#	"m"#
						#), with=FALSE] %>% #
						filter(!(is.na(NetworkID))) %>%#
						summarise_all(funs(x[1]))#
						#as.data.table %>%#
						# .[, lapply(.SD, function(x) {x[1]}), by=NetworkID]#
					names(O_smd) <- str_replace(#
						names(O_smd), "(.*)", "\\1_network_sum"#
					)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
m <- O_smd$m

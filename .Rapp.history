install.packages("sp")
install.packages("gdistance")
install.packages("chron")
install.packages("unmarked")
install.packages("lme4")
install.packages("rgeos", repos="http://R-Forge.R-project.org", type="source")#
require(rgeos)
install.packages('rgdal',repos="http://www.stats.ox.ac.uk/pub/RWin")
library(rgdal)
install.packages("http://cran.r-project.org/src/contrib/rgdal_0.9-1.tar.gz", repos = NULL, type="source", configure.args = "--with-gdal-config=/Library/Frameworks/GDAL.framework/Versions/1.10/unix/bin/gdal-config --with-proj-include=/Library/Frameworks/PROJ.framework/unix/include --with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib")
18/1.618
189+114
library(lubridate)
library(magrittr)
seasons <- data.frame(#
	   SE = as.POSIXct(c("2009-3-20", "2010-3-20", "2011-3-20", "2012-3-20", #
            "2013-3-20", "2014-3-20"), format="%Y-%m-%d"),#
	   SS = as.POSIXct(c("2009-6-21", "2010-6-21", "2011-6-21", "2012-6-20",#
            "2013-6-20", "2014-6-20"), format="%Y-%m-%d"),#
	   FE = as.POSIXct(c("2009-9-22", "2010-9-23", "2011-9-23", "2012-9-22",#
            "2013-9-22", "2014-9-22"), format="%Y-%m-%d"),#
	   WS = as.POSIXct(c("2009-12-21", "2010-12-21", "2011-12-22", "2012-12-21", #
            "2013-12-21", "2014-12-21"), format="%Y-%m-%d")#
    )#
#
    assignSeason <- function(dat, SeasonStarts=seasons) {#
	    dat %<>% mutate(#
		    Season = lapply(Date,#
				function(x) {#
					findInterval(#
						x, #
						SeasonStarts[which(year(x)==year(SeasonStarts$WS)), ]#
					)#
				}#
			) %>% unlist	#
		)#
	    dat[which(dat$Season==0 | dat$Season==4), ]$Season 	<- "Winter"#
	    dat[which(dat$Season==1), ]$Season 					<- "Spring"#
	    dat[which(dat$Season==2), ]$Season 					<- "Summer"#
	    dat[which(dat$Season==3), ]$Season 					<- "Fall"#
	    return(dat)#
    }
dat = data.frame(#
	    Date = as.POSIXct(strptime(as.Date("2011-12-01", format = "%Y-%m-%d") + #
            (0:10)*30, format="%Y-%m-%d" ))#
    )#
    dat %>% assignSeason
library(dplyr)
dat = data.frame(#
	    Date = as.POSIXct(strptime(as.Date("2011-12-01", format = "%Y-%m-%d") + #
            (0:10)*30, format="%Y-%m-%d" ))#
    )#
    dat %>% assignSeason
library(devtoolks)
library(devtools)
?install_github
devtools::install_github("ksauby/ACSampling", auth_token="2ab30a602e52fae481f4249cc25e892c0a9ccfc7", subdir="/code/Restricted_ACS_Simulations/ACSampling", repos=NULL)
devtools::install_github("ksauby/ACSampling", auth_token="2794c3f10db92f525181a0b1f6c19064fe3a2ef3", subdir="/code/Restricted_ACS_Simulations/ACSampling", repos=NULL)
devtools::install("~/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="~/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="~/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install_local(path="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
library(devtools)
devtools::install_local(path="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
install.packages("~/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
??limit
37-13
24/37
37-13
26/37
25/37
23/37
29/37
30/37
22/37
30/37
29/37
28/37
27/37
35/37
30/37
29/37
26/37
26/37 - .6757
28/37
30/37
29/37
37-12
25/37
219*.8
219*.8 - 17
26/3
17/900
42/900
49/900
29/40
1/25
8/25
10/25
(7.5 + 3.75)/15
12*0.75
11 * 0.75
11/15
11*0.25
11/15 * 6
32/41 +0.03.5
32/41 + 0.035
(32/41 + 0.035)*100
100/41
23/40 * 100
(23/40 * 100)+5
(164 + 13.5 + 6)
(164 + 13.5 + 6)/365
(164 + 13.5 + 6 + (50))/365
(164 + 13.5 + 6 + (60))/365
(164 + 13.5 + 6 + (70))/365
(164 + 13.5 + 6 + (75))/365
102/40
102/41
?table
9.49/2
12.75+8.25
(10.5 + 6.5)/(12.75+8.25)
.25^2 * 2
(.25^2 * 2)^0.5
(.25^2 * 2)^0.5 * 2
3/8
5/8
6/8
30*1.5
40*15
40*1.5
13.25 - 4.5
(276.29+8.75)/365
16*3
16*4
84/12
9/12
9/12*14
22+60+78+80+88+98
22+38+18+2+8+10
239/785
(239+53)/785
.492+.139
.412+.166+.002
.412/.58
.166/.58
.412*.58
.71*.58
98-54
22+49+43+33+36+44
60-11
78-26
80-35
88-47
98-52
22+49+52+45+41+46
library(RMark)
?test_ddl
data(dipper)    dipper.processed=process.data(dipper,groups=("sex"))    release.gof(dipper.processed)
4+19+7+12
4+17.83+7+12
40.83/42
40.83/42*14
14
(11.25+5)/(25.5 + 10.25 - 14)
365*0.6666
365*0.6666 - 75.89
5/6 * 2
5/6 * 2 + 75.89
365*0.6666 -77.55667
365*0.6666 -77.55667 - 6 - 13 - 1
145.7523/2
15*3
11*5
8/12*14
4+15.33+5.5+12
(4+15.33+5.5+12)
(4+15.33+5.5+12)/(4+19+7+12)
(4+19+7+12)
(4+15.33+5.5+12)/(4+19+7+12)*14
2.5+17.5+12
32/42
32/42 * 14
4+12+6.5+12
(4+12+6.5+12)/42 * 14
5/6*2
5/6*2 + 0.25
5/6*2 + 0.5
2577.77/12
15/20
15/20*6
300 - 4*50
300 - 4*40
4.5/12*14
9+9+7+9
33.5/34 * 14
32/34 * 14
32/34*14
7+8.5+7+7
(7+8.5+7+7)/34 * 14
(7+5.5+5.5+8.5)/34 * 14
(7+5.5+5.5+8.5)/(9+7+9+9) * 14
9+7+9+9
(14.25+7.25)/(24.75+10.25-9)
(16.5+7.75)/(24.75+10.25)
(16.5+7.75)/(24.75+10.25)*6
(5.25+5.5)/(22.5+10.5)
(5.25+5.5)/(22.5+10.5)*6
(9.75+5.5)/(24.7+10.25-5)*6
(9.75+5.5)/(24.7+10.25-5)
3.98/6
(9.75+5.5)/(24.7+10.25-10)
(9.75+5.5)/(24.7+10.25-10)*6
5/6*2
1.83-5/6*2
1.83-4/6*2
5/6*2 + 0.5
4/6*2 + 0.5
4/6*2
4/6 + 0.5
4/6*2 + 0.5
33/34 * 14
17.5*4
24*4 + 1.75*4
library(dplyr)
library(plyr)
600*.22
setwd('/Users/KSauby/Documents/Projects/ACSampling_project')
library(ProjectTemplate)#
#
# when working on a Windows computer#
# setwd("C:/Users/KSauby/Dropbox/gradschool/Research/Projects/sampling")#
#
# load project#
load.project()
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript')
rmarkdown::render('Manuscript.Rmd')
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
# -----------------------------------------------------------------------------##
# ABUNDANCE VARIABLES#
# -----------------------------------------------------------------------------##
# -----------------------------------------------------------------------------##
# OCCUPANCY VARIABLES#
# -----------------------------------------------------------------------------##
ovar <- c(#
	"Stricta",#
	"Pusilla",#
	"Cactus"#
)#
# -----------------------------------------------------------------------------##
# RATIO VARIABLES#
# -----------------------------------------------------------------------------##
rvar <- c(#
	"MEPR_on_Stricta",#
	"CACA_on_Stricta",#
	"Percent_Cover_Stricta",#
	"Height_Stricta",#
	"Old_Moth_Evidence_Pusilla",#
	"Old_Moth_Evidence_Stricta"#
)#
#
# "Percent_Cover_Pusilla",#
# "Height_Pusilla",#
# )
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
# REALIZATION DATA#
x_start 		<- 1#
x_end 			<- 30#
y_start 		<- 1#
y_end 			<- 30#
n.networks 		<- c(5, 15, 10, 20, 30, 40)#
n.realizations 	<- 1#
SpeciesInfo 	<- PlotSurveys_season1#
buffer			<- 5#
start.seed		<- 1#
variables		<- ovar#
# CREATE REALIZATIONS#
patch_data <- createSpeciesPatchRealizations(#
	x_start, #
	x_end,#
	y_start, #
	y_end, #
	buffer, #
	n.networks, #
	n.realizations, #
	SpeciesInfo, #
	start.seed,#
	variables#
)#
#
patch_data_for_tables <- patch_data#
#
# convert NAs to zeros#
 patch_data[,c(#
 	"CACA_on_Pusilla",#
 	"CACA_on_Stricta",#
 	"MEPR_on_Pusilla",#
 	"MEPR_on_Stricta",#
 	"Old_Moth_Evidence_Pusilla",#
 	"Old_Moth_Evidence_Stricta",#
 	"Percent_Cover_Pusilla",#
 	"Percent_Cover_Stricta",#
 	"Height_Pusilla",#
 	"Height_Stricta"#
 )] %<>% apply(., 2, NA_is_Zero_Function)
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
N 					<- patch_data$N[1]#
nsamples			<- c( 20, 30, 40, 75, 100) #, 150, 200)#
grouping.variables	<- c("n.networks", "realization")#
#
patch_data <- summarizeNetworkInformation(#
	population_data = patch_data, #
	variables = c(ovar, rvar), #
	grouping.variables = grouping.variables, #
	nsamples = nsamples, #
	m_var="Cactus"#
)
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
# calculate realization summary statistics#
#
patch_data_summary <- calculatePopulationSummaryStatistics(#
	population_data 				= patch_data, #
	summary.variables 				= c(ovar,rvar), #
	population.grouping.variable 	= "n.networks", #
	ratio.variables 				= rvar#
)#
#
# fix population name#
patch_data_summary[[2]]$population %<>% as.factor()#
levels(patch_data_summary[[2]]$population) <- 1:6#
#
patch_data_summary[[1]] %<>% setnames("n.networks", "population")#
patch_data_summary[[1]]$population %<>% as.factor()#
levels(patch_data_summary[[1]]$population) <- 1:6#
#
patch_data %<>% setnames("n.networks", "population")#
patch_data$population %<>% as.factor()#
levels(patch_data$population) <- 1:6#
### ADD LEVELS TO PATCH_DATA BASED ON THIS SUMMARY#
#
# LEVELS OF CACTUS OCCUPANCY#
Cactus_mean <- patch_data_summary[[2]] %>% filter(variable=="Cactus") %$% Mean#
patch_data$population.for.plotting <- patch_data$population#
levels(patch_data$population.for.plotting) <- c(#
	expression(atop(#
		'Population 1',#
		'Cactus Occupancy'~mu[C]~' = 0.032'#
	)), #
	expression(atop(#
		'Population 2',#
		mu[C]~' = 0.064'#
	)), #
	expression(atop(#
		'Population 3',#
		mu[C]~' = 0.098'#
	)), #
	expression(atop(#
		'Population 4',#
		mu[C]~' = 0.144'#
	)), #
	expression(atop(#
		'Population 5',#
		mu[C]~' = 0.157'#
	)), #
	expression(atop(#
		'Population 6',#
		mu[C]~' = 0.24'#
	))#
)#
#
# LEVELS OF STRICTA OCCUPANCY#
patch_data$population.for.plotting -> patch_data$stricta_occ#
Stricta_mean <- patch_data_summary[[2]] %>% filter(variable=="Stricta") %$% Mean#
#
levels(patch_data$stricta_occ) <- c(#
	expression(atop(#
		'Population 1',#
		italic("O. stricta")*","~mu[s]~' = 0.019'#
	)), #
	expression(atop(#
		'Population 2',#
		mu[s]~' = 0.047'#
	)), #
	expression(atop(#
		'Population 3',#
		mu[s]~' = 0.063'#
	)), #
	expression(atop(#
		'Population 4',#
		mu[s]~' = 0.091'#
	)), #
	expression(atop(#
		'Population 5',#
		mu[s]~' = 0.111'#
	)), #
	expression(atop(#
		'Population 6',#
		mu[s]~' = 0.152'#
	))#
)#
#
# LEVELS OF PUSILLA OCCUPANCY#
patch_data$population.for.plotting -> patch_data$pusilla_occ#
Pusilla_mean <- patch_data_summary[[2]] %>% filter(variable=="Pusilla") %$% Mean#
levels(patch_data$pusilla_occ) <- c(#
	expression(atop(#
		'Population 1',#
		italic("O. pusilla")*","~mu[p]~' = 0.014'#
	)), #
	expression(atop(#
		'Population 2',#
		mu[p]~' = 0.03'#
	)), #
	expression(atop(#
		'Population 3',#
		mu[p]~' = 0.042'#
	)), #
	expression(atop(#
		'Population 4',#
		mu[p]~' = 0.078'#
	)), #
	expression(atop(#
		'Population 5',#
		mu[p]~' = 0.053'#
	)), #
	expression(atop(#
		'Population 6',#
		mu[p]~' = 0.11'#
	))#
) #
patch_data %<>% mutate(#
	Stricta_vars = paste(Stricta, CACA_on_Stricta, MEPR_on_Stricta),#
	Pusilla_vars = paste(Pusilla, CACA_on_Pusilla, MEPR_on_Pusilla),#
	Cactus_vars = paste(Pusilla, Stricta),#
	Cactus_occ = Cactus,#
	Moth_damage_vars = paste(#
		Cactus,#
		Old_Moth_Evidence_Pusilla,#
		Old_Moth_Evidence_Stricta#
	)#
)#
patch_data$Cactus_occ %<>% as.factor#
levels(patch_data$Cactus_occ) <- c("Cacti Absent", "Cacti Present")#
#
patch = patch_data %>% filter(population==unique(patch_data$population)[3])#
#
patch_data_stricta <- patch_data %>% filter(Stricta_vars!="0 0 0")#
patch_data_stricta$Stricta_vars %<>% as.factor#
patch_data_pusilla <- patch_data %>% filter(Pusilla_vars!="0 0 0")#
patch_data_pusilla$Pusilla_vars %<>% as.factor#
patch_data_cactus <- patch_data %>% filter(Cactus_vars!="0 0")#
patch_data_cactus$Cactus_vars %<>% as.factor#
patch_data_moth_damage <- patch_data %>% filter(Moth_damage_vars!="0 0 0")#
patch_data_moth_damage$Moth_damage_vars %<>% as.factor#
# Optimal m_threshold#
#
expand.grid.df <- function(...) Reduce(function(...) merge(..., by=NULL), list(...))#
patch_data_summary_f_max <- expand.grid.df(patch_data_summary[[1]], f_max = 1:3) %>%#
setnames("y", "f_max")#
#
patch_data_summary_f_max$optimal_m_threshold <- c(#
	3,3,3,4,3,4,#
	5,7,7,8,7,9,#
	7,10,10,12,11,14#
)
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
addNSRSWORplotsVar <- function(A, variable) {#
	A %<>%#
		setnames(variable, "temp_var") %>%#
		mutate(#
			N.SRSWOR.plots = NA,#
			N.SRSWOR.plots = gsub(#
				"^.*_",#
				"",#
				gsub(#
					"__.*$", #
					"", #
					temp_var#
				)#
			)#
		) %>%#
		setnames("temp_var", variable)#
	return(A)#
}	#
addMThresholdVar <- function(A, variable) {#
	A %<>%#
		setnames(variable, "temp_var") %>%#
		mutate(#
			m_threshold = NA,#
			m_threshold = gsub(#
				"^.*__",#
				"",#
				temp_var#
			)#
		) %>%#
		setnames("temp_var", variable)#
	return(A)#
}	#
# columns to select#
select_columns <- c(#
	"m", "x", "y", "N",#
	"pi_i_n1_20", "pi_i_n1_30", "pi_i_n1_40", "pi_i_n1_75", "pi_i_n1_100"#
)#
m_threshold = c(1:14)#
#
results <- list()#
for (i in 1:6) {#
	Z <- patch_data %>% filter(n.networks == levels(n.networks)[i])#
	Z %<>% dplyr::select_(.dots=select_columns)#
	# calculate expected inclusion probabilities with new pi_i (m_threshold)#
	# add to population data#
	for (j in 1:length(m_threshold)) {#
		A <- Z %>% filter(m <= m_threshold[j])#
		B <- Z %>% filter(m > m_threshold[j])#
		if (dim(A)[1] > 0) {#
			A$pii_20 <- pi_i(N=900, n1=20, m=A$m)#
			A$pii_30 <- pi_i(N=900, n1=30, m=A$m)#
			A$pii_40 <- pi_i(N=900, n1=40, m=A$m)#
			A$pii_75 <- pi_i(N=900, n1=75, m=A$m)#
			A$pii_100 <- pi_i(N=900, n1=100, m=A$m)#
		}#
		if (dim(B)[1] > 0) {#
			B$pii_20 <- pi_i(N=900, n1=20, m=m_threshold[j])#
			B$pii_30 <- pi_i(N=900, n1=30, m=m_threshold[j])#
			B$pii_40 <- pi_i(N=900, n1=40, m=m_threshold[j])#
			B$pii_75 <- pi_i(N=900, n1=75, m=m_threshold[j])#
			B$pii_100 <- pi_i(N=900, n1=100, m=m_threshold[j])#
		}#
		Z <- rbind.fill(A,B) %>%#
			setnames("pii_20", paste("pii_20", m_threshold[j], sep="__")) %>%#
			setnames("pii_30", paste("pii_30", m_threshold[j], sep="__")) %>%#
			setnames("pii_40", paste("pii_40", m_threshold[j], sep="__")) %>%#
			setnames("pii_75", paste("pii_75", m_threshold[j], sep="__")) %>%#
			setnames("pii_100", paste("pii_100", m_threshold[j], sep="__"))#
	}#
	Z %<>% mutate(coords = paste(x,y,sep="_"))#
	A <- Z %>% #
		dplyr::select(-c(#
			pi_i_n1_20, #
			pi_i_n1_30, #
			pi_i_n1_40, #
			pi_i_n1_75, #
			pi_i_n1_100#
		)) %>% #
		reshape2::melt(id.vars=c("m","x","y","N","coords")) %>%#
		setnames("value", "new_pii_value") %>%#
		setnames("variable", "new_pii_variable")#
	B <- Z %>% #
		dplyr::select(#
			coords, #
			pi_i_n1_20, #
			pi_i_n1_30, #
			pi_i_n1_40, #
			pi_i_n1_75, #
			pi_i_n1_100#
		) %>% #
		reshape2::melt(id.vars=c("coords")) %>%#
		setnames("value", "Thompson_pii_value") %>%#
		setnames("variable", "Thompson_pii_variable")#
	A %<>% addNSRSWORplotsVar(variable = "new_pii_variable") %>% #
		addMThresholdVar(variable = "new_pii_variable") %>% #
		dplyr::select(-new_pii_variable)#
	B %<>% addNSRSWORplotsVar(variable = "Thompson_pii_variable") %>% #
		dplyr::select(-Thompson_pii_variable)#
	results[[i]] <- A %>%#
		merge(B, by=c("coords", "N.SRSWOR.plots"), all=T) %>%#
		mutate(n.networks = i)#
	assign(paste("results_pop", i, sep="_"), value = Z)#
}#
results <- do.call(rbind.data.frame, results)
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript')
rmarkdown::render('Manuscript.Rmd')
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript')
patch = patch_data %>% filter(population==unique(patch_data$population)[3])
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript')
S <- createSRS(population=patch, seed=26, n1=10) %>%#
mutate(Design="Simple Random Sampling w/o Replacement (SRSWOR)")#
S[5, c("x", "y")] <- c(22,24)#
S[8, c("x", "y")] <- c(23,6)#
S[10, c("x", "y")] <- c(14,19)#
initial_sample <- S[, c("x", "y")]#
#
S196 <- createSRS(population=patch, seed=26, n1=196) %>%#
mutate(Design="(c) SRSWOR, n = 196")#
S196[5, c("x", "y")] <- c(22,24)#
S196[8, c("x", "y")] <- c(23,6)#
S196[10, c("x", "y")] <- c(14,19)#
#
S45 <- createSRS(population=patch, seed=26, n1=45) %>%#
mutate(Design="(d) SRSWOR, n = 45")#
S45[5, c("x", "y")] <- c(22,24)#
S45[8, c("x", "y")] <- c(23,6)#
S45[10, c("x", "y")] <- c(14,19)#
#
## Example of ACS Sampling
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript')
sampling_example_patch_occupancy = dataproc::Mean(patch$Cactus)#
#
#patch[patch$Cactus == 0,]$Cactus <- "Cacti Absent"#
#patch[patch$Cactus == 1,]$Cactus <- "Cacti Present"#
#
ACS = createACS(population_data=patch, seed=26, n1=10, y_variable="Cactus", initial_sample=initial_sample) %>%#
mutate(Design="(a) ACS, n = 196")#
RACS = createRACS(population=patch, seed=26, n1=10, y_variable="Cactus", initial_sample=initial_sample) %>%#
mutate(Design="(b) RACS, n = 45")
? createACS
str(patch)
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript')
population_data=patch
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript')
seed=26
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript')
n1=10
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript')
y_variable="Cactus"
setwd('/Users/KSauby/Documents/Projects/ACS/R')
. <- Sampling <- y_val <- NULL#
	if (is.data.frame(initial_sample)) {#
		S <- merge(population_data, initial_sample, all.y=TRUE) 	#
		S$Sampling <- "Primary Sample"#
	} else {#
		if (!is.na(seed)) {set.seed(seed)}#
		S <- createSRS(population=population_data, n1=n1)#
	}#
	# add the rest of the units for each network in the initial sample#
	Z = population %>%#
		dplyr::filter(NetworkID %in% S$NetworkID) %>%#
		merge(S, all.x=T)#
	Networks = Z %>% dplyr::filter(eval(parse(text=y_variable)) > condition)#
	# if there are units that satisfy the condition, fill in edge units#
	if (dim(Networks)[1] > 0) {#
		names(Z)[names(Z) == y_variable] <- 'y_val'#
		#Z %<>%#
		#	as.data.table %>%#
		#	setnames(y_variable, "y_val")#
		if (dim(Z[which(is.na(Z$Sampling)), ])[1] > 0) {#
			Z[which(is.na(Z$Sampling)), ]$Sampling <- "Cluster"#
		}#
		# fill in edge units#
		E = data.table(#
			x = as.numeric(rowSums(expand.grid(Networks$x, c(1,-1,0,0)))),#
		  	y = rowSums(expand.grid(Networks$y, c(0,0,1,-1))),#
			Sampling = "Edge",#
			key = c("x", "y")#
		) %>%#
		rowwise() %>%#
		mutate(xy = paste(x,y)) %>%#
		ungroup()#
		Z %<>% #
			rowwise() %>%#
			mutate(xy = paste(x,y)) %>% #
			ungroup()#
		E %<>% filter(!(xy %in% Z$xy))#
		Z %<>% #
			rbind.fill(E) %>% #
			as.data.table %>% #
			setkey("x", "y") %>% #
	 	   	unique %>%#
			dplyr::select(-xy)#
		# remove plots outside of population extent
Z %<>% subset(#
			.,#
			x %in% population_data$x &#
			y %in% population_data$y#
		)#
		# fill in values for Edge units#
		if (dim(Z[ is.na(Z$y_val) ])[1] > 0) {#
			Z[ Sampling=="Edge" ]$y_val <- 0#
			Z[ Sampling=="Edge" ]$m <- 0#
		}	#
		setnames(Z, "y_val", y_variable)#
		Z %<>%#
			arrange()#
		return(Z)#
	}
setwd('/Users/KSauby/Documents/Projects/ACS/R')
. <- Sampling <- y_val <- NULL#
	if (is.data.frame(initial_sample)) {#
		S <- merge(population_data, initial_sample, all.y=TRUE) 	#
		S$Sampling <- "Primary Sample"#
	} else {#
		if (!is.na(seed)) {set.seed(seed)}#
		S <- createSRS(population=population_data, n1=n1)#
	}
setwd('/Users/KSauby/Documents/Projects/ACS/R')
Z = population %>%#
		dplyr::filter(NetworkID %in% S$NetworkID) %>%#
		merge(S, all.x=T)#
	Networks = Z %>% dplyr::filter(eval(parse(text=y_variable)) > condition)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
. <- Sampling <- y_val <- NULL#
	if (is.data.frame(initial_sample)) {#
		S <- merge(population_data, initial_sample, all.y=TRUE) 	#
		S$Sampling <- "Primary Sample"#
	} else {#
		if (!is.na(seed)) {set.seed(seed)}#
		S <- createSRS(population=population_data, n1=n1)#
	}
setwd('/Users/KSauby/Documents/Projects/ACS/R')
initial_sample
setwd('/Users/KSauby/Documents/Projects/ACS/R')
is.data.frame(initial_sample)
str(S)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
. <- Sampling <- y_val <- NULL#
	if (is.data.frame(initial_sample)) {#
		S <- merge(population_data, initial_sample, all.y=TRUE) 	#
		S$Sampling <- "Primary Sample"#
	} else {#
		if (!is.na(seed)) {set.seed(seed)}#
		S <- createSRS(population=population_data, n1=n1)#
	}#
	# add the rest of the units for each network in the initial sample#
	Z = population_data %>%#
		dplyr::filter(NetworkID %in% S$NetworkID) %>%#
		merge(S, all.x=T)#
	Networks = Z %>% dplyr::filter(eval(parse(text=y_variable)) > condition)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
condition=0
setwd('/Users/KSauby/Documents/Projects/ACS/R')
. <- Sampling <- y_val <- NULL#
	if (is.data.frame(initial_sample)) {#
		S <- merge(population_data, initial_sample, all.y=TRUE) 	#
		S$Sampling <- "Primary Sample"#
	} else {#
		if (!is.na(seed)) {set.seed(seed)}#
		S <- createSRS(population=population_data, n1=n1)#
	}#
	# add the rest of the units for each network in the initial sample#
	Z = population_data %>%#
		dplyr::filter(NetworkID %in% S$NetworkID) %>%#
		merge(S, all.x=T)#
	Networks = Z %>% dplyr::filter(eval(parse(text=y_variable)) > condition)#
	# if there are units that satisfy the condition, fill in edge units#
	if (dim(Networks)[1] > 0) {#
		names(Z)[names(Z) == y_variable] <- 'y_val'#
		#Z %<>%#
		#	as.data.table %>%#
		#	setnames(y_variable, "y_val")#
		if (dim(Z[which(is.na(Z$Sampling)), ])[1] > 0) {#
			Z[which(is.na(Z$Sampling)), ]$Sampling <- "Cluster"#
		}#
		# fill in edge units#
		E = data.table(#
			x = as.numeric(rowSums(expand.grid(Networks$x, c(1,-1,0,0)))),#
		  	y = rowSums(expand.grid(Networks$y, c(0,0,1,-1))),#
			Sampling = "Edge",#
			key = c("x", "y")#
		) %>%#
		rowwise() %>%#
		mutate(xy = paste(x,y)) %>%#
		ungroup()#
		Z %<>% #
			rowwise() %>%#
			mutate(xy = paste(x,y)) %>% #
			ungroup()#
		E %<>% filter(!(xy %in% Z$xy))#
		Z %<>% #
			rbind.fill(E) %>% #
			as.data.table %>% #
			setkey("x", "y") %>% #
	 	   	unique %>%#
			dplyr::select(-xy)#
		# remove plots outside of population extent#
		Z %<>% subset(#
			.,#
			x %in% population_data$x &#
			y %in% population_data$y#
		)#
		# fill in values for Edge units#
		if (dim(Z[ is.na(Z$y_val) ])[1] > 0) {#
			Z[ Sampling=="Edge" ]$y_val <- 0#
			Z[ Sampling=="Edge" ]$m <- 0#
		}	#
		setnames(Z, "y_val", y_variable)#
		Z %<>%#
			arrange()#
		return(Z)#
	} else {#
		# if there are NO units that satisfy the condition, stop here and return the SRSWOR sample#
		return(Z)#
	}
setwd('/Users/KSauby/Documents/Projects')
setwd("./ACS")#
#setwd("./modresproc")#
#devtools::test()#
devtools::document()#
devtools::install()
library(ACSampling)

library(rgeos)
require(rgeos)
library(rgeos)
install.packages("rgdal", repos="http://R-Forge.R-project.org")#
require(rgdal)
R CMD INSTALL ~/Downloads/rgdal_0.9-1.tar.gz --configure-args='--with-gdal-config=/Library/Frameworks/GDAL.framework/Programs/gdal-config#
 --with-proj-include=/Library/Frameworks/PROJ.framework/Headers#
 --with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib'
R CMD INSTALL ~/Downloads/rgdal_0.9-1.tar.gz --configure-args='--with-gdal-config=/Library/Frameworks/GDAL.framework/Programs/gdal-config--with-proj-include=/Library/Frameworks/PROJ.framework/Headers--with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib'
library(lme3)
library(lme4)
300/241
.244*30
1.25*300
1.25*240
7*12
7849-7527
322/1353
8028-7527
501/1353
8028-7957
1353-501
852/71
7956-7878
8176-8029
8176-8092
250*.75
250*.25
42*2 + 17*2
118/19
21/6.2
59.5*.75
59.5*.5 + 59.5
71/12
597/80
597/8
432/8
15*8 + 9*3
?seq_len
7.25/3
7.25/4
for(i in 0:9){x=cos(2*pi/10*i);y=x+1;z=(y-2)*22;pie(c(y,8-y),col=c(0,7),init.angl=135-z,bo=F,la=NA)}
install.packages("ProjectTemplate")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("data.table")
install.packages("corrgram")
install.packages("survival")
install.packages("shapefiles")
install.packages("rgdal")
install.packages("PBSmapping")
install.packages("sp")
install.packages("gdistance")
install.packages("chron")
install.packages("unmarked")
install.packages("lme4")
install.packages("rgeos", repos="http://R-Forge.R-project.org", type="source")#
require(rgeos)
install.packages('rgdal',repos="http://www.stats.ox.ac.uk/pub/RWin")
library(rgdal)
install.packages("http://cran.r-project.org/src/contrib/rgdal_0.9-1.tar.gz", repos = NULL, type="source", configure.args = "--with-gdal-config=/Library/Frameworks/GDAL.framework/Versions/1.10/unix/bin/gdal-config --with-proj-include=/Library/Frameworks/PROJ.framework/unix/include --with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib")
18/1.618
189+114
library(lubridate)
library(magrittr)
seasons <- data.frame(#
	   SE = as.POSIXct(c("2009-3-20", "2010-3-20", "2011-3-20", "2012-3-20", #
            "2013-3-20", "2014-3-20"), format="%Y-%m-%d"),#
	   SS = as.POSIXct(c("2009-6-21", "2010-6-21", "2011-6-21", "2012-6-20",#
            "2013-6-20", "2014-6-20"), format="%Y-%m-%d"),#
	   FE = as.POSIXct(c("2009-9-22", "2010-9-23", "2011-9-23", "2012-9-22",#
            "2013-9-22", "2014-9-22"), format="%Y-%m-%d"),#
	   WS = as.POSIXct(c("2009-12-21", "2010-12-21", "2011-12-22", "2012-12-21", #
            "2013-12-21", "2014-12-21"), format="%Y-%m-%d")#
    )#
#
    assignSeason <- function(dat, SeasonStarts=seasons) {#
	    dat %<>% mutate(#
		    Season = lapply(Date,#
				function(x) {#
					findInterval(#
						x, #
						SeasonStarts[which(year(x)==year(SeasonStarts$WS)), ]#
					)#
				}#
			) %>% unlist	#
		)#
	    dat[which(dat$Season==0 | dat$Season==4), ]$Season 	<- "Winter"#
	    dat[which(dat$Season==1), ]$Season 					<- "Spring"#
	    dat[which(dat$Season==2), ]$Season 					<- "Summer"#
	    dat[which(dat$Season==3), ]$Season 					<- "Fall"#
	    return(dat)#
    }
dat = data.frame(#
	    Date = as.POSIXct(strptime(as.Date("2011-12-01", format = "%Y-%m-%d") + #
            (0:10)*30, format="%Y-%m-%d" ))#
    )#
    dat %>% assignSeason
library(dplyr)
dat = data.frame(#
	    Date = as.POSIXct(strptime(as.Date("2011-12-01", format = "%Y-%m-%d") + #
            (0:10)*30, format="%Y-%m-%d" ))#
    )#
    dat %>% assignSeason
library(devtoolks)
library(devtools)
?install_github
devtools::install_github("ksauby/ACSampling", auth_token="2ab30a602e52fae481f4249cc25e892c0a9ccfc7", subdir="/code/Restricted_ACS_Simulations/ACSampling", repos=NULL)
devtools::install_github("ksauby/ACSampling", auth_token="2794c3f10db92f525181a0b1f6c19064fe3a2ef3", subdir="/code/Restricted_ACS_Simulations/ACSampling", repos=NULL)
devtools::install("~/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="~/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="~/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install_local(path="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
library(devtools)
devtools::install_local(path="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
install.packages("~/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
??limit
37-13
24/37
37-13
26/37
25/37
23/37
29/37
30/37
22/37
30/37
29/37
28/37
27/37
35/37
30/37
29/37
26/37
26/37 - .6757
28/37
30/37
29/37
37-12
25/37
219*.8
219*.8 - 17
26/3
17/900
42/900
49/900
29/40
1/25
8/25
10/25
(7.5 + 3.75)/15
12*0.75
11 * 0.75
11/15
11*0.25
11/15 * 6
32/41 +0.03.5
32/41 + 0.035
(32/41 + 0.035)*100
100/41
23/40 * 100
(23/40 * 100)+5
(164 + 13.5 + 6)
(164 + 13.5 + 6)/365
(164 + 13.5 + 6 + (50))/365
(164 + 13.5 + 6 + (60))/365
(164 + 13.5 + 6 + (70))/365
(164 + 13.5 + 6 + (75))/365
102/40
102/41
?table
9.49/2
12.75+8.25
(10.5 + 6.5)/(12.75+8.25)
.25^2 * 2
(.25^2 * 2)^0.5
(.25^2 * 2)^0.5 * 2
3/8
5/8
6/8
30*1.5
40*15
40*1.5
13.25 - 4.5
(276.29+8.75)/365
16*3
16*4
84/12
9/12
9/12*14
22+60+78+80+88+98
22+38+18+2+8+10
239/785
(239+53)/785
.492+.139
.412+.166+.002
.412/.58
.166/.58
.412*.58
.71*.58
98-54
22+49+43+33+36+44
60-11
78-26
80-35
88-47
98-52
22+49+52+45+41+46
library(RMark)
?test_ddl
data(dipper)    dipper.processed=process.data(dipper,groups=("sex"))    release.gof(dipper.processed)
4+19+7+12
4+17.83+7+12
40.83/42
40.83/42*14
14
(11.25+5)/(25.5 + 10.25 - 14)
365*0.6666
365*0.6666 - 75.89
5/6 * 2
5/6 * 2 + 75.89
365*0.6666 -77.55667
365*0.6666 -77.55667 - 6 - 13 - 1
145.7523/2
15*3
11*5
8/12*14
4+15.33+5.5+12
(4+15.33+5.5+12)
(4+15.33+5.5+12)/(4+19+7+12)
(4+19+7+12)
(4+15.33+5.5+12)/(4+19+7+12)*14
2.5+17.5+12
32/42
32/42 * 14
4+12+6.5+12
(4+12+6.5+12)/42 * 14
5/6*2
5/6*2 + 0.25
5/6*2 + 0.5
2577.77/12
15/20
15/20*6
300 - 4*50
300 - 4*40
4.5/12*14
9+9+7+9
33.5/34 * 14
32/34 * 14
32/34*14
7+8.5+7+7
(7+8.5+7+7)/34 * 14
(7+5.5+5.5+8.5)/34 * 14
(7+5.5+5.5+8.5)/(9+7+9+9) * 14
9+7+9+9
(14.25+7.25)/(24.75+10.25-9)
(16.5+7.75)/(24.75+10.25)
(16.5+7.75)/(24.75+10.25)*6
(5.25+5.5)/(22.5+10.5)
(5.25+5.5)/(22.5+10.5)*6
(9.75+5.5)/(24.7+10.25-5)*6
(9.75+5.5)/(24.7+10.25-5)
3.98/6
(9.75+5.5)/(24.7+10.25-10)
(9.75+5.5)/(24.7+10.25-10)*6
5/6*2
1.83-5/6*2
1.83-4/6*2
5/6*2 + 0.5
4/6*2 + 0.5
4/6*2
4/6 + 0.5
4/6*2 + 0.5
33/34 * 14
17.5*4
24*4 + 1.75*4
library(dplyr)
library(plyr)
600*.22
library(ACSampling)
setwd('/Users/KSauby/Documents/Projects')
setwd("./ACS")#
#setwd("./modresproc")#
devtools::test()
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
test_that("calculatePopulationSummaryStatistics", {#
	CactusRealizationSummary <- createCactusRealizationSummary(CactusRealizations)#
	# TEST RATIO VARIABLE CALCULATIONS#
	# population 1#
	pop_1_stricta <- CactusRealizations %>% filter(population==1, Stricta==1)#
	mean_pop_1_CACA_on_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==1, variable=="CACA_on_Stricta") %$% #
		Mean#
	mean_pop_1_MEPR_on_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==1, variable=="MEPR_on_Stricta") %$% #
		Mean#
	mean_pop_1_Old_Moth_Evidence_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==1, variable=="Old_Moth_Evidence_Stricta") %$% #
		Mean#
	var_pop_1_CACA_on_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==1, variable=="CACA_on_Stricta") %$% #
		Var#
	var_pop_1_MEPR_on_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==1, variable=="MEPR_on_Stricta") %$% #
		Var#
	var_pop_1_Old_Moth_Evidence_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==1, variable=="Old_Moth_Evidence_Stricta") %$% #
		Var#
	CV_pop_1_CACA_on_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==1, variable=="CACA_on_Stricta") %$% #
		CV#
	CV_pop_1_MEPR_on_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==1, variable=="MEPR_on_Stricta") %$% #
		CV#
	CV_pop_1_Old_Moth_Evidence_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==1, variable=="Old_Moth_Evidence_Stricta") %$% #
		CV#
	expect_that(#
		mean_pop_1_CACA_on_Stricta,#
		equals(mean(pop_1_stricta$CACA_on_Stricta))#
	)#
	expect_that(#
		mean_pop_1_MEPR_on_Stricta,#
		equals(mean(pop_1_stricta$MEPR_on_Stricta))#
	)#
	expect_that(#
		mean_pop_1_Old_Moth_Evidence_Stricta,#
		equals(mean(pop_1_stricta$Old_Moth_Evidence_Stricta))#
	)#
	expect_that(#
		var_pop_1_CACA_on_Stricta,#
		equals(PopVariance(pop_1_stricta$CACA_on_Stricta))#
	)#
	expect_that(#
		var_pop_1_MEPR_on_Stricta,#
		equals(PopVariance(pop_1_stricta$MEPR_on_Stricta))#
	)#
	expect_that(#
		var_pop_1_Old_Moth_Evidence_Stricta,#
		equals(PopVariance(pop_1_stricta$Old_Moth_Evidence_Stricta))#
	)#
	expect_that(#
		CV_pop_1_CACA_on_Stricta,#
		equals(popCV(pop_1_stricta$CACA_on_Stricta))#
	)#
	expect_that(#
		CV_pop_1_MEPR_on_Stricta,#
		equals(popCV(pop_1_stricta$MEPR_on_Stricta))#
	)#
	expect_that(#
		CV_pop_1_Old_Moth_Evidence_Stricta,#
		equals(popCV(pop_1_stricta$Old_Moth_Evidence_Stricta))#
	)#
	# population 6#
	pop_6_stricta <- CactusRealizations %>% filter(population==6, Stricta==1)#
	mean_pop_6_CACA_on_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==6, variable=="CACA_on_Stricta") %$% #
		Mean#
	mean_pop_6_MEPR_on_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==6, variable=="MEPR_on_Stricta") %$% #
		Mean#
	mean_pop_6_Old_Moth_Evidence_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==6, variable=="Old_Moth_Evidence_Stricta") %$% #
		Mean#
	var_pop_6_CACA_on_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==6, variable=="CACA_on_Stricta") %$% #
		Var#
	var_pop_6_MEPR_on_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==6, variable=="MEPR_on_Stricta") %$% #
		Var#
	var_pop_6_Old_Moth_Evidence_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==6, variable=="Old_Moth_Evidence_Stricta") %$% #
		Var#
	expect_that(#
		mean_pop_6_CACA_on_Stricta,#
		equals(mean(pop_6_stricta$CACA_on_Stricta))#
	)#
	expect_that(#
		mean_pop_6_MEPR_on_Stricta,#
		equals(mean(pop_6_stricta$MEPR_on_Stricta))#
	)#
	expect_that(#
		mean_pop_6_Old_Moth_Evidence_Stricta,#
		equals(mean(pop_6_stricta$Old_Moth_Evidence_Stricta))#
	)#
	expect_that(#
		var_pop_6_CACA_on_Stricta,#
		equals(PopVariance(pop_6_stricta$CACA_on_Stricta))#
	)#
	expect_that(#
		var_pop_6_MEPR_on_Stricta,#
		equals(PopVariance(pop_6_stricta$MEPR_on_Stricta))#
	)#
	expect_that(#
		var_pop_6_Old_Moth_Evidence_Stricta,#
		equals(PopVariance(pop_6_stricta$Old_Moth_Evidence_Stricta))#
	)#
})#
# ALSO TEST OVAR#
#
test_that("Sampling Bias and Relative Efficiency, population 6, SamplingDesign=ACS, N.SRSWOR.plots==100", {	#
	patch_data_summary_wide <- createWidePopulationSummaryStatistics(#
		PopulationSummaryStatistics = CactusRealizationSummary,#
		ovar = "Stricta",#
		rvar = c("MEPR_on_Stricta", "CACA_on_Stricta", "Percent_Cover_Stricta", #
			"Height_Stricta", "Old_Moth_Evidence_Stricta")#
	)#
	population_6 <- patch_data_summary_wide %>% filter(population==6)#
	# MANUALLY CALCULATE MSE and RE#
	temp_sim_data <- simulation_data %>% filter(#
		population==6, #
		SamplingDesign=="ACS", #
		N.SRSWOR.plots==100#
	)#
	temp_sim_data_ratio <- simulation_data %>% filter(#
		population==6, #
		SamplingDesign=="ACS", #
		N.SRSWOR.plots==100,#
		Stricta_mean_observed > 0#
	)#
	# occupancy variables#
	mean_MSE_Stricta <- sum(#
		(#
			# observed#
			temp_sim_data$Stricta_mean_observed - #
			# true#
			population_6$Stricta_mean#
		)^2#
	# n simulations#
	)/dim(temp_sim_data)[1]#
	RE_Stricta = (#
		population_6$Stricta_var/unique(temp_sim_data$N.Total.plots_mean) *#
		(1 - unique(temp_sim_data$N.Total.plots_mean)/population_6$N)#
	) /	mean_MSE_Stricta#
	# ratio variables#
	mean_MSE_CACA_on_Stricta <- sum(#
		(#
			# observed#
			temp_sim_data_ratio$CACA_on_Stricta_ratio_mean_observed - #
			# true#
			population_6$CACA_on_Stricta_ratio_mean#
		)^2#
	# n simulations#
	)/dim(temp_sim_data_ratio)[1]#
	mean_MSE_MEPR_on_Stricta <- sum(#
		(#
			# observed#
			temp_sim_data_ratio$MEPR_on_Stricta_ratio_mean_observed - #
			# true#
			population_6$MEPR_on_Stricta_ratio_mean#
		)^2#
	# n simulations#
	)/dim(temp_sim_data_ratio)[1]#
	mean_MSE_Old_Moth_Evidence_Stricta <- sum(#
		(#
			# observed#
			temp_sim_data_ratio$Old_Moth_Evidence_Stricta_ratio_mean_observed - #
			# true#
			population_6$Old_Moth_Evidence_Stricta_ratio_mean#
		)^2#
	# n simulations#
	)/dim(temp_sim_data_ratio)[1]#
	RE_CACA_on_Stricta = (#
		population_6$CACA_on_Stricta_ratio_var/unique(temp_sim_data_ratio$N.Total.plots_mean) *#
		(1 - unique(temp_sim_data_ratio$N.Total.plots_mean)/population_6$N)#
	) /	mean_MSE_CACA_on_Stricta#
	RE_MEPR_on_Stricta = (#
		population_6$MEPR_on_Stricta_ratio_var/unique(temp_sim_data_ratio$N.Total.plots_mean) *#
		(1 - unique(temp_sim_data_ratio$N.Total.plots_mean)/population_6$N)#
	) /	mean_MSE_MEPR_on_Stricta#
	RE_Old_Moth_Evidence_Stricta = (#
		population_6$Old_Moth_Evidence_Stricta_ratio_var/unique(temp_sim_data_ratio$N.Total.plots_mean) *#
		(1 - unique(temp_sim_data_ratio$N.Total.plots_mean)/population_6$N)#
	) /	mean_MSE_Old_Moth_Evidence_Stricta#
	# CALCULATE MSE and RE USING FUNCTIONS#
	example_bias = calculateSamplingBias(#
		population_data_summary	= population_6, #
		temp_sim_data = temp_sim_data, #
		sampling.grouping.variables	= c("N.Total.plots_mean", "N.SRSWOR.plots", #
			"SamplingDesign"), #
		population.grouping.variables = "population",#
		ovar = "Stricta", #
		rvar = c("MEPR_on_Stricta", "CACA_on_Stricta", "Percent_Cover_Stricta", #
			"Height_Stricta", "Old_Moth_Evidence_Stricta")#
	)#
	RE_values <- calculateRE(#
		population_data = population_6,#
		MSE_ComparisonSamplingDesign = example_bias,#
		population.grouping.variables = "population",#
		sample.size.variable = "N.Total.plots_mean",#
		ovar = "Stricta",#
		rvar = c("MEPR_on_Stricta", "CACA_on_Stricta", "Percent_Cover_Stricta", #
			"Height_Stricta", "Old_Moth_Evidence_Stricta")#
	)#
	# TEST FUNCTION CALCULATIONS	#
	# 	occupancy variables#
	# 		MSE#
	expect_that(#
		mean_MSE_Stricta,#
		equals(example_bias$Stricta_mean_MSE)#
	)#
	#		RE#
	expect_that(#
		RE_Stricta,#
		equals(RE_values$Stricta_RE)#
	)#
	# 	ratio variables#
	# 		MSE#
	expect_that(#
		mean_MSE_CACA_on_Stricta,#
		equals(example_bias$CACA_on_Stricta_ratio_mean_MSE)#
	)#
	expect_that(#
		mean_MSE_MEPR_on_Stricta,#
		equals(example_bias$MEPR_on_Stricta_ratio_mean_MSE)#
	)#
	expect_that(#
		mean_MSE_Old_Moth_Evidence_Stricta,#
		equals(example_bias$Old_Moth_Evidence_Stricta_ratio_mean_MSE)#
	)#
	#		RE#
	expect_that(#
		RE_CACA_on_Stricta,#
		equals(RE_values$CACA_on_Stricta_ratio_RE)#
	)#
	expect_that(#
		RE_MEPR_on_Stricta,#
		equals(RE_values$MEPR_on_Stricta_ratio_RE)#
	)#
	expect_that(#
		RE_Old_Moth_Evidence_Stricta,#
		equals(RE_values$Old_Moth_Evidence_Stricta_ratio_RE)#
	)#
})#
test_that("Sampling Bias and Relative Efficiency, population 1, SamplingDesign=ACS, N.SRSWOR.plots==40", {	#
	patch_data_summary_wide <- createWidePopulationSummaryStatistics(#
		PopulationSummaryStatistics = CactusRealizationSummary,#
		ovar = "Stricta",#
		rvar = c("MEPR_on_Stricta", "CACA_on_Stricta", "Percent_Cover_Stricta", #
			"Height_Stricta", "Old_Moth_Evidence_Stricta")#
	)#
	population_1 <- patch_data_summary_wide %>% filter(population==1)#
	# MANUALLY CALCULATE MSE and RE#
	temp_sim_data <- simulation_data %>% filter(#
		population==1, #
		SamplingDesign=="ACS", #
		N.SRSWOR.plots==40#
	)#
	temp_sim_data_ratio <- simulation_data %>% filter(#
		population==1, #
		SamplingDesign=="ACS", #
		N.SRSWOR.plots==40,#
		Stricta_mean_observed > 0#
	)#
	# occupancy variables#
	mean_MSE_Stricta <- sum(#
		(#
			# observed#
			temp_sim_data$Stricta_mean_observed - #
			# true#
			population_1$Stricta_mean#
		)^2#
	# n simulations#
	)/dim(temp_sim_data)[1]#
	RE_Stricta = (#
		population_1$Stricta_var/unique(temp_sim_data$N.Total.plots_mean) *#
		(1 - unique(temp_sim_data$N.Total.plots_mean)/population_1$N)#
	) /	mean_MSE_Stricta#
	# ratio variables#
	mean_MSE_CACA_on_Stricta <- sum(#
		(#
			# observed#
			temp_sim_data_ratio$CACA_on_Stricta_ratio_mean_observed - #
			# true#
			population_1$CACA_on_Stricta_ratio_mean#
		)^2#
	# n simulations#
	)/dim(temp_sim_data_ratio)[1]#
	mean_MSE_MEPR_on_Stricta <- sum(#
		(#
			# observed#
			temp_sim_data_ratio$MEPR_on_Stricta_ratio_mean_observed - #
			# true#
			population_1$MEPR_on_Stricta_ratio_mean#
		)^2#
	# n simulations#
	)/dim(temp_sim_data_ratio)[1]#
	mean_MSE_Old_Moth_Evidence_Stricta <- sum(#
		(#
			# observed#
			temp_sim_data_ratio$Old_Moth_Evidence_Stricta_ratio_mean_observed - #
			# true#
			population_1$Old_Moth_Evidence_Stricta_ratio_mean#
		)^2#
	# n simulations#
	)/dim(temp_sim_data_ratio)[1]#
	RE_CACA_on_Stricta = (#
		population_1$CACA_on_Stricta_ratio_var/unique(temp_sim_data_ratio$N.Total.plots_mean) *#
		(1 - unique(temp_sim_data_ratio$N.Total.plots_mean)/population_1$N)#
	) /	mean_MSE_CACA_on_Stricta#
	RE_MEPR_on_Stricta = (#
		population_1$MEPR_on_Stricta_ratio_var/unique(temp_sim_data_ratio$N.Total.plots_mean) *#
		(1 - unique(temp_sim_data_ratio$N.Total.plots_mean)/population_1$N)#
	) /	mean_MSE_MEPR_on_Stricta#
	RE_Old_Moth_Evidence_Stricta = (#
		population_1$Old_Moth_Evidence_Stricta_ratio_var/unique(temp_sim_data_ratio$N.Total.plots_mean) *#
		(1 - unique(temp_sim_data_ratio$N.Total.plots_mean)/population_1$N)#
	) /	mean_MSE_Old_Moth_Evidence_Stricta#
	# CALCULATE MSE and RE USING FUNCTIONS#
	example_bias = calculateSamplingBias(#
		population_data_summary	= population_1, #
		temp_sim_data = temp_sim_data, #
		sampling.grouping.variables	= c("N.Total.plots_mean", "N.SRSWOR.plots", #
			"SamplingDesign"), #
		population.grouping.variables = "population",#
		ovar = "Stricta", #
		rvar = c("MEPR_on_Stricta", "CACA_on_Stricta", "Percent_Cover_Stricta", #
			"Height_Stricta", "Old_Moth_Evidence_Stricta")#
	)#
	RE_values <- calculateRE(#
		population_data = population_1,#
		MSE_ComparisonSamplingDesign = example_bias,#
		population.grouping.variables = "population",#
		sample.size.variable = "N.Total.plots_mean",#
		ovar = "Stricta",#
		rvar = c("MEPR_on_Stricta", "CACA_on_Stricta", "Percent_Cover_Stricta", #
			"Height_Stricta", "Old_Moth_Evidence_Stricta")#
	)#
	# TEST FUNCTION CALCULATIONS	#
	# 	occupancy variables#
	# 		MSE#
	expect_that(#
		mean_MSE_Stricta,#
		equals(example_bias$Stricta_mean_MSE)#
	)#
	#		RE#
	expect_that(#
		RE_Stricta,#
		equals(RE_values$Stricta_RE)#
	)#
	# 	ratio variables#
	# 		MSE#
	expect_that(#
		mean_MSE_CACA_on_Stricta,#
		equals(example_bias$CACA_on_Stricta_ratio_mean_MSE)#
	)#
	expect_that(#
		mean_MSE_MEPR_on_Stricta,#
		equals(example_bias$MEPR_on_Stricta_ratio_mean_MSE)#
	)#
	expect_that(#
		mean_MSE_Old_Moth_Evidence_Stricta,#
		equals(example_bias$Old_Moth_Evidence_Stricta_ratio_mean_MSE)#
	)#
	#		RE#
	expect_that(#
		RE_CACA_on_Stricta,#
		equals(RE_values$CACA_on_Stricta_ratio_RE)#
	)#
	expect_that(#
		RE_MEPR_on_Stricta,#
		equals(RE_values$MEPR_on_Stricta_ratio_RE)#
	)#
	expect_that(#
		RE_Old_Moth_Evidence_Stricta,#
		equals(RE_values$Old_Moth_Evidence_Stricta_ratio_RE)#
	)#
})
setwd('/Users/KSauby/Documents/Projects')
setwd("./ACS")#
#setwd("./modresproc")#
devtools::test()#
devtools::document()#
devtools::install()

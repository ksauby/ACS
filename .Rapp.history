8/25
10/25
(7.5 + 3.75)/15
12*0.75
11 * 0.75
11/15
11*0.25
11/15 * 6
32/41 +0.03.5
32/41 + 0.035
(32/41 + 0.035)*100
100/41
23/40 * 100
(23/40 * 100)+5
(164 + 13.5 + 6)
(164 + 13.5 + 6)/365
(164 + 13.5 + 6 + (50))/365
(164 + 13.5 + 6 + (60))/365
(164 + 13.5 + 6 + (70))/365
(164 + 13.5 + 6 + (75))/365
102/40
102/41
?table
9.49/2
setwd('/Users/KSauby/Documents/Projects/ACSampling_project')
library(ProjectTemplate)#
#
# when working on a Windows computer#
# setwd("C:/Users/KSauby/Dropbox/gradschool/Research/Projects/sampling")#
#
# load project#
load.project()
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
population = patch_data_5#
seed=26#
n1=40#
y_variable = "Cactus"
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
source("1_set_variables.R")#
source("2_create_realizations.R")#
source("3_summarise_network_information.R")#
source("4_calculate_realization_summary_statistics.R")
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
population = patch_data_5#
seed=26#
n1=40#
y_variable = "Cactus"
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
patch_data_5 <- patch_data %>% filter(n.networks == levels(n.networks)[5])
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
population = patch_data_5#
seed=26#
n1=40#
y_variable = "Cactus"
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
y_value <- x <- y <- Sampling <- NetworkID <- m <- everything <- NULL#
	# get primary sample#
	if (is.data.frame(initial_sample)) {#
		S = merge(population, initial_sample, all.y=TRUE) 	#
		S$Sampling <- "Primary Sample"#
		S$step <- 0#
	} else {#
		if (!is.na(seed)) {set.seed(seed)}#
		S <- createSRS(population, n1)#
		S$step <- 0#
	}#
	# filter out primary samples matching condition#
	Networks <- S %>% #
		filter(eval(parse(text = paste("S$", y_variable, sep=""))) > condition)
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
condition=0
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
initial_sample=NA
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
y_value <- x <- y <- Sampling <- NetworkID <- m <- everything <- NULL#
	# get primary sample#
	if (is.data.frame(initial_sample)) {#
		S = merge(population, initial_sample, all.y=TRUE) 	#
		S$Sampling <- "Primary Sample"#
		S$step <- 0#
	} else {#
		if (!is.na(seed)) {set.seed(seed)}#
		S <- createSRS(population, n1)#
		S$step <- 0#
	}#
	# filter out primary samples matching condition#
	Networks <- S %>% #
		filter(eval(parse(text = paste("S$", y_variable, sep=""))) > condition)
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
names(S)[names(S) == y_variable] <- 'y_value'#
		names(population)[names(population) == y_variable] <- 'y_value'#
		# Lists to save data#
		Y = list()#
		Z = list()#
		# step 1: get all neighbors of primary samples matching condition#
	    for (i in 1:dim(Networks)[1]) {#
			L = Networks[i, ]#
    	    Y[[i]] <- list()#
			# STEP 1#
			Y[[i]][[1]] <- data.frame()#
    	    # northern neighbor of SRSWOR plot#
    	    Y[[i]][[1]][1, "x"] = L$x#
    	    Y[[i]][[1]][1, "y"] = L$y + 1#
	      	# southern neighbor of SRSWOR plot#
	      	Y[[i]][[1]][2, "x"] = L$x#
	      	Y[[i]][[1]][2, "y"] = L$y - 1#
	      	# eastern neighbor of SRSWOR plot#
	      	Y[[i]][[1]][3, "x"] = L$x + 1#
	      	Y[[i]][[1]][3, "y"] = L$y#
	      	# western neighbor of SRSWOR plot#
	      	Y[[i]][[1]][4, "x"] = L$x - 1#
	      	Y[[i]][[1]][4, "y"] = L$y#
			Y[[i]] <- do.call(rbind.fill, Y[[i]])#
		}
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
Z[[1]] <- do.call(rbind.fill, Y)
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
ggplot() +#
geom_point(data=patch_data_5, aes(x,y, size=factor(Cactus),#
		shape=factor(Cactus))) +#
scale_shape_manual(values=c(1, rep(16, length(2:13)))) +#
geom_point(data=Z[[1]], aes(x,y, shape=factor(Cactus), colour=factor(step)), size=7)
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
ggplot() +#
geom_point(data=patch_data_5, aes(x,y, size=factor(Cactus),#
		shape=factor(Cactus))) +#
scale_shape_manual(values=c(1, rep(16, length(2:13)))) +#
geom_point(data=Z[[1]], aes(x,y, shape=factor(y_value), colour=factor(step)), size=7)
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
Z[[1]]$step <- 1#
		Z[[1]] -> B
max=3
j=2
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
last_step = j-1#
				A <- B %>% filter(step == last_step)#
				Z[[j]] <- list()#
				for (k in 1:dim(sample)[1]) {#
					Z[[j]][[k]] <- data.frame()#
					# northern neighbor of cluster plot#
		    	    kx=A$x[k]#
		    	    ky=A$y[k] + 1#
					# if plot has cacti, survey its neighbors#
					if (dim(population %>% #
						filter(#
		  					y_value > condition, #
		  			  		x==kx,#
		  			  		y==ky#
					))[1] > 0#
					) {#
					    # neighbor to north#
					    Z[[j]][[k]][1, "x"] = kx#
					   	Z[[j]][[k]][1, "y"] = ky + 1#
					    # neighbor to east#
					    Z[[j]][[k]][2, "x"] = kx + 1#
					    Z[[j]][[k]][2, "y"] = ky#
					    # neighbor to west#
					    Z[[j]][[k]][3, "x"] = kx - 1#
					    Z[[j]][[k]][3, "y"] = ky#
					}#
			      	# southern neighbor of cluster plot#
		    	    kx=A$x[k]#
		    	    ky=A$y[k] - 1#
					# 		if plot has cacti, survey its neighbors#
					if (dim(population %>% #
						filter(#
		  					y_value > condition, #
							x==kx,#
							y==ky#
					))[1] > 0#
					) {#
						# neighbor to south#
					    Z[[j]][[k]][4, "x"] = kx#
					    Z[[j]][[k]][4, "y"] = ky - 1#
					   	# neighbor to east#
					    Z[[j]][[k]][5, "x"] = kx + 1#
					    Z[[j]][[k]][5, "y"] = ky#
					    # neighbor to west#
					    Z[[j]][[k]][6, "x"] = kx - 1#
					    Z[[j]][[k]][6, "y"] = ky#
					}#
			      	# eastern neighbor of cluster plot#
		    	    kx=A$x[k] + 1#
		    	    ky=A$y[k]#
					# 		if plot has cacti, survey its neighbors#
					if (dim(population %>% #
					  	filter(#
		  					y_value > condition, #
					  	 	x==kx,#
					  	  	y==ky#
					))[1] > 0#
					) {#
			        	# neighbor to south#
			        	Z[[j]][[k]][7, "x"] = kx#
			        	Z[[j]][[k]][7, "y"] = ky - 1#
			        	# neighbor to north#
			        	Z[[j]][[k]][8, "x"] = kx#
			        	Z[[j]][[k]][8, "y"] = ky + 1#
			        	# neighbor to east#
			        	Z[[j]][[k]][9, "x"] = kx + 1#
			        	Z[[j]][[k]][9, "y"] = ky#
					}#
			      	# western neighbor of SRSWOR plot#
		    	    kx=A$x[k] - 1#
		    	    ky=A$y[k]#
					# 		if plot has cacti, survey its neighbors#
					if (dim(population %>% #
					  	filter(#
		  					y_value > condition, #
					  	  	x==kx,#
					  	  	y==ky#
					))[1] > 0#
					) {#
			        	# neighbor to south#
			        	Z[[j]][[k]][10, "x"] = kx#
			        	Z[[j]][[k]][10, "y"] = ky - 1#
			        	# neighbor to north#
			        	Z[[j]][[k]][11, "x"] = kx#
			        	Z[[j]][[k]][11, "y"] = ky + 1#
			        	# neighbor to west#
			        	Z[[j]][[k]][12, "x"] = kx - 1#
			        	Z[[j]][[k]][12, "y"] = ky#
			      	}#
					if (dim(Z[[j]][[k]])[1] > 0) {#
						Z[[j]][[k]]$step <- j#
					}#
				}#
				B <- do.call(rbind.fill, Z[[j]]) %>% #
					filter(!(is.na(x))) %>%#
					rbind.fill(B) %>%#
					.[!duplicated(.[, c("x", "y")]), ]	#
				Z[[j]] <- do.call(rbind.fill, Z[[j]])
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
y_value <- x <- y <- Sampling <- NetworkID <- m <- everything <- NULL#
	# get primary sample#
	if (is.data.frame(initial_sample)) {#
		S = merge(population, initial_sample, all.y=TRUE) 	#
		S$Sampling <- "Primary Sample"#
		S$step <- 0#
	} else {#
		if (!is.na(seed)) {set.seed(seed)}#
		S <- createSRS(population, n1)#
		S$step <- 0#
	}#
	# filter out primary samples matching condition#
	Networks <- S %>% #
		filter(eval(parse(text = paste("S$", y_variable, sep=""))) > condition)
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
population = patch_data_5#
seed=26#
n1=40#
y_variable = "Cactus"
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
y_value <- x <- y <- Sampling <- NetworkID <- m <- everything <- NULL#
	# get primary sample#
	if (is.data.frame(initial_sample)) {#
		S = merge(population, initial_sample, all.y=TRUE) 	#
		S$Sampling <- "Primary Sample"#
		S$step <- 0#
	} else {#
		if (!is.na(seed)) {set.seed(seed)}#
		S <- createSRS(population, n1)#
		S$step <- 0#
	}#
	# filter out primary samples matching condition#
	Networks <- S %>% #
		filter(eval(parse(text = paste("S$", y_variable, sep=""))) > condition)
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
names(S)[names(S) == y_variable] <- 'y_value'#
		names(population)[names(population) == y_variable] <- 'y_value'#
		# Lists to save data#
		Y = list()#
		Z = list()#
		# step 1: get all neighbors of primary samples matching condition#
	    for (i in 1:dim(Networks)[1]) {#
			L = Networks[i, ]#
    	    Y[[i]] <- list()#
			# STEP 1#
			Y[[i]][[1]] <- data.frame()#
    	    # northern neighbor of SRSWOR plot#
    	    Y[[i]][[1]][1, "x"] = L$x#
    	    Y[[i]][[1]][1, "y"] = L$y + 1#
	      	# southern neighbor of SRSWOR plot#
	      	Y[[i]][[1]][2, "x"] = L$x#
	      	Y[[i]][[1]][2, "y"] = L$y - 1#
	      	# eastern neighbor of SRSWOR plot#
	      	Y[[i]][[1]][3, "x"] = L$x + 1#
	      	Y[[i]][[1]][3, "y"] = L$y#
	      	# western neighbor of SRSWOR plot#
	      	Y[[i]][[1]][4, "x"] = L$x - 1#
	      	Y[[i]][[1]][4, "y"] = L$y#
			Y[[i]] <- do.call(rbind.fill, Y[[i]])#
		}#
		Z[[1]] <- do.call(rbind.fill, Y)#
		# merge neighbors and primary samples matching condition#
		Z[[1]]$step <- 1#
		Z[[1]] -> B
max
j
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
last_step = j-1#
				A <- B %>% filter(step == last_step)#
				Z[[j]] <- list()
Z
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
for (k in 1:dim(sample)[1]) {#
					Z[[j]][[k]] <- data.frame()#
					# northern neighbor of cluster plot#
		    	    kx=A$x[k]#
		    	    ky=A$y[k] + 1#
					# if plot has cacti, survey its neighbors#
					if (dim(population %>% #
						filter(#
		  					y_value > condition, #
		  			  		x==kx,#
		  			  		y==ky#
					))[1] > 0#
					) {#
					    # neighbor to north#
					    Z[[j]][[k]][1, "x"] = kx#
					   	Z[[j]][[k]][1, "y"] = ky + 1#
					    # neighbor to east#
					    Z[[j]][[k]][2, "x"] = kx + 1#
					    Z[[j]][[k]][2, "y"] = ky#
					    # neighbor to west#
					    Z[[j]][[k]][3, "x"] = kx - 1#
					    Z[[j]][[k]][3, "y"] = ky#
					}#
			      	# southern neighbor of cluster plot#
		    	    kx=A$x[k]#
		    	    ky=A$y[k] - 1#
					# 		if plot has cacti, survey its neighbors#
					if (dim(population %>% #
						filter(#
		  					y_value > condition, #
							x==kx,#
							y==ky#
					))[1] > 0#
					) {#
						# neighbor to south#
					    Z[[j]][[k]][4, "x"] = kx#
					    Z[[j]][[k]][4, "y"] = ky - 1#
					   	# neighbor to east#
					    Z[[j]][[k]][5, "x"] = kx + 1#
					    Z[[j]][[k]][5, "y"] = ky#
					    # neighbor to west#
					    Z[[j]][[k]][6, "x"] = kx - 1#
					    Z[[j]][[k]][6, "y"] = ky#
					}#
			      	# eastern neighbor of cluster plot#
		    	    kx=A$x[k] + 1#
		    	    ky=A$y[k]#
					# 		if plot has cacti, survey its neighbors#
					if (dim(population %>% #
					  	filter(#
		  					y_value > condition, #
					  	 	x==kx,#
					  	  	y==ky#
					))[1] > 0#
					) {#
			        	# neighbor to south#
			        	Z[[j]][[k]][7, "x"] = kx#
			        	Z[[j]][[k]][7, "y"] = ky - 1#
			        	# neighbor to north#
			        	Z[[j]][[k]][8, "x"] = kx#
			        	Z[[j]][[k]][8, "y"] = ky + 1#
			        	# neighbor to east#
			        	Z[[j]][[k]][9, "x"] = kx + 1#
			        	Z[[j]][[k]][9, "y"] = ky#
					}#
			      	# western neighbor of SRSWOR plot#
		    	    kx=A$x[k] - 1#
		    	    ky=A$y[k]#
					# 		if plot has cacti, survey its neighbors#
					if (dim(population %>% #
					  	filter(#
		  					y_value > condition, #
					  	  	x==kx,#
					  	  	y==ky#
					))[1] > 0#
					) {#
			        	# neighbor to south#
			        	Z[[j]][[k]][10, "x"] = kx#
			        	Z[[j]][[k]][10, "y"] = ky - 1#
			        	# neighbor to north#
			        	Z[[j]][[k]][11, "x"] = kx#
			        	Z[[j]][[k]][11, "y"] = ky + 1#
			        	# neighbor to west#
			        	Z[[j]][[k]][12, "x"] = kx - 1#
			        	Z[[j]][[k]][12, "y"] = ky#
			      	}#
					if (dim(Z[[j]][[k]])[1] > 0) {#
						Z[[j]][[k]]$step <- j#
					}#
				}
Z
k=1
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
Z[[j]][[k]] <- data.frame()#
					# northern neighbor of cluster plot#
		    	    kx=A$x[k]#
		    	    ky=A$y[k] + 1#
					# if plot has cacti, survey its neighbors
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
if (dim(population %>% #
						filter(#
		  					y_value > condition, #
		  			  		x==kx,#
		  			  		y==ky#
					))[1] > 0#
					) {#
					    # neighbor to north#
					    Z[[j]][[k]][1, "x"] = kx#
					   	Z[[j]][[k]][1, "y"] = ky + 1#
					    # neighbor to east#
					    Z[[j]][[k]][2, "x"] = kx + 1#
					    Z[[j]][[k]][2, "y"] = ky#
					    # neighbor to west#
					    Z[[j]][[k]][3, "x"] = kx - 1#
					    Z[[j]][[k]][3, "y"] = ky#
					}
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
kx=A$x[k]#
		    	    ky=A$y[k] - 1#
					# 		if plot has cacti, survey its neighbors#
					if (dim(population %>% #
						filter(#
		  					y_value > condition, #
							x==kx,#
							y==ky#
					))[1] > 0#
					) {#
						# neighbor to south#
					    Z[[j]][[k]][4, "x"] = kx#
					    Z[[j]][[k]][4, "y"] = ky - 1#
					   	# neighbor to east#
					    Z[[j]][[k]][5, "x"] = kx + 1#
					    Z[[j]][[k]][5, "y"] = ky#
					    # neighbor to west#
					    Z[[j]][[k]][6, "x"] = kx - 1#
					    Z[[j]][[k]][6, "y"] = ky#
					}
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
kx=A$x[k] + 1#
		    	    ky=A$y[k]#
					# 		if plot has cacti, survey its neighbors#
					if (dim(population %>% #
					  	filter(#
		  					y_value > condition, #
					  	 	x==kx,#
					  	  	y==ky#
					))[1] > 0#
					) {#
			        	# neighbor to south#
			        	Z[[j]][[k]][7, "x"] = kx#
			        	Z[[j]][[k]][7, "y"] = ky - 1#
			        	# neighbor to north#
			        	Z[[j]][[k]][8, "x"] = kx#
			        	Z[[j]][[k]][8, "y"] = ky + 1#
			        	# neighbor to east#
			        	Z[[j]][[k]][9, "x"] = kx + 1#
			        	Z[[j]][[k]][9, "y"] = ky#
					}
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
kx=A$x[k] - 1#
		    	    ky=A$y[k]#
					# 		if plot has cacti, survey its neighbors#
					if (dim(population %>% #
					  	filter(#
		  					y_value > condition, #
					  	  	x==kx,#
					  	  	y==ky#
					))[1] > 0#
					) {#
			        	# neighbor to south#
			        	Z[[j]][[k]][10, "x"] = kx#
			        	Z[[j]][[k]][10, "y"] = ky - 1#
			        	# neighbor to north#
			        	Z[[j]][[k]][11, "x"] = kx#
			        	Z[[j]][[k]][11, "y"] = ky + 1#
			        	# neighbor to west#
			        	Z[[j]][[k]][12, "x"] = kx - 1#
			        	Z[[j]][[k]][12, "y"] = ky#
			      	}
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
dim(Z[[j]][[k]])[1]
Z
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
if (dim(Z[[j]][[k]])[1] > 0) {#
						Z[[j]][[k]]$step <- j#
					}
Z
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
last_step = j-1#
				A <- B %>% filter(step == last_step)#
				Z[[j]] <- list()#
				for (k in 1:dim(sample)[1]) {#
					Z[[j]][[k]] <- data.frame()#
					# northern neighbor of cluster plot#
		    	    kx=A$x[k]#
		    	    ky=A$y[k] + 1#
					# if plot has cacti, survey its neighbors#
					if (dim(population %>% #
						filter(#
		  					y_value > condition, #
		  			  		x==kx,#
		  			  		y==ky#
					))[1] > 0#
					) {#
					    # neighbor to north#
					    Z[[j]][[k]][1, "x"] = kx#
					   	Z[[j]][[k]][1, "y"] = ky + 1#
					    # neighbor to east#
					    Z[[j]][[k]][2, "x"] = kx + 1#
					    Z[[j]][[k]][2, "y"] = ky#
					    # neighbor to west#
					    Z[[j]][[k]][3, "x"] = kx - 1#
					    Z[[j]][[k]][3, "y"] = ky#
					}#
			      	# southern neighbor of cluster plot#
		    	    kx=A$x[k]#
		    	    ky=A$y[k] - 1#
					# 		if plot has cacti, survey its neighbors#
					if (dim(population %>% #
						filter(#
		  					y_value > condition, #
							x==kx,#
							y==ky#
					))[1] > 0#
					) {#
						# neighbor to south#
					    Z[[j]][[k]][4, "x"] = kx#
					    Z[[j]][[k]][4, "y"] = ky - 1#
					   	# neighbor to east#
					    Z[[j]][[k]][5, "x"] = kx + 1#
					    Z[[j]][[k]][5, "y"] = ky#
					    # neighbor to west#
					    Z[[j]][[k]][6, "x"] = kx - 1#
					    Z[[j]][[k]][6, "y"] = ky#
					}#
			      	# eastern neighbor of cluster plot#
		    	    kx=A$x[k] + 1#
		    	    ky=A$y[k]#
					# 		if plot has cacti, survey its neighbors#
					if (dim(population %>% #
					  	filter(#
		  					y_value > condition, #
					  	 	x==kx,#
					  	  	y==ky#
					))[1] > 0#
					) {#
			        	# neighbor to south#
			        	Z[[j]][[k]][7, "x"] = kx#
			        	Z[[j]][[k]][7, "y"] = ky - 1#
			        	# neighbor to north#
			        	Z[[j]][[k]][8, "x"] = kx#
			        	Z[[j]][[k]][8, "y"] = ky + 1#
			        	# neighbor to east#
			        	Z[[j]][[k]][9, "x"] = kx + 1#
			        	Z[[j]][[k]][9, "y"] = ky#
					}#
			      	# western neighbor of SRSWOR plot#
		    	    kx=A$x[k] - 1#
		    	    ky=A$y[k]#
					# 		if plot has cacti, survey its neighbors#
					if (dim(population %>% #
					  	filter(#
		  					y_value > condition, #
					  	  	x==kx,#
					  	  	y==ky#
					))[1] > 0#
					) {#
			        	# neighbor to south#
			        	Z[[j]][[k]][10, "x"] = kx#
			        	Z[[j]][[k]][10, "y"] = ky - 1#
			        	# neighbor to north#
			        	Z[[j]][[k]][11, "x"] = kx#
			        	Z[[j]][[k]][11, "y"] = ky + 1#
			        	# neighbor to west#
			        	Z[[j]][[k]][12, "x"] = kx - 1#
			        	Z[[j]][[k]][12, "y"] = ky#
			      	}#
					if (dim(Z[[j]][[k]])[1] > 0) {#
						Z[[j]][[k]]$step <- j#
					}#
				}
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
last_step = j-1#
				A <- B %>% filter(step == last_step)#
				Z[[j]] <- list()#
				for (k in 1:dim(A)[1]) {#
					Z[[j]][[k]] <- data.frame()#
					# northern neighbor of cluster plot#
		    	    kx=A$x[k]#
		    	    ky=A$y[k] + 1#
					# if plot has cacti, survey its neighbors#
					if (dim(population %>% #
						filter(#
		  					y_value > condition, #
		  			  		x==kx,#
		  			  		y==ky#
					))[1] > 0#
					) {#
					    # neighbor to north#
					    Z[[j]][[k]][1, "x"] = kx#
					   	Z[[j]][[k]][1, "y"] = ky + 1#
					    # neighbor to east#
					    Z[[j]][[k]][2, "x"] = kx + 1#
					    Z[[j]][[k]][2, "y"] = ky#
					    # neighbor to west#
					    Z[[j]][[k]][3, "x"] = kx - 1#
					    Z[[j]][[k]][3, "y"] = ky#
					}#
			      	# southern neighbor of cluster plot#
		    	    kx=A$x[k]#
		    	    ky=A$y[k] - 1#
					# 		if plot has cacti, survey its neighbors#
					if (dim(population %>% #
						filter(#
		  					y_value > condition, #
							x==kx,#
							y==ky#
					))[1] > 0#
					) {#
						# neighbor to south#
					    Z[[j]][[k]][4, "x"] = kx#
					    Z[[j]][[k]][4, "y"] = ky - 1#
					   	# neighbor to east#
					    Z[[j]][[k]][5, "x"] = kx + 1#
					    Z[[j]][[k]][5, "y"] = ky#
					    # neighbor to west#
					    Z[[j]][[k]][6, "x"] = kx - 1#
					    Z[[j]][[k]][6, "y"] = ky#
					}#
			      	# eastern neighbor of cluster plot#
		    	    kx=A$x[k] + 1#
		    	    ky=A$y[k]#
					# 		if plot has cacti, survey its neighbors#
					if (dim(population %>% #
					  	filter(#
		  					y_value > condition, #
					  	 	x==kx,#
					  	  	y==ky#
					))[1] > 0#
					) {#
			        	# neighbor to south#
			        	Z[[j]][[k]][7, "x"] = kx#
			        	Z[[j]][[k]][7, "y"] = ky - 1#
			        	# neighbor to north#
			        	Z[[j]][[k]][8, "x"] = kx#
			        	Z[[j]][[k]][8, "y"] = ky + 1#
			        	# neighbor to east#
			        	Z[[j]][[k]][9, "x"] = kx + 1#
			        	Z[[j]][[k]][9, "y"] = ky#
					}#
			      	# western neighbor of SRSWOR plot#
		    	    kx=A$x[k] - 1#
		    	    ky=A$y[k]#
					# 		if plot has cacti, survey its neighbors#
					if (dim(population %>% #
					  	filter(#
		  					y_value > condition, #
					  	  	x==kx,#
					  	  	y==ky#
					))[1] > 0#
					) {#
			        	# neighbor to south#
			        	Z[[j]][[k]][10, "x"] = kx#
			        	Z[[j]][[k]][10, "y"] = ky - 1#
			        	# neighbor to north#
			        	Z[[j]][[k]][11, "x"] = kx#
			        	Z[[j]][[k]][11, "y"] = ky + 1#
			        	# neighbor to west#
			        	Z[[j]][[k]][12, "x"] = kx - 1#
			        	Z[[j]][[k]][12, "y"] = ky#
			      	}#
					if (dim(Z[[j]][[k]])[1] > 0) {#
						Z[[j]][[k]]$step <- j#
					}#
				}
Z
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
do.call(rbind.fill, Z[[j]]) %>% #
					filter(!(is.na(x))) %>%#
					rbind.fill(B)
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
B <- do.call(rbind.fill, Z[[j]]) %>% #
					filter(!(is.na(x))) %>%#
					rbind.fill(B) #%>%#
					#.[!duplicated(.[, c("x", "y")]), ]
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
Z[[j]] <- do.call(rbind.fill, Z[[j]])
Z
Z[[2]] %>% filter(!(is.na(x))) %>% dim
dim(B)
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
sample <- do.call(rbind.data.frame, Z)# %>% rbind.fill(S)
head(sample)
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
sample <- sample %>%#
			merge(population, by=c("x", "y")) %>%#
	    	filter(!is.na(x) & !is.na(y)) %>% # remove NAs#
	    	rbind.fill(S) %>% # merge with SRSWOR plots#
			arrange(Sampling)
head(sample)
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
ggplot() +#
geom_point(data=patch_data_5, aes(x,y, size=factor(Cactus),#
		shape=factor(Cactus))) +#
scale_shape_manual(values=c(1, rep(16, length(2:13)))) +#
geom_point(data=sample, aes(x,y, shape=factor(Cactus), colour=factor(step)), size=7)
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
ggplot() +#
geom_point(data=patch_data_5, aes(x,y, size=factor(Cactus),#
		shape=factor(Cactus))) +#
scale_shape_manual(values=c(1, rep(16, length(2:13)))) +#
geom_point(data=sample, aes(x,y, shape=factor(y_value), colour=factor(step)), size=7)
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
Y = list()#
		Z = list()#
		# step 1: get all neighbors of primary samples matching condition#
	    for (i in 1:dim(Networks)[1]) {#
			L = Networks[i, ]#
    	    Y[[i]] <- list()#
			# STEP 1#
			Y[[i]][[1]] <- data.frame()#
    	    # northern neighbor of SRSWOR plot#
    	    Y[[i]][[1]][1, "x"] = L$x#
    	    Y[[i]][[1]][1, "y"] = L$y + 1#
	      	# southern neighbor of SRSWOR plot#
	      	Y[[i]][[1]][2, "x"] = L$x#
	      	Y[[i]][[1]][2, "y"] = L$y - 1#
	      	# eastern neighbor of SRSWOR plot#
	      	Y[[i]][[1]][3, "x"] = L$x + 1#
	      	Y[[i]][[1]][3, "y"] = L$y#
	      	# western neighbor of SRSWOR plot#
	      	Y[[i]][[1]][4, "x"] = L$x - 1#
	      	Y[[i]][[1]][4, "y"] = L$y#
			Y[[i]] <- do.call(rbind.fill, Y[[i]])#
		}#
		Z[[1]] <- do.call(rbind.fill, Y)#
		# merge neighbors and primary samples matching condition#
		Z[[1]]$step <- 1#
		Z[[1]] -> B#
		# steps 2 to max#
		if (max > 1) {#
			# get all neighbors of c(primary samples matching condition, neighbors) matching condition#
			for (j in 2:max) {#
				last_step = j-1#
				A <- B %>% filter(step == last_step)#
				Z[[j]] <- list()#
				for (k in 1:dim(A)[1]) {#
					Z[[j]][[k]] <- data.frame()#
					# northern neighbor of cluster plot#
		    	    kx=A$x[k]#
		    	    ky=A$y[k] + 1#
					# if plot has cacti, survey its neighbors#
					if (dim(population %>% #
						filter(#
		  					y_value > condition, #
		  			  		x==kx,#
		  			  		y==ky#
					))[1] > 0#
					) {#
					    # neighbor to north#
					    Z[[j]][[k]][1, "x"] = kx#
					   	Z[[j]][[k]][1, "y"] = ky + 1#
					    # neighbor to east#
					    Z[[j]][[k]][2, "x"] = kx + 1#
					    Z[[j]][[k]][2, "y"] = ky#
					    # neighbor to west#
					    Z[[j]][[k]][3, "x"] = kx - 1#
					    Z[[j]][[k]][3, "y"] = ky#
					}#
			      	# southern neighbor of cluster plot#
		    	    kx=A$x[k]#
		    	    ky=A$y[k] - 1#
					# 		if plot has cacti, survey its neighbors#
					if (dim(population %>% #
						filter(#
		  					y_value > condition, #
							x==kx,#
							y==ky#
					))[1] > 0#
					) {#
						# neighbor to south#
					    Z[[j]][[k]][4, "x"] = kx#
					    Z[[j]][[k]][4, "y"] = ky - 1#
					   	# neighbor to east#
					    Z[[j]][[k]][5, "x"] = kx + 1#
					    Z[[j]][[k]][5, "y"] = ky#
					    # neighbor to west#
					    Z[[j]][[k]][6, "x"] = kx - 1#
					    Z[[j]][[k]][6, "y"] = ky#
					}#
			      	# eastern neighbor of cluster plot#
		    	    kx=A$x[k] + 1#
		    	    ky=A$y[k]#
					# 		if plot has cacti, survey its neighbors#
					if (dim(population %>% #
					  	filter(#
		  					y_value > condition, #
					  	 	x==kx,#
					  	  	y==ky#
					))[1] > 0#
					) {#
			        	# neighbor to south#
			        	Z[[j]][[k]][7, "x"] = kx#
			        	Z[[j]][[k]][7, "y"] = ky - 1#
			        	# neighbor to north#
			        	Z[[j]][[k]][8, "x"] = kx#
			        	Z[[j]][[k]][8, "y"] = ky + 1#
			        	# neighbor to east#
			        	Z[[j]][[k]][9, "x"] = kx + 1#
			        	Z[[j]][[k]][9, "y"] = ky#
					}#
			      	# western neighbor of SRSWOR plot#
		    	    kx=A$x[k] - 1#
		    	    ky=A$y[k]#
					# 		if plot has cacti, survey its neighbors#
					if (dim(population %>% #
					  	filter(#
		  					y_value > condition, #
					  	  	x==kx,#
					  	  	y==ky#
					))[1] > 0#
					) {#
			        	# neighbor to south#
			        	Z[[j]][[k]][10, "x"] = kx#
			        	Z[[j]][[k]][10, "y"] = ky - 1#
			        	# neighbor to north#
			        	Z[[j]][[k]][11, "x"] = kx#
			        	Z[[j]][[k]][11, "y"] = ky + 1#
			        	# neighbor to west#
			        	Z[[j]][[k]][12, "x"] = kx - 1#
			        	Z[[j]][[k]][12, "y"] = ky#
			      	}#
					if (dim(Z[[j]][[k]])[1] > 0) {#
						Z[[j]][[k]]$step <- j#
					}#
				}#
				B <- do.call(rbind.fill, Z[[j]]) %>% #
					filter(!(is.na(x))) %>%#
					rbind.fill(B) #%>%#
					#.[!duplicated(.[, c("x", "y")]), ]	#
				Z[[j]] <- do.call(rbind.fill, Z[[j]])#
			}#
			sample <- do.call(rbind.data.frame, Z)# %>% rbind.fill(S)#
		}
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
sample <- sample %>%#
			merge(population, by=c("x", "y")) %>%#
	    	filter(!is.na(x) & !is.na(y)) %>% # remove NAs#
	    	rbind.fill(S) %>% # merge with SRSWOR plots#
			arrange(Sampling)
dim(sample)
head(sample)
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
sample <- do.call(rbind.data.frame, Z)# %>% rbind.fill(S)
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
sample <- sample %>%#
			merge(population, by=c("x", "y")) %>%#
	    	filter(!is.na(x) & !is.na(y)) %>% # remove NAs#
	    	rbind.fill(S) %>% # merge with SRSWOR plots#
			arrange(step)#
	    # remove duplicates#
		no_duplicates <- sample[!duplicated(sample[, c("x", "y")]), ]#
		# give plots satisfying condition NetworkIDs#
		X = no_duplicates %>% #
			filter(y_value > condition) %>%#
		  	assignNetworkMembership#
		# give primary sample plots not satisfying condition NetworkIDs#
		Y = no_duplicates %>% filter(#
				y_value == condition, #
				Sampling=="SRSWOR" | Sampling=="SRSWR" | Sampling=="Primary Sample"#
		)#
        Y$NetworkID <- seq(#
			from = (max(X$NetworkID) + 1), #
			to = (max(X$NetworkID) + dim(Y)[1]), #
			by = 1#
		)#
		# get list of cluster/edge plots not satifying condition#
		Z = no_duplicates %>% filter(#
				y_value == condition, #
				is.na(Sampling)#
		)#
		# if there are plots not satisfying the condition, make NetworkIDs and m values of Cluster plots not satifying condition "NA"#
		if (dim(Z)[1] > 0) {#
			Z$NetworkID <- NA#
			Z$Sampling <- "Edge"#
			Z$m <- 0			#
			# merge back together		#
			Z = rbind.fill(X,Y,Z)	#
		} else {#
			# merge back together		#
			Z = rbind.fill(X,Y)			#
		}#
		if (dim(Z[which(is.na(Z$Sampling)), ])[1] > 0) {#
			Z[which(is.na(Z$Sampling)), ]$Sampling <- "Cluster"#
		}#
		# rename filtering variable#
		Z %<>% select(x, y, NetworkID, m, y_value, Sampling, step)#
		names(Z)[names(Z) == 'y_value'] <- y_variable#
		# add species attribute data#
		Z %<>% #
			merge(population %>% select(-NetworkID, -m)) %>%#
			select(x, y, NetworkID, m, y_value, Sampling, everything())#
		# warning	#
		if (dim(Z[duplicated(Z[, c("x", "y")]), ])[1] > 0) {#
			warning("Duplicates remaining in RACS sample")#
			stop()#
		}
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
ggplot() +#
geom_point(data=patch_data_5, aes(x,y, size=factor(Cactus),#
		shape=factor(Cactus))) +#
scale_shape_manual(values=c(1, rep(16, length(2:13)))) +#
geom_point(data=Z, aes(x,y, shape=factor(Cactus), colour=factor(step)), size=7)
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
population = patch_data_5#
seed=26#
n1=40#
y_variable = "Cactus"
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
y_value <- x <- y <- Sampling <- NetworkID <- m <- everything <- NULL#
	# get primary sample#
	if (is.data.frame(initial_sample)) {#
		S = merge(population, initial_sample, all.y=TRUE) 	#
		S$Sampling <- "Primary Sample"#
		S$step <- 0#
	} else {#
		if (!is.na(seed)) {set.seed(seed)}#
		S <- createSRS(population, n1)#
		S$step <- 0#
	}#
	# filter out primary samples matching condition#
	Networks <- S %>% #
		filter(eval(parse(text = paste("S$", y_variable, sep=""))) > condition)
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
names(S)[names(S) == y_variable] <- 'y_value'#
		names(population)[names(population) == y_variable] <- 'y_value'#
		# Lists to save data#
		Y = list()#
		Z = list()#
		# step 1: get all neighbors of primary samples matching condition#
	    for (i in 1:dim(Networks)[1]) {#
			L = Networks[i, ]#
    	    Y[[i]] <- list()#
			# STEP 1#
			Y[[i]][[1]] <- data.frame()#
    	    # northern neighbor of SRSWOR plot#
    	    Y[[i]][[1]][1, "x"] = L$x#
    	    Y[[i]][[1]][1, "y"] = L$y + 1#
	      	# southern neighbor of SRSWOR plot#
	      	Y[[i]][[1]][2, "x"] = L$x#
	      	Y[[i]][[1]][2, "y"] = L$y - 1#
	      	# eastern neighbor of SRSWOR plot#
	      	Y[[i]][[1]][3, "x"] = L$x + 1#
	      	Y[[i]][[1]][3, "y"] = L$y#
	      	# western neighbor of SRSWOR plot#
	      	Y[[i]][[1]][4, "x"] = L$x - 1#
	      	Y[[i]][[1]][4, "y"] = L$y#
			Y[[i]] <- do.call(rbind.fill, Y[[i]])#
		}#
		Z[[1]] <- do.call(rbind.fill, Y)
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
Z[[1]]$step <- 1#
		Z[[1]] -> B#
		# steps 2 to max#
		if (max > 1) {#
			# get all neighbors of c(primary samples matching condition, neighbors) matching condition#
			for (j in 2:max) {#
				last_step = j-1#
				A <- B %>% filter(step == last_step)#
				Z[[j]] <- list()#
				for (k in 1:dim(A)[1]) {#
					Z[[j]][[k]] <- data.frame()#
		    	    kx=A$x[k]#
		    	    ky=A$y[k]#
					# if plot has cacti, survey its neighbors#
					if (dim(population %>% #
						filter(#
		  					y_value > condition, #
		  			  		x==kx,#
		  			  		y==ky#
					))[1] > 0#
					) {#
					    # neighbor to north#
					    Z[[j]][[k]][1, "x"] = kx#
					   	Z[[j]][[k]][1, "y"] = ky - 1#
					    # neighbor to south#
					    Z[[j]][[k]][1, "x"] = kx#
					   	Z[[j]][[k]][1, "y"] = ky + 1#
					    # neighbor to east#
					    Z[[j]][[k]][2, "x"] = kx + 1#
					    Z[[j]][[k]][2, "y"] = ky#
					    # neighbor to west#
					    Z[[j]][[k]][3, "x"] = kx - 1#
					    Z[[j]][[k]][3, "y"] = ky#
					}#
					if (dim(Z[[j]][[k]])[1] > 0) {#
						Z[[j]][[k]]$step <- j#
					}#
				}#
				B <- do.call(rbind.fill, Z[[j]]) %>% #
					filter(!(is.na(x))) %>%#
					rbind.fill(B) #%>%#
					#.[!duplicated(.[, c("x", "y")]), ]	#
				Z[[j]] <- do.call(rbind.fill, Z[[j]])#
			}#
			sample <- do.call(rbind.data.frame, Z)# %>% rbind.fill(S)#
		}
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
sample <- sample %>%#
			merge(population, by=c("x", "y")) %>%#
	    	filter(!is.na(x) & !is.na(y)) %>% # remove NAs#
	    	rbind.fill(S) %>% # merge with SRSWOR plots#
			arrange(step)#
	    # remove duplicates#
		no_duplicates <- sample[!duplicated(sample[, c("x", "y")]), ]#
		# give plots satisfying condition NetworkIDs#
		X = no_duplicates %>% #
			filter(y_value > condition) %>%#
		  	assignNetworkMembership#
		# give primary sample plots not satisfying condition NetworkIDs#
		Y = no_duplicates %>% filter(#
				y_value == condition, #
				Sampling=="SRSWOR" | Sampling=="SRSWR" | Sampling=="Primary Sample"#
		)#
        Y$NetworkID <- seq(#
			from = (max(X$NetworkID) + 1), #
			to = (max(X$NetworkID) + dim(Y)[1]), #
			by = 1#
		)#
		# get list of cluster/edge plots not satifying condition#
		Z = no_duplicates %>% filter(#
				y_value == condition, #
				is.na(Sampling)#
		)#
		# if there are plots not satisfying the condition, make NetworkIDs and m values of Cluster plots not satifying condition "NA"#
		if (dim(Z)[1] > 0) {#
			Z$NetworkID <- NA#
			Z$Sampling <- "Edge"#
			Z$m <- 0			#
			# merge back together		#
			Z = rbind.fill(X,Y,Z)	#
		} else {#
			# merge back together		#
			Z = rbind.fill(X,Y)			#
		}#
		if (dim(Z[which(is.na(Z$Sampling)), ])[1] > 0) {#
			Z[which(is.na(Z$Sampling)), ]$Sampling <- "Cluster"#
		}#
		# rename filtering variable#
		Z %<>% select(x, y, NetworkID, m, y_value, Sampling, step)#
		names(Z)[names(Z) == 'y_value'] <- y_variable#
		# add species attribute data#
		Z %<>% #
			merge(population %>% select(-NetworkID, -m)) %>%#
			select(x, y, NetworkID, m, y_value, Sampling, everything())#
		# warning	#
		if (dim(Z[duplicated(Z[, c("x", "y")]), ])[1] > 0) {#
			warning("Duplicates remaining in RACS sample")#
			stop()#
		}
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
ggplot() +#
geom_point(data=patch_data_5, aes(x,y, size=factor(Cactus),#
		shape=factor(Cactus))) +#
scale_shape_manual(values=c(1, rep(16, length(2:13)))) +#
geom_point(data=Z, aes(x,y, shape=factor(Cactus), colour=factor(step)), size=7)
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
Y = list()#
		Z = list()#
		# step 1: get all neighbors of primary samples matching condition#
	    for (i in 1:dim(Networks)[1]) {#
			L = Networks[i, ]#
    	    Y[[i]] <- list()#
			# STEP 1#
			Y[[i]][[1]] <- data.frame()#
    	    # northern neighbor of SRSWOR plot#
    	    Y[[i]][[1]][1, "x"] = L$x#
    	    Y[[i]][[1]][1, "y"] = L$y + 1#
	      	# southern neighbor of SRSWOR plot#
	      	Y[[i]][[1]][2, "x"] = L$x#
	      	Y[[i]][[1]][2, "y"] = L$y - 1#
	      	# eastern neighbor of SRSWOR plot#
	      	Y[[i]][[1]][3, "x"] = L$x + 1#
	      	Y[[i]][[1]][3, "y"] = L$y#
	      	# western neighbor of SRSWOR plot#
	      	Y[[i]][[1]][4, "x"] = L$x - 1#
	      	Y[[i]][[1]][4, "y"] = L$y#
			Y[[i]] <- do.call(rbind.fill, Y[[i]])#
		}#
		Z[[1]] <- do.call(rbind.fill, Y)#
		# merge neighbors and primary samples matching condition#
		Z[[1]]$step <- 1#
		Z[[1]] -> B#
		# steps 2 to max#
		if (max > 1) {#
			# get all neighbors of c(primary samples matching condition, neighbors) matching condition#
			for (j in 2:max) {#
				last_step = j-1#
				A <- B %>% filter(step == last_step)#
				Z[[j]] <- list()#
				for (k in 1:dim(A)[1]) {#
					Z[[j]][[k]] <- data.frame()#
		    	    kx=A$x[k]#
		    	    ky=A$y[k]#
					# if plot has cacti, survey its neighbors#
					if (dim(population %>% #
						filter(#
		  					y_value > condition, #
		  			  		x==kx,#
		  			  		y==ky#
					))[1] > 0#
					) {#
					    # neighbor to north#
					    Z[[j]][[k]][1, "x"] = kx#
					   	Z[[j]][[k]][1, "y"] = ky - 1#
					    # neighbor to south#
					    Z[[j]][[k]][2, "x"] = kx#
					   	Z[[j]][[k]][2, "y"] = ky + 1#
					    # neighbor to east#
					    Z[[j]][[k]][3, "x"] = kx + 1#
					    Z[[j]][[k]][3, "y"] = ky#
					    # neighbor to west#
					    Z[[j]][[k]][4, "x"] = kx - 1#
					    Z[[j]][[k]][4, "y"] = ky#
					}#
					if (dim(Z[[j]][[k]])[1] > 0) {#
						Z[[j]][[k]]$step <- j#
					}#
				}#
				B <- do.call(rbind.fill, Z[[j]]) %>% #
					filter(!(is.na(x))) %>%#
					rbind.fill(B) #%>%#
					#.[!duplicated(.[, c("x", "y")]), ]	#
				Z[[j]] <- do.call(rbind.fill, Z[[j]])#
			}#
			sample <- do.call(rbind.data.frame, Z)# %>% rbind.fill(S)#
		}#
	# compress plot list to dataframe
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
sample <- sample %>%#
			merge(population, by=c("x", "y")) %>%#
	    	filter(!is.na(x) & !is.na(y)) %>% # remove NAs#
	    	rbind.fill(S) %>% # merge with SRSWOR plots#
			arrange(step)#
	    # remove duplicates#
		no_duplicates <- sample[!duplicated(sample[, c("x", "y")]), ]#
		# give plots satisfying condition NetworkIDs#
		X = no_duplicates %>% #
			filter(y_value > condition) %>%#
		  	assignNetworkMembership#
		# give primary sample plots not satisfying condition NetworkIDs#
		Y = no_duplicates %>% filter(#
				y_value == condition, #
				Sampling=="SRSWOR" | Sampling=="SRSWR" | Sampling=="Primary Sample"#
		)#
        Y$NetworkID <- seq(#
			from = (max(X$NetworkID) + 1), #
			to = (max(X$NetworkID) + dim(Y)[1]), #
			by = 1#
		)#
		# get list of cluster/edge plots not satifying condition#
		Z = no_duplicates %>% filter(#
				y_value == condition, #
				is.na(Sampling)#
		)#
		# if there are plots not satisfying the condition, make NetworkIDs and m values of Cluster plots not satifying condition "NA"#
		if (dim(Z)[1] > 0) {#
			Z$NetworkID <- NA#
			Z$Sampling <- "Edge"#
			Z$m <- 0			#
			# merge back together		#
			Z = rbind.fill(X,Y,Z)	#
		} else {#
			# merge back together		#
			Z = rbind.fill(X,Y)			#
		}#
		if (dim(Z[which(is.na(Z$Sampling)), ])[1] > 0) {#
			Z[which(is.na(Z$Sampling)), ]$Sampling <- "Cluster"#
		}#
		# rename filtering variable#
		Z %<>% select(x, y, NetworkID, m, y_value, Sampling, step)#
		names(Z)[names(Z) == 'y_value'] <- y_variable#
		# add species attribute data#
		Z %<>% #
			merge(population %>% select(-NetworkID, -m)) %>%#
			select(x, y, NetworkID, m, y_value, Sampling, everything())#
		# warning	#
		if (dim(Z[duplicated(Z[, c("x", "y")]), ])[1] > 0) {#
			warning("Duplicates remaining in RACS sample")#
			stop()#
		}
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
ggplot() +#
geom_point(data=patch_data_5, aes(x,y, size=factor(Cactus),#
		shape=factor(Cactus))) +#
scale_shape_manual(values=c(1, rep(16, length(2:13)))) +#
geom_point(data=Z, aes(x,y, shape=factor(Cactus), colour=factor(step)), size=7)
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
ggplot() +#
geom_point(data=patch_data_5, aes(x,y, size=factor(Cactus),#
		shape=factor(Cactus))) +#
scale_shape_manual(values=c(1, rep(16, length(2:13)))) +#
geom_point(data=Z, aes(x,y, shape=factor(Cactus), colour=factor(step)), size=7) +#
scale_colour_brewer(palette = "Set1")
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
ggplot() +#
geom_point(data=patch_data_5, aes(x,y, size=factor(Cactus),#
		shape=factor(Cactus))) +#
scale_shape_manual(values=c(1, rep(16, length(2:13)))) +#
geom_point(data=Z, aes(x,y, shape=factor(Cactus), colour=factor(step)), size=7) +#
scale_colour_brewer(palette = "Set2")
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
ggplot() +#
geom_point(data=patch_data_5, aes(x,y, size=factor(Cactus),#
		shape=factor(Cactus))) +#
scale_shape_manual(values=c(1, rep(16, length(2:13)))) +#
geom_point(data=Z, aes(x,y, size=7)
)
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
ggplot() +#
geom_point(data=patch_data_5, aes(x,y, size=factor(Cactus),#
		shape=factor(Cactus))) +#
scale_shape_manual(values=c(1, rep(16, length(2:13)))) +#
geom_point(data=Z, aes(x,y), size=7)
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
ggplot() +#
geom_point(data=patch_data_5, aes(x,y, size=factor(Cactus),#
		shape=factor(Cactus))) +#
scale_shape_manual(values=c(1, rep(16, length(2:13)))) +#
geom_point(data=Z, aes(x,y), shape = 0, size=7)
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
createRACS <- function(population, n1, y_variable, condition=0, seed=NA, initial_sample=NA, f_max=2) {#
	y_value <- x <- y <- Sampling <- NetworkID <- m <- everything <- NULL#
	# get primary sample#
	if (is.data.frame(initial_sample)) {#
		S = merge(population, initial_sample, all.y=TRUE) 	#
		S$Sampling <- "Primary Sample"#
		S$step <- 0#
	} else {#
		if (!is.na(seed)) {set.seed(seed)}#
		S <- createSRS(population, n1)#
		S$step <- 0#
	}#
	# filter out primary samples matching condition#
	Networks <- S %>% #
		filter(eval(parse(text = paste("S$", y_variable, sep=""))) > condition)#
	# if there are units that satisfy the condition, fill in cluster/edge units#
	if (dim(Networks)[1] > 0) {#
		names(S)[names(S) == y_variable] <- 'y_value'#
		names(population)[names(population) == y_variable] <- 'y_value'#
		# Lists to save data#
		Y = list()#
		Z = list()#
		# step 1: get all neighbors of primary samples matching condition#
	    for (i in 1:dim(Networks)[1]) {#
			L = Networks[i, ]#
    	    Y[[i]] <- list()#
			# STEP 1#
			Y[[i]][[1]] <- data.frame()#
    	    # northern neighbor of SRSWOR plot#
    	    Y[[i]][[1]][1, "x"] = L$x#
    	    Y[[i]][[1]][1, "y"] = L$y + 1#
	      	# southern neighbor of SRSWOR plot#
	      	Y[[i]][[1]][2, "x"] = L$x#
	      	Y[[i]][[1]][2, "y"] = L$y - 1#
	      	# eastern neighbor of SRSWOR plot#
	      	Y[[i]][[1]][3, "x"] = L$x + 1#
	      	Y[[i]][[1]][3, "y"] = L$y#
	      	# western neighbor of SRSWOR plot#
	      	Y[[i]][[1]][4, "x"] = L$x - 1#
	      	Y[[i]][[1]][4, "y"] = L$y#
			Y[[i]] <- do.call(rbind.fill, Y[[i]])#
		}#
		Z[[1]] <- do.call(rbind.fill, Y)#
		# merge neighbors and primary samples matching condition#
		Z[[1]]$step <- 1#
		Z[[1]] -> B#
		# steps 2 to f_max#
		if (f_max > 1) {#
			# get all neighbors of c(primary samples matching condition, neighbors) matching condition#
			for (j in 2:f_max) {#
				last_step = j-1#
				A <- B %>% filter(step == last_step)#
				Z[[j]] <- list()#
				for (k in 1:dim(A)[1]) {#
					Z[[j]][[k]] <- data.frame()#
		    	    kx=A$x[k]#
		    	    ky=A$y[k]#
					# if plot has cacti, survey its neighbors#
					if (dim(population %>% #
						filter(#
		  					y_value > condition, #
		  			  		x==kx,#
		  			  		y==ky#
					))[1] > 0#
					) {#
					    # neighbor to north#
					    Z[[j]][[k]][1, "x"] = kx#
					   	Z[[j]][[k]][1, "y"] = ky - 1#
					    # neighbor to south#
					    Z[[j]][[k]][2, "x"] = kx#
					   	Z[[j]][[k]][2, "y"] = ky + 1#
					    # neighbor to east#
					    Z[[j]][[k]][3, "x"] = kx + 1#
					    Z[[j]][[k]][3, "y"] = ky#
					    # neighbor to west#
					    Z[[j]][[k]][4, "x"] = kx - 1#
					    Z[[j]][[k]][4, "y"] = ky#
					}#
					if (dim(Z[[j]][[k]])[1] > 0) {#
						Z[[j]][[k]]$step <- j#
					}#
				}#
				B <- do.call(rbind.fill, Z[[j]]) %>% #
					filter(!(is.na(x))) %>%#
					rbind.fill(B) #%>%#
					#.[!duplicated(.[, c("x", "y")]), ]	#
				Z[[j]] <- do.call(rbind.fill, Z[[j]])#
			}#
			sample <- do.call(rbind.data.frame, Z)# %>% rbind.fill(S)#
		}#
	# compress plot list to dataframe#
	    sample <- sample %>%#
			merge(population, by=c("x", "y")) %>%#
	    	filter(!is.na(x) & !is.na(y)) %>% # remove NAs#
	    	rbind.fill(S) %>% # merge with SRSWOR plots#
			arrange(step)#
	    # remove duplicates#
		no_duplicates <- sample[!duplicated(sample[, c("x", "y")]), ]#
		# give plots satisfying condition NetworkIDs#
		X = no_duplicates %>% #
			filter(y_value > condition) %>%#
		  	assignNetworkMembership#
		# give primary sample plots not satisfying condition NetworkIDs#
		Y = no_duplicates %>% filter(#
				y_value == condition, #
				Sampling=="SRSWOR" | Sampling=="SRSWR" | Sampling=="Primary Sample"#
		)#
        Y$NetworkID <- seq(#
			from = (max(X$NetworkID) + 1), #
			to = (max(X$NetworkID) + dim(Y)[1]), #
			by = 1#
		)#
		# get list of cluster/edge plots not satifying condition#
		Z = no_duplicates %>% filter(#
				y_value == condition, #
				is.na(Sampling)#
		)#
		# if there are plots not satisfying the condition, make NetworkIDs and m values of Cluster plots not satifying condition "NA"#
		if (dim(Z)[1] > 0) {#
			Z$NetworkID <- NA#
			Z$Sampling <- "Edge"#
			Z$m <- 0			#
			# merge back together		#
			Z = rbind.fill(X,Y,Z)	#
		} else {#
			# merge back together		#
			Z = rbind.fill(X,Y)			#
		}#
		if (dim(Z[which(is.na(Z$Sampling)), ])[1] > 0) {#
			Z[which(is.na(Z$Sampling)), ]$Sampling <- "Cluster"#
		}#
		# rename filtering variable#
		Z %<>% select(x, y, NetworkID, m, y_value, Sampling, step)#
		names(Z)[names(Z) == 'y_value'] <- y_variable#
		# add species attribute data#
		Z %<>% #
			merge(population %>% select(-NetworkID, -m)) %>%#
			select(x, y, NetworkID, m, y_value, Sampling, everything())#
		# warning	#
		if (dim(Z[duplicated(Z[, c("x", "y")]), ])[1] > 0) {#
			warning("Duplicates remaining in RACS sample")#
			stop()#
		}	#
  		return(Z)#
	} #
	else {#
		# add species attribute data to sample#
		S %<>% merge(population)#
		return(S)#
	}#
}
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
Z = createRACS(#
	population = patch_data_5, #
	seed=26, #
	n1=40, #
	y_variable = "Cactus",#
	f_max = 3#
)#
ggplot() +#
geom_point(data=patch_data_5, aes(x,y, size=factor(Cactus),#
		shape=factor(Cactus))) +#
scale_shape_manual(values=c(1, rep(16, length(2:13)))) +#
geom_point(data=Z, aes(x,y), shape = 0, size=7) +#
scale_colour_brewer(palette = "Set2")
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
Z = createRACS(#
	population = patch_data_5, #
	seed=26, #
	n1=40, #
	y_variable = "Cactus",#
	f_max = 2#
)#
ggplot() +#
geom_point(data=patch_data_5, aes(x,y, size=factor(Cactus),#
		shape=factor(Cactus))) +#
scale_shape_manual(values=c(1, rep(16, length(2:13)))) +#
geom_point(data=Z, aes(x,y), shape = 0, size=7) +#
scale_colour_brewer(palette = "Set2")
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
ggplot() +#
geom_point(data=patch_data_5, aes(x,y, size=factor(Cactus),#
		shape=factor(Cactus))) +#
scale_shape_manual(values=c(1, rep(16, length(2:13)))) +#
geom_point(data=Z, aes(x,y), shape = 0, size=7) +#
scale_colour_brewer(palette = "Set2") +#
title("f_max = 2")
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
ggplot() +#
geom_point(data=patch_data_5, aes(x,y, size=factor(Cactus),#
		shape=factor(Cactus))) +#
scale_shape_manual(values=c(1, rep(16, length(2:13)))) +#
geom_point(data=Z, aes(x,y), shape = 0, size=7) +#
scale_colour_brewer(palette = "Set2") +#
ggtitle("f_max = 2")
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
Z = createRACS(#
	population = patch_data_5, #
	seed=26, #
	n1=40, #
	y_variable = "Cactus",#
	f_max = 3#
)#
ggplot() +#
geom_point(data=patch_data_5, aes(x,y, size=factor(Cactus),#
		shape=factor(Cactus))) +#
scale_shape_manual(values=c(1, rep(16, length(2:13)))) +#
geom_point(data=Z, aes(x,y), shape = 0, size=7) +#
scale_colour_brewer(palette = "Set2") +#
ggtitle("f_max = 3")
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
Z = createRACS(#
	population = patch_data_5, #
	seed=26, #
	n1=40, #
	y_variable = "Cactus",#
	f_max = 4#
)#
ggplot() +#
geom_point(data=patch_data_5, aes(x,y, size=factor(Cactus),#
		shape=factor(Cactus))) +#
scale_shape_manual(values=c(1, rep(16, length(2:13)))) +#
geom_point(data=Z, aes(x,y), shape = 0, size=7) +#
scale_colour_brewer(palette = "Set2") +#
ggtitle("f_max = 4")
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
Z = createRACS(#
	population = patch_data_5, #
	seed=26, #
	n1=40, #
	y_variable = "Cactus",#
	f_max = 1#
)#
ggplot() +#
geom_point(data=patch_data_5, aes(x,y, size=factor(Cactus),#
		shape=factor(Cactus))) +#
scale_shape_manual(values=c(1, rep(16, length(2:13)))) +#
geom_point(data=Z, aes(x,y), shape = 0, size=7) +#
scale_colour_brewer(palette = "Set2") +#
ggtitle("f_max = 1")
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
population = patch_data_5#
seed=26#
n1=40#
y_variable = "Cactus"
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
f_max = 1
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
y_value <- x <- y <- Sampling <- NetworkID <- m <- everything <- NULL#
	# get primary sample#
	if (is.data.frame(initial_sample)) {#
		S = merge(population, initial_sample, all.y=TRUE) 	#
		S$Sampling <- "Primary Sample"#
		S$step <- 0#
	} else {#
		if (!is.na(seed)) {set.seed(seed)}#
		S <- createSRS(population, n1)#
		S$step <- 0#
	}#
	# filter out primary samples matching condition#
	Networks <- S %>% #
		filter(eval(parse(text = paste("S$", y_variable, sep=""))) > condition)
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
names(S)[names(S) == y_variable] <- 'y_value'#
		names(population)[names(population) == y_variable] <- 'y_value'#
		# Lists to save data#
		Y = list()#
		Z = list()#
		# step 1: get all neighbors of primary samples matching condition#
	    for (i in 1:dim(Networks)[1]) {#
			L = Networks[i, ]#
    	    Y[[i]] <- list()#
			# STEP 1#
			Y[[i]][[1]] <- data.frame()#
    	    # northern neighbor of SRSWOR plot#
    	    Y[[i]][[1]][1, "x"] = L$x#
    	    Y[[i]][[1]][1, "y"] = L$y + 1#
	      	# southern neighbor of SRSWOR plot#
	      	Y[[i]][[1]][2, "x"] = L$x#
	      	Y[[i]][[1]][2, "y"] = L$y - 1#
	      	# eastern neighbor of SRSWOR plot#
	      	Y[[i]][[1]][3, "x"] = L$x + 1#
	      	Y[[i]][[1]][3, "y"] = L$y#
	      	# western neighbor of SRSWOR plot#
	      	Y[[i]][[1]][4, "x"] = L$x - 1#
	      	Y[[i]][[1]][4, "y"] = L$y#
			Y[[i]] <- do.call(rbind.fill, Y[[i]])#
		}#
		Z[[1]] <- do.call(rbind.fill, Y)#
		# merge neighbors and primary samples matching condition#
		Z[[1]]$step <- 1#
		Z[[1]] -> B
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
f_max > 1
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
createRACS <- function(population, n1, y_variable, condition=0, seed=NA, initial_sample=NA, f_max=2) {#
	y_value <- x <- y <- Sampling <- NetworkID <- m <- everything <- NULL#
	# get primary sample#
	if (is.data.frame(initial_sample)) {#
		S = merge(population, initial_sample, all.y=TRUE) 	#
		S$Sampling <- "Primary Sample"#
		S$step <- 0#
	} else {#
		if (!is.na(seed)) {set.seed(seed)}#
		S <- createSRS(population, n1)#
		S$step <- 0#
	}#
	# filter out primary samples matching condition#
	Networks <- S %>% #
		filter(eval(parse(text = paste("S$", y_variable, sep=""))) > condition)#
	# if there are units that satisfy the condition, fill in cluster/edge units#
	if (dim(Networks)[1] > 0) {#
		names(S)[names(S) == y_variable] <- 'y_value'#
		names(population)[names(population) == y_variable] <- 'y_value'#
		# Lists to save data#
		Y = list()#
		Z = list()#
		# step 1: get all neighbors of primary samples matching condition#
	    for (i in 1:dim(Networks)[1]) {#
			L = Networks[i, ]#
    	    Y[[i]] <- list()#
			# STEP 1#
			Y[[i]][[1]] <- data.frame()#
    	    # northern neighbor of SRSWOR plot#
    	    Y[[i]][[1]][1, "x"] = L$x#
    	    Y[[i]][[1]][1, "y"] = L$y + 1#
	      	# southern neighbor of SRSWOR plot#
	      	Y[[i]][[1]][2, "x"] = L$x#
	      	Y[[i]][[1]][2, "y"] = L$y - 1#
	      	# eastern neighbor of SRSWOR plot#
	      	Y[[i]][[1]][3, "x"] = L$x + 1#
	      	Y[[i]][[1]][3, "y"] = L$y#
	      	# western neighbor of SRSWOR plot#
	      	Y[[i]][[1]][4, "x"] = L$x - 1#
	      	Y[[i]][[1]][4, "y"] = L$y#
			Y[[i]] <- do.call(rbind.fill, Y[[i]])#
		}#
		Z[[1]] <- do.call(rbind.fill, Y)#
		# merge neighbors and primary samples matching condition#
		Z[[1]]$step <- 1#
		Z[[1]] -> B#
		# steps 2 to f_max#
		if (f_max > 1) {#
			# get all neighbors of c(primary samples matching condition, neighbors) matching condition#
			for (j in 2:f_max) {#
				last_step = j-1#
				A <- B %>% filter(step == last_step)#
				Z[[j]] <- list()#
				for (k in 1:dim(A)[1]) {#
					Z[[j]][[k]] <- data.frame()#
		    	    kx=A$x[k]#
		    	    ky=A$y[k]#
					# if plot has cacti, survey its neighbors#
					if (dim(population %>% #
						filter(#
		  					y_value > condition, #
		  			  		x==kx,#
		  			  		y==ky#
					))[1] > 0#
					) {#
					    # neighbor to north#
					    Z[[j]][[k]][1, "x"] = kx#
					   	Z[[j]][[k]][1, "y"] = ky - 1#
					    # neighbor to south#
					    Z[[j]][[k]][2, "x"] = kx#
					   	Z[[j]][[k]][2, "y"] = ky + 1#
					    # neighbor to east#
					    Z[[j]][[k]][3, "x"] = kx + 1#
					    Z[[j]][[k]][3, "y"] = ky#
					    # neighbor to west#
					    Z[[j]][[k]][4, "x"] = kx - 1#
					    Z[[j]][[k]][4, "y"] = ky#
					}#
					if (dim(Z[[j]][[k]])[1] > 0) {#
						Z[[j]][[k]]$step <- j#
					}#
				}#
				B <- do.call(rbind.fill, Z[[j]]) %>% #
					filter(!(is.na(x))) %>%#
					rbind.fill(B) #%>%#
					#.[!duplicated(.[, c("x", "y")]), ]	#
				Z[[j]] <- do.call(rbind.fill, Z[[j]])#
			}#
			sample <- do.call(rbind.data.frame, Z)#
		} else {#
			sample <- do.call(rbind.data.frame, Z)#
		}#
	# compress plot list to dataframe#
	    sample <- sample %>%#
			merge(population, by=c("x", "y")) %>%#
	    	filter(!is.na(x) & !is.na(y)) %>% # remove NAs#
	    	rbind.fill(S) %>% # merge with SRSWOR plots#
			arrange(step)#
	    # remove duplicates#
		no_duplicates <- sample[!duplicated(sample[, c("x", "y")]), ]#
		# give plots satisfying condition NetworkIDs#
		X = no_duplicates %>% #
			filter(y_value > condition) %>%#
		  	assignNetworkMembership#
		# give primary sample plots not satisfying condition NetworkIDs#
		Y = no_duplicates %>% filter(#
				y_value == condition, #
				Sampling=="SRSWOR" | Sampling=="SRSWR" | Sampling=="Primary Sample"#
		)#
        Y$NetworkID <- seq(#
			from = (max(X$NetworkID) + 1), #
			to = (max(X$NetworkID) + dim(Y)[1]), #
			by = 1#
		)#
		# get list of cluster/edge plots not satifying condition#
		Z = no_duplicates %>% filter(#
				y_value == condition, #
				is.na(Sampling)#
		)#
		# if there are plots not satisfying the condition, make NetworkIDs and m values of Cluster plots not satifying condition "NA"#
		if (dim(Z)[1] > 0) {#
			Z$NetworkID <- NA#
			Z$Sampling <- "Edge"#
			Z$m <- 0			#
			# merge back together		#
			Z = rbind.fill(X,Y,Z)	#
		} else {#
			# merge back together		#
			Z = rbind.fill(X,Y)			#
		}#
		if (dim(Z[which(is.na(Z$Sampling)), ])[1] > 0) {#
			Z[which(is.na(Z$Sampling)), ]$Sampling <- "Cluster"#
		}#
		# rename filtering variable#
		Z %<>% select(x, y, NetworkID, m, y_value, Sampling, step)#
		names(Z)[names(Z) == 'y_value'] <- y_variable#
		# add species attribute data#
		Z %<>% #
			merge(population %>% select(-NetworkID, -m)) %>%#
			select(x, y, NetworkID, m, y_value, Sampling, everything())#
		# warning	#
		if (dim(Z[duplicated(Z[, c("x", "y")]), ])[1] > 0) {#
			warning("Duplicates remaining in RACS sample")#
			stop()#
		}	#
  		return(Z)#
	} #
	else {#
		# add species attribute data to sample#
		S %<>% merge(population)#
		return(S)#
	}#
}
setwd('/Users/KSauby/Documents/Projects/ACS/R/drafts')
Z = createRACS(#
	population = patch_data_5, #
	seed=26, #
	n1=40, #
	y_variable = "Cactus",#
	f_max = 1#
)#
ggplot() +#
geom_point(data=patch_data_5, aes(x,y, size=factor(Cactus),#
		shape=factor(Cactus))) +#
scale_shape_manual(values=c(1, rep(16, length(2:13)))) +#
geom_point(data=Z, aes(x,y), shape = 0, size=7) +#
scale_colour_brewer(palette = "Set2") +#
ggtitle("f_max = 1")
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/munge')
setwd("/Users/KSauby/Documents/Projects/ACSampling_Project/data")#
sim.8dec15 <- read_feather('simulation.data.8dec15')#
sim.8dec15.2 <- read_feather('simulation.data.8dec15.2')#
sim.8dec15.3 <- read_feather('simulation.data.8dec15.3')#
sim.23Mar16.4 <- read_feather('simulation.data.23Mar16.4')#
sim.25Mar16 <- read_feather('simulation.data.25Mar16')#
sim.28Mar16 <- read_feather('simulation.data.28Mar16')#
sim.28Mar16.2 <- read_feather('simulation.data.28Mar16.2')#
sim.28Mar16.3 <- read_feather('simulation.data.28Mar16.3')#
sim.28Mar16.4 <- read_feather('simulation.data.28Mar16.4')#
sim.28Mar16.5 <- read_feather('simulation.data.28Mar16.5')#
sim.5Apr16.RACS <- read_feather('sim.5Apr16.RACS')#
sim.5Apr16.RACS.2 <- read_feather('sim.5Apr16.RACS.2')#
sim.5Apr16.RACS.3 <- read_feather('sim.5Apr16.RACS.3')#
sim.5Apr16.RACS.4 <- read_feather('sim.5Apr16.RACS.4')#
sim.5Apr16.RACS.5 <- read_feather('sim.5Apr16.RACS.5')#
sim.5Apr16.RACS.6 <- read_feather('sim.5Apr16.RACS.6')#
sim.5Apr16.RACS.7 <- read_feather('sim.5Apr16.RACS.7')#
sim.6Apr16 <- read_feather('sim.6Apr16')#
sim.6Apr16.2 <- read_feather('sim.6Apr16.2')#
sim.6Apr16.3 <- read_feather('sim.6Apr16.3')#
sim.13may16.20 <- read_feather('sim.13may16.20')#
sim.13may16.30 <- read_feather('sim.13may16.30')#
sim.13may16.40 <- read_feather('sim.13may16.40')#
sim.13may16.75 <- read_feather('sim.13may16.75')#
sim.13may16.100 <- read_feather('sim.13may16.100')#
sim.16June16 <- read_feather('sim.16June16')#
sim.16June16.2 <- read_feather('sim.16June16.2')#
sim.16June16.3 <- read_feather('sim.16June16.3')#
sim.16June16.4 <- read_feather('sim.16June16.4')#
sim.16June16.5 <- read_feather('sim.16June16.5')#
sim.27June16 <- read_feather('sim.27June16')#
sim.27June16_1 <- read_feather('sim.27June16_1')#
sim.27June16_2 <- read_feather('sim.27June16_2')#
# RACS#
sim.12Nov16 <- read_feather('sim.12Nov16')#
sim.12Nov16_ACS <- read_feather('sim.12Nov16_ACS')#
calc_20Nov16 <- read_feather('calc_20Nov16')#
calc_20Nov16_2 <- read_feather('calc_20Nov16_2')#
calc_20Nov16_3 <- read_feather('calc_20Nov16_3')#
calc_20Nov16_4 <- read_feather('calc_20Nov16_4')#
calc_20Nov16_5 <- read_feather('calc_20Nov16_5')#
# patch 3#
simulatedInclusionProbabilities_ACS_2Dec16 <- read_feather('simulatedInclusionProbabilities_ACS_2Dec16')#
simulatedInclusionProbabilities_ACS_4Dec16 <- read_feather('simulatedInclusionProbabilities_ACS_4Dec16')#
simulatedInclusionProbabilities_ACS_20Nov16 <- read_feather('simulatedInclusionProbabilities_ACS_20Nov16')#
simulatedInclusionProbabilities_RACS_2Dec16 <- read_feather('simulatedInclusionProbabilities_RACS_2Dec16')#
simulatedInclusionProbabilities_RACS_2Dec16_2 <- read_feather('simulatedInclusionProbabilities_RACS_2Dec16_2')#
simulatedInclusionProbabilities_RACS_2Dec16_3 <- read_feather('simulatedInclusionProbabilities_RACS_2Dec16_3')#
simulatedInclusionProbabilities_RACS_20Nov16 <- read_feather('simulatedInclusionProbabilities_RACS_20Nov16')#
simulatedInclusionProbabilities_RACS_20Nov16_2 <- read_feather('simulatedInclusionProbabilities_RACS_20Nov16_2')#
simulatedInclusionProbabilities_RACS_20Nov16_3 <- read_feather('simulatedInclusionProbabilities_RACS_20Nov16_3')#
simulatedInclusionProbabilities_RACS_20Nov16_4 <- read_feather('simulatedInclusionProbabilities_RACS_20Nov16_4')#
simulatedInclusionProbabilities_RACS_20Nov16_5 <- read_feather('simulatedInclusionProbabilities_RACS_20Nov16_5')#
simulatedInclusionProbabilities_RACS_20Nov16_6 <- read_feather('simulatedInclusionProbabilities_RACS_20Nov16_6')#
# patch 1#
simulatedInclusionProbabilities_patch1_RACS_9Dec16 <- read_feather('simulatedInclusionProbabilities_patch1_RACS_9Dec16')#
simulatedInclusionProbabilities_patch1_RACS_9Dec16_2 <- read_feather('simulatedInclusionProbabilities_patch1_RACS_9Dec16_2')#
# patch 2#
simulatedInclusionProbabilities_patch2_RACS_9Dec16 <- read_feather('simulatedInclusionProbabilities_patch2_RACS_9Dec16')#
simulatedInclusionProbabilities_patch2_RACS_9Dec16_2 <- read_feather('simulatedInclusionProbabilities_patch2_RACS_9Dec16_2')#
simulatedInclusionProbabilities_patch2_RACS_9Dec16_3 <- read_feather('simulatedInclusionProbabilities_patch2_RACS_9Dec16_3')#
# patch 4#
simulatedInclusionProbabilities_patch4_RACS_10Dec16 <- read_feather('simulatedInclusionProbabilities_patch4_RACS_10Dec16')#
simulatedInclusionProbabilities_patch4_RACS_10Dec16_2 <- read_feather('simulatedInclusionProbabilities_patch4_RACS_10Dec16_2')#
#
# patch 5#
simulatedInclusionProbabilities_patch5_RACS_10Dec16 <- read_feather('simulatedInclusionProbabilities_patch5_RACS_10Dec16')#
simulatedInclusionProbabilities_patch5_RACS_11Dec16 <- read_feather('simulatedInclusionProbabilities_patch5_RACS_11Dec16')
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript')
select_columns <- c(#
	"m", "x", "y", "N",#
	"pi_i_n1_20", "pi_i_n1_30", "pi_i_n1_40", "pi_i_n1_75", "pi_i_n1_100"#
)#
m_threshold = c(1:14)#
#
for (i in 1:5) {#
	Z <- patch_data %>% filter(n.networks == levels(n.networks)[i])#
	Z %<>% dplyr::select_(.dots=select_columns)#
	for (j in 1:length(m_threshold)) {#
		A <- Z %>% filter(m <= m_threshold[j])#
		B <- Z %>% filter(m > m_threshold[j])#
		# CALCULATE NEW INCLUSION PROBS#
		if (dim(A)[1] > 0) {#
			A$pii_20 <- pi_i(N=900, n1=20, m=A$m)#
			A$pii_30 <- pi_i(N=900, n1=30, m=A$m)#
			A$pii_40 <- pi_i(N=900, n1=40, m=A$m)#
			A$pii_75 <- pi_i(N=900, n1=75, m=A$m)#
			A$pii_100 <- pi_i(N=900, n1=100, m=A$m)#
		}#
		if (dim(B)[1] > 0) {#
			B$pii_20 <- pi_i(N=900, n1=20, m=m_threshold[j])#
			B$pii_30 <- pi_i(N=900, n1=30, m=m_threshold[j])#
			B$pii_40 <- pi_i(N=900, n1=40, m=m_threshold[j])#
			B$pii_75 <- pi_i(N=900, n1=75, m=m_threshold[j])#
			B$pii_100 <- pi_i(N=900, n1=100, m=m_threshold[j])#
		}#
		Z <- rbind.fill(A,B) %>%#
			setnames("pii_20", paste("pii_20", m_threshold[j], sep="__")) %>%#
			setnames("pii_30", paste("pii_30", m_threshold[j], sep="__")) %>%#
			setnames("pii_40", paste("pii_40", m_threshold[j], sep="__")) %>%#
			setnames("pii_75", paste("pii_75", m_threshold[j], sep="__")) %>%#
			setnames("pii_100", paste("pii_100", m_threshold[j], sep="__"))#
	}#
	Z %<>% mutate(coords = paste(x,y,sep="_"))#
	A <- Z %>% #
		dplyr::select(-c(#
			pi_i_n1_20, #
			pi_i_n1_30, #
			pi_i_n1_40, #
			pi_i_n1_75, #
			pi_i_n1_100#
		)) %>% #
		reshape2::melt(id.vars=c("m","x","y","N","coords")) %>%#
		setnames("value", "new_pii_value") %>%#
		setnames("variable", "new_pii_variable")#
	B <- Z %>% #
		dplyr::select(#
			coords, #
			pi_i_n1_20, #
			pi_i_n1_30, #
			pi_i_n1_40, #
			pi_i_n1_75, #
			pi_i_n1_100#
		) %>% #
		reshape2::melt(id.vars=c("coords")) %>%#
		setnames("value", "Thompson_pii_value") %>%#
		setnames("variable", "Thompson_pii_variable")#
	A$N.SRSWOR.plots <- NA#
	A[which(grepl("_20_", A$new_pii_variable)),]$N.SRSWOR.plots <- 20#
	A[which(grepl("_30_", A$new_pii_variable)),]$N.SRSWOR.plots <- 30#
	A[which(grepl("_40_", A$new_pii_variable)),]$N.SRSWOR.plots <- 40#
	A[which(grepl("_75_", A$new_pii_variable)),]$N.SRSWOR.plots <- 75#
	A[which(grepl("_100_", A$new_pii_variable)),]$N.SRSWOR.plots <- 100#
	A$m_threshold <- NA#
	A[which(grepl("__1", A$new_pii_variable)),]$m_threshold <- 1#
	A[which(grepl("__2", A$new_pii_variable)),]$m_threshold <- 2#
	A[which(grepl("__3", A$new_pii_variable)),]$m_threshold <- 3#
	A[which(grepl("__4", A$new_pii_variable)),]$m_threshold <- 4#
	A[which(grepl("__5", A$new_pii_variable)),]$m_threshold <- 5#
	A[which(grepl("__6", A$new_pii_variable)),]$m_threshold <- 6#
	A[which(grepl("__7", A$new_pii_variable)),]$m_threshold <- 7#
	A[which(grepl("__8", A$new_pii_variable)),]$m_threshold <- 8#
	A[which(grepl("__9", A$new_pii_variable)),]$m_threshold <- 9#
	A[which(grepl("__10", A$new_pii_variable)),]$m_threshold <- 10#
	A[which(grepl("__11", A$new_pii_variable)),]$m_threshold <- 11#
	A[which(grepl("__12", A$new_pii_variable)),]$m_threshold <- 12#
	A[which(grepl("__13", A$new_pii_variable)),]$m_threshold <- 13#
	A[which(grepl("__14", A$new_pii_variable)),]$m_threshold <- 14#
	B$N.SRSWOR.plots <- NA#
	B[which(grepl("_20", B$Thompson_pii_variable)),]$N.SRSWOR.plots <- 20#
	B[which(grepl("_30", B$Thompson_pii_variable)),]$N.SRSWOR.plots <- 30#
	B[which(grepl("_40", B$Thompson_pii_variable)),]$N.SRSWOR.plots <- 40#
	B[which(grepl("_75", B$Thompson_pii_variable)),]$N.SRSWOR.plots <- 75#
	B[which(grepl("_100", B$Thompson_pii_variable)),]$N.SRSWOR.plots <- 100#
	B %<>% dplyr::select(-Thompson_pii_variable)#
	A %<>% dplyr::select(-new_pii_variable)#
#
	Z <- A %>%#
		merge(B, by=c("coords", "N.SRSWOR.plots"), all=T) #
	assign(paste("results_pop", i, sep="_"), value = Z)#
}#
#
# ACS INCLUSION PROBABILITIES#
# population 3#
RACSinclusionprobs.3 <- rbind.fill(#
		simulatedInclusionProbabilities_RACS_20Nov16,#
		simulatedInclusionProbabilities_RACS_20Nov16_2,#
		simulatedInclusionProbabilities_RACS_20Nov16_3,#
		simulatedInclusionProbabilities_RACS_20Nov16_4,#
		simulatedInclusionProbabilities_RACS_20Nov16_5,#
		simulatedInclusionProbabilities_RACS_20Nov16_6,#
		simulatedInclusionProbabilities_RACS_2Dec16_3,#
		simulatedInclusionProbabilities_RACS_2Dec16_2,#
		simulatedInclusionProbabilities_RACS_2Dec16#
	) %>%#
	group_by(realization,#
		n.networks,#
		N.SRSWOR.plots,#
		SamplingDesign,#
		coords#
	) %>%#
	summarise(#
		times_included = sum(times_included),#
		simulations = sum(simulations)#
	) %>%#
	mutate(Population = 3) %>%#
	merge(results_pop_3, by=c("coords", "N.SRSWOR.plots"), all=T)#
# population 2#
RACSinclusionprobs.2 <- rbind.fill(#
	simulatedInclusionProbabilities_patch2_RACS_9Dec16,#
	simulatedInclusionProbabilities_patch2_RACS_9Dec16_2,#
	simulatedInclusionProbabilities_patch2_RACS_9Dec16_3#
) %>%#
	group_by(realization,#
		n.networks,#
		N.SRSWOR.plots,#
		SamplingDesign,#
		coords#
	) %>%#
	summarise(#
		times_included = sum(times_included),#
		simulations = sum(simulations)#
	) %>%#
	mutate(Population = 2) %>%#
	merge(results_pop_2, by=c("coords", "N.SRSWOR.plots"), all=T)#
#
# population 1#
RACSinclusionprobs.1 <- rbind.fill(#
	simulatedInclusionProbabilities_patch1_RACS_9Dec16,#
	simulatedInclusionProbabilities_patch1_RACS_9Dec16_2#
) %>%#
		group_by(realization,#
			n.networks,#
			N.SRSWOR.plots,#
			SamplingDesign,#
			coords#
		) %>%#
		summarise(#
			times_included = sum(times_included),#
			simulations = sum(simulations)#
		) %>%#
		mutate(Population = 1) %>%#
		merge(results_pop_1, by=c("coords", "N.SRSWOR.plots"), all=T)#
# population 4#
RACSinclusionprobs.4 <- rbind.fill(#
	simulatedInclusionProbabilities_patch4_RACS_10Dec16,#
	simulatedInclusionProbabilities_patch4_RACS_10Dec16_2#
	) %>%#
	group_by(realization,#
		n.networks,#
		N.SRSWOR.plots,#
		SamplingDesign,#
		coords#
	) %>%#
	summarise(#
		times_included = sum(times_included),#
		simulations = sum(simulations)#
	) %>%#
	mutate(Population = 4) %>%#
	merge(results_pop_4, by=c("coords", "N.SRSWOR.plots"), all=T)#
#
# population 5#
RACSinclusionprobs.5 <- rbind.fill(#
	simulatedInclusionProbabilities_patch5_RACS_10Dec16,#
	simulatedInclusionProbabilities_patch5_RACS_11Dec16#
) %>%#
	group_by(realization,#
		n.networks,#
		N.SRSWOR.plots,#
		SamplingDesign,#
		coords#
	) %>%#
	summarise(#
		times_included = sum(times_included),#
		simulations = sum(simulations)#
	) %>%#
	mutate(Population = 5) %>%#
	merge(results_pop_5, by=c("coords", "N.SRSWOR.plots"), all=T)#
temp <- RACSinclusionprobs.2 %>%#
	rbind.fill(RACSinclusionprobs.3) %>%#
	rbind.fill(RACSinclusionprobs.1) %>%#
	rbind.fill(RACSinclusionprobs.4) %>%#
	rbind.fill(RACSinclusionprobs.5) %>%#
	mutate(#
		inclusion_prob = times_included/simulations,#
		inclusion_prob_diff_from_true_new_pii = #
			inclusion_prob - new_pii_value,#
		inclusion_prob_diff_from_true_old_pii = inclusion_prob - #
			Thompson_pii_value#
	)#
#
temp$N.SRSWOR.plots %<>% as.factor()#
#
temp <- temp %>%#
filter(!(SamplingDesign=="ACS")) %>%#
group_by(SamplingDesign, N.SRSWOR.plots, m_threshold, Population) %>%#
summarise(#
	mean_error_old_pii = mean(inclusion_prob_diff_from_true_old_pii),#
	mean_error_new_pii = mean(inclusion_prob_diff_from_true_new_pii)#
	)#
temp$mean_error_old_pii %<>% round(4)#
temp$mean_error_new_pii %<>% round(4)#
#
temp %<>% #
	as.data.frame %>% #
	reshape2::melt(id.vars=c("SamplingDesign","N.SRSWOR.plots","m_threshold", "Population")) %>%#
	setnames("variable", "Inclusion Probability Formula")#
levels(temp$`Inclusion Probability Formula`) <- c("Thompson (1990) Formula",  "New Formula")
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript')
ggplot(data=temp, #
		aes(#
			m_threshold, #
			value, #
			colour = `Inclusion Probability Formula`,#
			shape=factor(N.SRSWOR.plots)#
		)) +#
	geom_point(size=5) +#
	geom_hline(yintercept=0) +#
	geom_vline(xintercept=c(5,7,7)) +#
	stat_smooth() +#
	facet_wrap(~Population) +#
	KEStheme() +#
	scale_x_continuous(breaks=c(1:14)) +#
	xlab("m threshold") +#
	ylab("Mean(Simulation Inclusion Probability -\nInclusion Probability from Formula)") +#
	theme(#
		legend.position="bottom"#
	) +#
	guides(#
		colour=guide_legend(title="Inclusion Probability Formula",nrow=2),#
		shape=guide_legend(title="Primary Sample Size")#
	)
?y_HT
?new_HT
?new_H_T
?new_y_HT
patch3 <- patch_data %>% filter(n.networks == levels(n.networks)[3])#
newsample = createRACS(patch3, seed=26, n1=40, "Cactus")#
y = newsample$Cactus#
m = newsample$m#
N = 900#
n1 = 40#
m_threshold = 7
setwd('/Users/KSauby/Documents/Projects/ACS/R')
y = newsample$Cactus
setwd('/Users/KSauby/Documents/Projects/ACS/R')
N = 900
setwd('/Users/KSauby/Documents/Projects/ACS/R')
n1 = 40
setwd('/Users/KSauby/Documents/Projects/ACS/R')
m = newsample$m
setwd('/Users/KSauby/Documents/Projects/ACS/R')
m_threshold = 7
setwd('/Users/KSauby/Documents/Projects/ACS/R')
criterion=NULL
setwd('/Users/KSauby/Documents/Projects/ACS/R')
J = ifelse(y >= criterion | sampling=="SRSWOR", 1, 0)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
J = 1
setwd('/Users/KSauby/Documents/Projects/ACS/R')
Z = data.frame(y=y, m=m)#
	A <- Z %>% filter(m <= m_threshold)#
	B <- Z %>% filter(m > m_threshold)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
A$pi_i_values = pi_i(N, n1, A$m)#
	B$pi_i_values = pi_i(N, n1, m_threshold)#
	Z <- rbind.fill(A, B) %>% as.data.frame
setwd('/Users/KSauby/Documents/Projects/ACS/R')
sum(unlist(Z$y)*J/unlist(Z$pi_i_values), na.rm=T)/N
new_y_HT(#
	y = newsample$Cactus, #
	N = 900, #
	n1 = 40, #
	m = newsample$m, #
	m_threshold = 7#
)
y_HT(#
	y = newsample$Cactus, #
	N = 900, #
	n1 = 40, #
	m = newsample$m#
)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
y = newsample$Cactus
setwd('/Users/KSauby/Documents/Projects/ACS/R')
N = 900
setwd('/Users/KSauby/Documents/Projects/ACS/R')
n1 = 40
setwd('/Users/KSauby/Documents/Projects/ACS/R')
m = newsample$m
setwd('/Users/KSauby/Documents/Projects/ACS/R')
m_threshold = 7
setwd('/Users/KSauby/Documents/Projects/ACS/R')
J = 1
setwd('/Users/KSauby/Documents/Projects/ACS/R')
Z = data.frame(y=y, m=m)
Z
setwd('/Users/KSauby/Documents/Projects/ACS/R')
A <- Z %>% filter(m <= m_threshold)#
	B <- Z %>% filter(m > m_threshold)
B
setwd('/Users/KSauby/Documents/Projects/ACS/R')
A$pi_i_values = pi_i(N, n1, A$m)#
	B$pi_i_values = pi_i(N, n1, m_threshold)
B
A
setwd('/Users/KSauby/Documents/Projects/ACS/R')
Z <- rbind.fill(A, B) %>% as.data.frame#
	y_HT = sum(unlist(Z$y)*J/unlist(Z$pi_i_values), na.rm=T)/N
setwd('/Users/KSauby/Documents/Projects/ACS/R')
y_HT
setwd('/Users/KSauby/Documents/Projects')
setwd("./ACS")#
#setwd("./modresproc")#
devtools::test()#
devtools::document()#
devtools::install()

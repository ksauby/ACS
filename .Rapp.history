setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
ovar
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
rvar
setwd('/Users/KSauby/Documents/Projects/ACS/R')
# REALIZATION DATA#
	x_start 		<- 1#
	x_end 			<- 30#
	y_start 		<- 1#
	y_end 			<- 30#
	n.networks 		<- c(5, 15, 10, 20, 30, 40)#
	n.realizations 	<- 1#
	SpeciesInfo 	<- PlotSurveys_season1#
	buffer			<- 5#
	start.seed		<- 1#
	variables		<- ovar#
	# CREATE REALIZATIONS#
	patch_data <- createSpeciesPatchRealizations(#
		x_start, #
		x_end,#
		y_start, #
		y_end, #
		buffer, #
		n.networks, #
		n.realizations, #
		SpeciesInfo, #
		start.seed,#
		variables#
	)#
	colnames(patch_data)[names(patch_data) == "n.networks"] <- "population"#
	patch_data$population %<>% as.factor()
setwd('/Users/KSauby/Documents/Projects/ACS/R')
levels(patch_data$population)
CactusRealizationSummary<- createCactusRealizationSummary(CactusRealizations)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
#' Create Summary of Cactus Realization Data#
#' #
#' @return The data from Sauby and Christman.#
#' #
#' @references Sauby, K.E and Christman, M.C. \emph{In preparation.} Restricted adaptive cluster sampling.#
#' @export#
#
createCactusRealizationSummary <- function() {#
	calculatePopulationSummaryStatistics(#
		population_data = CactusRealizations, #
		summary.variables = c("Stricta", "Pusilla", "Cactus",#
			"MEPR_on_Stricta", "CACA_on_Stricta", "Percent_Cover_Stricta", #
			"Height_Stricta", "Old_Moth_Evidence_Stricta"), #
		population.grouping.variable = "population", #
		ratio.variables = c("MEPR_on_Stricta", "CACA_on_Stricta", #
			"Percent_Cover_Stricta", "Height_Stricta", #
			"Old_Moth_Evidence_Stricta")#
	)
}
CactusRealizationSummary<- createCactusRealizationSummary(CactusRealizations)
CactusRealizationSummary<- createCactusRealizationSummary()
head(CactusRealizationSummary)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
#' Create Summary of Cactus Realization Data#
#' #
#' @return The data from Sauby and Christman.#
#' #
#' @references Sauby, K.E and Christman, M.C. \emph{In preparation.} Restricted adaptive cluster sampling.#
#' @export#
#
createCactusRealizationSummary <- function(CactusRealizations) {#
	calculatePopulationSummaryStatistics(#
		population_data = CactusRealizations, #
		summary.variables = c("Stricta", "Pusilla", "Cactus",#
			"MEPR_on_Stricta", "CACA_on_Stricta", "Percent_Cover_Stricta", #
			"Height_Stricta", "Old_Moth_Evidence_Stricta"), #
		population.grouping.variable = "population", #
		ratio.variables = c("MEPR_on_Stricta", "CACA_on_Stricta", #
			"Percent_Cover_Stricta", "Height_Stricta", #
			"Old_Moth_Evidence_Stricta")#
	)#
}
CactusRealizationSummary<- createCactusRealizationSummary(CactusRealizations)
head(CactusRealizationSummary)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
#' Create Cactus Realization Data#
#' #
#' @return The data from Sauby and Christman.#
#' @examples #
#' library(ggplot2)#
#' CactusRealizations <- createCactusRealizations()#
#' ggplot(#
#' 	CactusRealizations,#
#' 	aes(#
#' 		x, #
#' 		y, #
#' 		shape = factor(Cactus)#
#' )) +#
#' 	geom_point() +#
#' 	facet_wrap(~population) +#
#' 	scale_shape_manual(values=c(4,16))#
#' #
#' @references Sauby, K.E and Christman, M.C. \emph{In preparation.} Restricted adaptive cluster sampling.#
#' @export#
#
createCactusRealizations <- function() {#
	# REALIZATION DATA#
	x_start 		<- 1#
	x_end 			<- 30#
	y_start 		<- 1#
	y_end 			<- 30#
	n.networks 		<- c(5, 15, 10, 20, 30, 40)#
	n.realizations 	<- 1#
	SpeciesInfo 	<- PlotSurveys_season1#
	buffer			<- 5#
	start.seed		<- 1#
	variables		<- ovar#
	# CREATE REALIZATIONS#
	patch_data <- createSpeciesPatchRealizations(#
		x_start, #
		x_end,#
		y_start, #
		y_end, #
		buffer, #
		n.networks, #
		n.realizations, #
		SpeciesInfo, #
		start.seed,#
		variables#
	)#
	colnames(patch_data)[names(patch_data) == "n.networks"] <- "population"#
	patch_data$population %<>% as.factor()#
	levels(patch_data$population) <- 1:6#
	# convert NAs to zeros#
	 patch_data[,c(#
	 	"CACA_on_Pusilla",#
	 	"CACA_on_Stricta",#
	 	"MEPR_on_Pusilla",#
	 	"MEPR_on_Stricta",#
	 	"Old_Moth_Evidence_Pusilla",#
	 	"Old_Moth_Evidence_Stricta",#
	 	"Percent_Cover_Pusilla",#
	 	"Percent_Cover_Stricta",#
	 	"Height_Pusilla",#
	 	"Height_Stricta"#
	 )] %<>% apply(., 2, NA_is_Zero_Function)#
	 return(patch_data)#
}
CactusRealizations <- createCactusRealizations()
CactusRealizationSummary<- createCactusRealizationSummary(CactusRealizations)
head(CactusRealizationSummary)
save(CactusRealizations, file="CactusRealizations.rda")
save(CactusRealizationSummary, file="CactusRealizationSummary.rda")
getwd()
head(CactusRealizationSummary[[2]])
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
PopulationSummaryStatistics = patch_data_summary
setwd('/Users/KSauby/Documents/Projects/ACS/R')
A <- PopulationSummaryStatistics[[2]] %>%#
		dplyr::select(Var, variable, population) %>%#
		rowwise() %>%#
		mutate(#
			variable = replace(#
				variable,#
				which(variable %in% rvar),#
				paste(variable, "ratio", sep="_")#
			)#
		) %>%#
		ungroup() %>%#
		reshape2::dcast(., population ~ variable, value.var="Var")
head(A)
head(A)
head(PopulationSummaryStatistics[[2]])
length(unique(PopulationSummaryStatistics[[2]]$variable))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
A <- PopulationSummaryStatistics[[2]] %>%#
		dplyr::select(Var, variable, population) %>%#
		rowwise() %>%#
		mutate(#
			variable = replace(#
				variable,#
				which(variable %in% rvar),#
				paste(variable, "ratio", sep="_")#
			)#
		) %>%#
		ungroup() %>%#
		reshape2::dcast(., population ~ variable, value.var="Var")#
	names(A)[2:(length(unique(PopulationSummaryStatistics[[2]]$variable)) + 1)] <- paste(names(A)[2:(length(unique(PopulationSummaryStatistics[[2]]$variable)) + 1)], "var", sep="_")
head(A)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
nvar <- length(unique(PopulationSummaryStatistics[[2]]$variable))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
2:(nvar + 1)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
A <- PopulationSummaryStatistics[[2]] %>%#
		dplyr::select(Var, variable, population) %>%#
		rowwise() %>%#
		mutate(#
			variable = replace(#
				variable,#
				which(variable %in% rvar),#
				paste(variable, "ratio", sep="_")#
			)#
		) %>%#
		ungroup() %>%#
		reshape2::dcast(., population ~ variable, value.var="Var")#
	nvar <- length(unique(PopulationSummaryStatistics[[2]]$variable))#
	names(A)[2:(nvar + 1)] <- paste(names(A)[2:(nvar + 1)], "var", sep="_")
setwd('/Users/KSauby/Documents/Projects/ACS/R')
B <- PopulationSummaryStatistics[[2]] %>%#
		dplyr::select(Mean, variable, population) %>%#
		rowwise() %>%#
		mutate(#
			variable = replace(#
				variable,#
				which(variable %in% rvar),#
				paste(variable, "ratio", sep="_")#
				)#
		) %>%#
		ungroup() %>%#
		reshape2::dcast(., population ~ variable, value.var="Mean")#
	names(B)[2:(nvar + 1)] <- paste(names(B)[2:(nvar + 1)], "var", sep="_")
head(B)
head( PopulationSummaryStatistics[[2]] )
head( PopulationSummaryStatistics[[1]] )
dim( PopulationSummaryStatistics[[2]] )
dim( PopulationSummaryStatistics[[1]] )
PopulationSummaryStatistics[[1]] %>%#
		dplyr::select(population, N) %>% t
setwd('/Users/KSauby/Documents/Projects/ACS/R')
A <- PopulationSummaryStatistics[[2]] %>%#
		dplyr::select(Var, variable, population) %>%#
		rowwise() %>%#
		mutate(#
			variable = replace(#
				variable,#
				which(variable %in% rvar),#
				paste(variable, "ratio", sep="_")#
			)#
		) %>%#
		ungroup() %>%#
		reshape2::dcast(., population ~ variable, value.var="Var")#
	nvar <- length(unique(PopulationSummaryStatistics[[2]]$variable))#
	names(A)[2:(nvar + 1)] <- paste(names(A)[2:(nvar + 1)], "var", sep="_")#
	# mean#
	B <- PopulationSummaryStatistics[[2]] %>%#
		dplyr::select(Mean, variable, population) %>%#
		rowwise() %>%#
		mutate(#
			variable = replace(#
				variable,#
				which(variable %in% rvar),#
				paste(variable, "ratio", sep="_")#
				)#
		) %>%#
		ungroup() %>%#
		reshape2::dcast(., population ~ variable, value.var="Mean")#
	names(B)[2:(nvar + 1)] <- paste(names(B)[2:(nvar + 1)], "var", sep="_")#
	# population size#
	C <- PopulationSummaryStatistics[[1]] %>%#
		dplyr::select(population, N)#
	# merge all together#
	patch_data_summary_wide <- merge(A, B) %>% merge(C)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
patch_data_summary_wide
setwd('/Users/KSauby/Documents/Projects/ACS/R')
patch_data_summary_wide <- merge(A, B)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
patch_data_summary_wide
setwd('/Users/KSauby/Documents/Projects/ACS/R')
A <- PopulationSummaryStatistics[[2]] %>%#
		dplyr::select(Var, variable, population) %>%#
		rowwise() %>%#
		mutate(#
			variable = replace(#
				variable,#
				which(variable %in% rvar),#
				paste(variable, "ratio", sep="_")#
			)#
		) %>%#
		ungroup() %>%#
		reshape2::dcast(., population ~ variable, value.var="Var")#
	nvar <- length(unique(PopulationSummaryStatistics[[2]]$variable))#
	names(A)[2:(nvar + 1)] <- paste(names(A)[2:(nvar + 1)], "var", sep="_")#
	# mean#
	B <- PopulationSummaryStatistics[[2]] %>%#
		dplyr::select(Mean, variable, population) %>%#
		rowwise() %>%#
		mutate(#
			variable = replace(#
				variable,#
				which(variable %in% rvar),#
				paste(variable, "ratio", sep="_")#
				)#
		) %>%#
		ungroup() %>%#
		reshape2::dcast(., population ~ variable, value.var="Mean")#
	names(B)[2:(nvar + 1)] <- paste(names(B)[2:(nvar + 1)], "var", sep="_")#
	# population size
A <- PopulationSummaryStatistics[[2]] %>%#
		dplyr::select(Var, variable, population) %>%#
		rowwise() %>%#
		mutate(#
			variable = replace(#
				variable,#
				which(variable %in% rvar),#
				paste(variable, "ratio", sep="_")#
			)#
		) %>%#
		ungroup() %>%#
		reshape2::dcast(., population ~ variable, value.var="Var")
A
setwd('/Users/KSauby/Documents/Projects/ACS/R')
A <- PopulationSummaryStatistics[[2]] %>%#
		dplyr::select(Var, variable, population) %>%#
		rowwise() %>%#
		mutate(#
			variable = replace(#
				variable,#
				which(variable %in% rvar),#
				paste(variable, "ratio", sep="_")#
			)#
		) %>%#
		ungroup() %>%#
		reshape2::dcast(., population ~ variable, value.var="Var")#
	nvar <- length(unique(PopulationSummaryStatistics[[2]]$variable))#
	names(A)[2:(nvar + 1)] <- paste(names(A)[2:(nvar + 1)], "var", sep="_")
A
setwd('/Users/KSauby/Documents/Projects/ACS/R')
B <- PopulationSummaryStatistics[[2]] %>%#
		dplyr::select(Mean, variable, population) %>%#
		rowwise() %>%#
		mutate(#
			variable = replace(#
				variable,#
				which(variable %in% rvar),#
				paste(variable, "ratio", sep="_")#
				)#
		) %>%#
		ungroup() %>%#
		reshape2::dcast(., population ~ variable, value.var="Mean")#
	names(B)[2:(nvar + 1)] <- paste(names(B)[2:(nvar + 1)], "var", sep="_")
B
setwd('/Users/KSauby/Documents/Projects/ACS/R')
PopulationSummaryStatistics[[1]] %>%#
		dplyr::select(population, N)#
	# merge all together
setwd('/Users/KSauby/Documents/Projects/ACS/R')
merge(A, B, by="population")
setwd('/Users/KSauby/Documents/Projects/ACS/R')
A <- PopulationSummaryStatistics[[2]] %>%#
		dplyr::select(Var, variable, population) %>%#
		rowwise() %>%#
		mutate(#
			variable = replace(#
				variable,#
				which(variable %in% rvar),#
				paste(variable, "ratio", sep="_")#
			)#
		) %>%#
		ungroup() %>%#
		reshape2::dcast(., population ~ variable, value.var="Var")#
	nvar <- length(unique(PopulationSummaryStatistics[[2]]$variable))#
	names(A)[2:(nvar + 1)] <- paste(names(A)[2:(nvar + 1)], "var", sep="_")#
	# mean#
	B <- PopulationSummaryStatistics[[2]] %>%#
		dplyr::select(Mean, variable, population) %>%#
		rowwise() %>%#
		mutate(#
			variable = replace(#
				variable,#
				which(variable %in% rvar),#
				paste(variable, "ratio", sep="_")#
				)#
		) %>%#
		ungroup() %>%#
		reshape2::dcast(., population ~ variable, value.var="Mean")#
	names(B)[2:(nvar + 1)] <- paste(names(B)[2:(nvar + 1)], "mean", sep="_")#
	# population size#
	C <- PopulationSummaryStatistics[[1]] %>%#
		dplyr::select(population, N)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
patch_data_summary_wide <- merge(A, B, by="population") %>% merge(C, by="population")
setwd('/Users/KSauby/Documents/Projects/ACS/R')
patch_data_summary_wide
setwd('/Users/KSauby/Documents/Projects/ACS/R')
#' Create "Wide" Format Population Summary Statistics for Patch Population Data#
#' #
#' @param PopulationSummaryStatistics Created by the function calculatePopulationSummaryStatistics.#
#' @param ovar list of occupancy variables#
#' @param rvar list of ratio variables#
#' @return Dataframe with a column per mean/variance of each variable and a row per population.#
#' @export#
#' @examples#
createWidePopulationSummaryStatistics <- function(PopulationSummaryStatistics, ovar, rvar) {#
	# variance#
	A <- PopulationSummaryStatistics[[2]] %>%#
		dplyr::select(Var, variable, population) %>%#
		rowwise() %>%#
		mutate(#
			variable = replace(#
				variable,#
				which(variable %in% rvar),#
				paste(variable, "ratio", sep="_")#
			)#
		) %>%#
		ungroup() %>%#
		reshape2::dcast(., population ~ variable, value.var="Var")#
	nvar <- length(unique(PopulationSummaryStatistics[[2]]$variable))#
	names(A)[2:(nvar + 1)] <- paste(names(A)[2:(nvar + 1)], "var", sep="_")#
	# mean#
	B <- PopulationSummaryStatistics[[2]] %>%#
		dplyr::select(Mean, variable, population) %>%#
		rowwise() %>%#
		mutate(#
			variable = replace(#
				variable,#
				which(variable %in% rvar),#
				paste(variable, "ratio", sep="_")#
				)#
		) %>%#
		ungroup() %>%#
		reshape2::dcast(., population ~ variable, value.var="Mean")#
	names(B)[2:(nvar + 1)] <- paste(names(B)[2:(nvar + 1)], "mean", sep="_")#
	# population size#
	C <- PopulationSummaryStatistics[[1]] %>%#
		dplyr::select(population, N)#
	# merge all together#
	merge(A, B, by="population") %>% merge(C, by="population")#
}
setwd('/Users/KSauby/Documents/Projects/ACSampling_project/code/Manuscript/simulations')
population.grouping.variables	<- c("population")#
sampling.grouping.variables <- c("N.SRSWOR.plots", "SamplingDesign", "Plots")#
statistics 			<- c("mean", "var")#
ratio.statistics	<- c("mean")#
#
patch_data_summary_wide <- createWidePopulationSummaryStatistics(#
	PopulationSummaryStatistics = patch_data_summary,#
	ovar = ovar,#
	rvar = rvar#
)
patch_data_summary_wide
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
CactusRealizationSummary <- createCactusRealizationSummary(CactusRealizations)
head(CactusRealizations)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
CactusRealizations <- createCactusRealizations()
head(CactusRealizations)
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
pop_1_stricta <- CactusRealizations %>% filter(population==1, Stricta==1)#
	mean(pop_1_stricta$CACA_on_Stricta)#
	mean(pop_1_stricta$MEPR_on_Stricta)#
	mean(pop_1_stricta$Old_Moth_Evidence_Stricta)
head(CactusRealizationSummary[[2]])
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
CactusRealizationSummary[[2]] %>% filter(population==1, variable==CACA_on_Stricta) %$% Mean
unique(CactusRealizationSummary[[2]]$variable)
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
CactusRealizationSummary[[2]] %>% filter(population==1, variable=="CACA_on_Stricta") %$% Mean
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
expect_that(#
		CactusRealizationSummary[[2]] %>% #
			filter(population==1, variable=="CACA_on_Stricta") %$% #
			Mean,#
		equals(mean(pop_1_stricta$CACA_on_Stricta))#
	)
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
expect_that(#
		CactusRealizationSummary[[2]] %>% #
			filter(population==1, variable=="CACA_on_Pusilla") %$% #
			Mean,#
		equals(mean(pop_1_stricta$CACA_on_Stricta))#
	)
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
mean_pop_1_CACA_on_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==1, variable=="CACA_on_Stricta") %$% #
		Mean
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
expect_that(#
		mean_pop_1_CACA_on_Stricta,#
		equals(mean(pop_1_stricta$CACA_on_Stricta))#
	)
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
mean_pop_1_CACA_on_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==1, variable=="MEPR_on_Stricta") %$% #
		Mean
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
expect_that(#
		mean_pop_1_CACA_on_Stricta,#
		equals(mean(pop_1_stricta$CACA_on_Stricta))#
	)
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
mean_pop_1_CACA_on_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==1, variable=="CACA_on_Stricta") %$% #
		Mean#
	mean(pop_1_stricta$MEPR_on_Stricta)#
	mean(pop_1_stricta$Old_Moth_Evidence_Stricta)#
#
	expect_that(#
		mean_pop_1_CACA_on_Stricta,#
		equals(mean(pop_1_stricta$CACA_on_Stricta))#
	)
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
# some ratio variables#
	pop_1_stricta <- CactusRealizations %>% filter(population==1, Stricta==1)#
	mean_pop_1_CACA_on_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==1, variable=="CACA_on_Stricta") %$% #
		Mean#
	mean_pop_1_MEPR_on_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==1, variable=="MEPR_on_Stricta") %$% #
		Mean#
	mean_pop_1_Old_Moth_Evidence_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==1, variable=="Old_Moth_Evidence_Stricta") %$% #
		Mean#
	expect_that(#
		mean_pop_1_CACA_on_Stricta,#
		equals(mean(pop_1_stricta$CACA_on_Stricta))#
	)#
	expect_that(#
		mean_pop_1_MEPR_on_Stricta,#
		equals(mean(pop_1_stricta$MEPR_on_Stricta))#
	)#
	expect_that(#
		mean_pop_1_Old_Moth_Evidence_Stricta,#
		equals(mean(pop_1_stricta$Old_Moth_Evidence_Stricta))#
	)
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
pop_6_stricta <- CactusRealizations %>% filter(population==6, Stricta==1)#
	mean_pop_6_CACA_on_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==1, variable=="CACA_on_Stricta") %$% #
		Mean#
	mean_pop_6_MEPR_on_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==1, variable=="MEPR_on_Stricta") %$% #
		Mean#
	mean_pop_6_Old_Moth_Evidence_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==1, variable=="Old_Moth_Evidence_Stricta") %$% #
		Mean#
	expect_that(#
		mean_pop_6_CACA_on_Stricta,#
		equals(mean(pop_6_stricta$CACA_on_Stricta))#
	)#
	expect_that(#
		mean_pop_6_MEPR_on_Stricta,#
		equals(mean(pop_6_stricta$MEPR_on_Stricta))#
	)#
	expect_that(#
		mean_pop_6_Old_Moth_Evidence_Stricta,#
		equals(mean(pop_6_stricta$Old_Moth_Evidence_Stricta))#
	)
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
pop_6_stricta <- CactusRealizations %>% filter(population==6, Stricta==1)#
	mean_pop_6_CACA_on_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==6, variable=="CACA_on_Stricta") %$% #
		Mean#
	mean_pop_6_MEPR_on_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==6, variable=="MEPR_on_Stricta") %$% #
		Mean#
	mean_pop_6_Old_Moth_Evidence_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==6, variable=="Old_Moth_Evidence_Stricta") %$% #
		Mean#
	expect_that(#
		mean_pop_6_CACA_on_Stricta,#
		equals(mean(pop_6_stricta$CACA_on_Stricta))#
	)#
	expect_that(#
		mean_pop_6_MEPR_on_Stricta,#
		equals(mean(pop_6_stricta$MEPR_on_Stricta))#
	)#
	expect_that(#
		mean_pop_6_Old_Moth_Evidence_Stricta,#
		equals(mean(pop_6_stricta$Old_Moth_Evidence_Stricta))#
	)
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
pop_1_stricta <- CactusRealizations %>% filter(population==1, Stricta==1)#
	mean_pop_1_CACA_on_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==1, variable=="CACA_on_Stricta") %$% #
		Mean#
	mean_pop_1_MEPR_on_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==1, variable=="MEPR_on_Stricta") %$% #
		Mean#
	mean_pop_1_Old_Moth_Evidence_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==1, variable=="Old_Moth_Evidence_Stricta") %$% #
		Mean#
	var_pop_1_CACA_on_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==1, variable=="CACA_on_Stricta") %$% #
		Var#
	var_pop_1_MEPR_on_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==1, variable=="MEPR_on_Stricta") %$% #
		Var#
	var_pop_1_Old_Moth_Evidence_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==1, variable=="Old_Moth_Evidence_Stricta") %$% #
		Var#
	expect_that(#
		mean_pop_1_CACA_on_Stricta,#
		equals(mean(pop_1_stricta$CACA_on_Stricta))#
	)#
	expect_that(#
		mean_pop_1_MEPR_on_Stricta,#
		equals(mean(pop_1_stricta$MEPR_on_Stricta))#
	)#
	expect_that(#
		mean_pop_1_Old_Moth_Evidence_Stricta,#
		equals(mean(pop_1_stricta$Old_Moth_Evidence_Stricta))#
	)#
	expect_that(#
		var_pop_1_CACA_on_Stricta,#
		equals(var(pop_1_stricta$CACA_on_Stricta))#
	)#
	expect_that(#
		var_pop_1_MEPR_on_Stricta,#
		equals(var(pop_1_stricta$MEPR_on_Stricta))#
	)#
	expect_that(#
		var_pop_1_Old_Moth_Evidence_Stricta,#
		equals(var(pop_1_stricta$Old_Moth_Evidence_Stricta))#
	)
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
expect_that(#
		var_pop_1_CACA_on_Stricta,#
		equals(PopVariance(pop_1_stricta$CACA_on_Stricta))#
	)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
tion_data = CactusRealiza
setwd('/Users/KSauby/Documents/Projects/ACS/R')
population_data = CactusRealizations
setwd('/Users/KSauby/Documents/Projects/ACS/R')
summary.variables = c("Stricta", "Pusilla", "Cactus",#
			"MEPR_on_Stricta", "CACA_on_Stricta", "Percent_Cover_Stricta", #
			"Height_Stricta", "Old_Moth_Evidence_Stricta")
setwd('/Users/KSauby/Documents/Projects/ACS/R')
"Height_Stricta", "Old_Moth_Evidence_Stricta"), #
		population.grouping.variable = "population"
setwd('/Users/KSauby/Documents/Projects/ACS/R')
ratio.variables = c("MEPR_on_Stricta", "CACA_on_Stricta", #
			"Percent_Cover_Stricta", "Height_Stricta", #
			"Old_Moth_Evidence_Stricta")
setwd('/Users/KSauby/Documents/Projects/ACS/R')
population_data %<>% arrange_(.dots=population.grouping.variable)#
	# for each population.grouping.variable combo, calculate summary statistics for m and number of species patches#
	# this calculates the m statistics for the unique Network sizes#
	Y1 = population_data %>%#
		group_by_(.dots=lapply(#
			c("NetworkID", population.grouping.variable), #
			as.symbol#
		)) %>%#
		summarise(m = m[1]) %>%#
		group_by_(.dots=population.grouping.variable) %>%#
		summarise(#
			m_min_unique_neigh = min(m),#
			m_max_unique_neigh = max(m),#
			m_mean_unique_neigh = mean(m),#
			m_var_unique_neigh = var(m),#
			n_Species_Patches = length(unique(NetworkID[which(m>1)]))#
		) %>%#
		ungroup %>%#
		as.data.frame#
	# this calculates the m statistics for all units#
	Y2 = population_data %>%#
		group_by_(.dots=population.grouping.variable) %>%#
		summarise(#
			m_min = min(m),#
			m_max = max(m),#
			m_mean = mean(m),#
			m_var = var(m)#
		) %>%#
		ungroup %>%#
		as.data.frame#
	Z = population_data %>%#
		group_by_(.dots=population.grouping.variable) %>%#
		summarise(N = length(m)) %>%#
		ungroup %>%#
		as.data.frame#
	Y1 %<>% merge(Y2, by=population.grouping.variable) %>%#
		merge(Z, by=population.grouping.variable)	#
	# spatial statistics and other characteristics of variables#
	A <- list()#
	for (i in 1:length(unique(eval(parse(#
		text=paste(#
			"population_data$", #
			population.grouping.variable, #
			sep=""#
	)))))) #
	{#
		temp <- population_data[which(#
			eval(parse(#
				text=paste(#
					"population_data$", #
					population.grouping.variable, #
					sep=""#
				))#
			) == unique(eval(parse(#
				text=paste(#
					"population_data$", #
					population.grouping.variable, #
					sep=""#
				)#
			)))[i]#
		), ]#
		temp %<>% arrange(x,y)#
		# spatial statistics#
		coordinates(temp) = ~ x+y#
		A[[i]] <- list()#
		for (j in 1:length(summary.variables)) {#
			A[[i]][[j]] <- data.frame(variable = summary.variables[j])#
			tempvar <- eval(parse(text =#
				paste("temp$", summary.variables[j], sep="")#
			))#
			A[[i]][[j]]$Mean_tempvar 	<- Mean(tempvar)#
			A[[i]][[j]]$Var_tempvar 	<- PopVariance(tempvar)#
			A[[i]][[j]]$CV_tempvar 		<- popCV(tempvar)#
			A[[i]][[j]]$Total_tempvar 	<- Sum(tempvar)#
			A[[i]][[j]]$SSQ_R			<- calculateSSQR(#
				patch_data = as.data.frame(temp),#
				variable = summary.variables[j],#
				population.grouping.variable#
			)$SSQ_R#
			if (length(tempvar[which(tempvar > 0)]) > 0) {#
				# join counts and moran's i#
				nb <- cell2nb(nrow = 30, ncol = 30)#
				if ("W" %in% weights) {#
					lwb <- nb2listw(nb, style = "W") # convert to weights#
					# I think cells are indexed by row, then column#
					A[[i]][[j]]$JoinCountTest.W <- joincount.test(as.factor(#
						eval(parse(text=paste(#
							"temp$",#
							summary.variables[j],#
							sep=""#
						)))),#
						lwb#
					)[[2]]$estimate[1]#
					A[[i]][[j]]$MoranI.W <- moran.test(#
						eval(parse(text=paste(#
							"temp$",#
							summary.variables[j],#
							sep=""#
						))),#
						lwb#
					)$estimate[1]#
				}#
				if ("B" %in% weights) {#
					lwb <- nb2listw(nb, style = "B") # convert to weights#
					# I think cells are indexed by row, then column#
					A[[i]][[j]]$JoinCountTest.B <- joincount.test(as.factor(#
						eval(parse(text=paste(#
							"temp$",#
							summary.variables[j],#
							sep=""#
						)))),#
						lwb#
					)[[2]]$estimate[1]#
					A[[i]][[j]]$MoranI.B <- moran.test(#
						eval(parse(text=paste(#
							"temp$",#
							summary.variables[j],#
							sep=""#
						))),#
						lwb#
					)$estimate[1]#
				}	#
				if ("C" %in% weights) {#
					lwb <- nb2listw(nb, style = "C") # convert to weights#
					# I think cells are indexed by row, then column#
					A[[i]][[j]]$JoinCountTest.C <- joincount.test(as.factor(#
						eval(parse(text=paste(#
							"temp$",#
							summary.variables[j],#
							sep=""#
						)))),#
						lwb#
					)[[2]]$estimate[1]#
					A[[i]][[j]]$MoranI.C <- moran.test(#
						eval(parse(text=paste(#
							"temp$",#
							summary.variables[j],#
							sep=""#
						))),#
						lwb#
					)$estimate[1]#
				}	#
				if ("U" %in% weights) {#
					lwb <- nb2listw(nb, style = "U") # convert to weights#
					# I think cells are indexed by row, then column#
					A[[i]][[j]]$JoinCountTest.U <- joincount.test(as.factor(#
						eval(parse(text=paste(#
							"temp$",#
							summary.variables[j],#
							sep=""#
						)))),#
						lwb#
					)[[2]]$estimate[1]#
					A[[i]][[j]]$MoranI.U <- moran.test(#
						eval(parse(text=paste(#
							"temp$",#
							summary.variables[j],#
							sep=""#
						))),#
						lwb#
					)$estimate[1]#
				}	#
				if ("S" %in% weights) {#
					lwb <- nb2listw(nb, style = "S") # convert to weights#
					# I think cells are indexed by row, then column#
					A[[i]][[j]]$JoinCountTest.S <- joincount.test(as.factor(#
						eval(parse(text=paste(#
							"temp$",#
							summary.variables[j],#
							sep=""#
						)))),#
						lwb#
					)[[2]]$estimate[1]#
					A[[i]][[j]]$MoranI.S <- moran.test(#
						eval(parse(text=paste(#
							"temp$",#
							summary.variables[j],#
							sep=""#
						))),#
						lwb#
					)$estimate[1]#
				}	#
				if ("minmax" %in% weights) {#
					lwb <- nb2listw(nb, style = "minmax") # convert to weights#
					# I think cells are indexed by row, then column#
					A[[i]][[j]]$JoinCountTest.minmax <- joincount.test(as.factor(#
						eval(parse(text=paste(#
							"temp$",#
							summary.variables[j],#
							sep=""#
						)))),#
						lwb#
					)[[2]]$estimate[1]#
					A[[i]][[j]]$MoranI.minmax <- moran.test(#
						eval(parse(text=paste(#
							"temp$",#
							summary.variables[j],#
							sep=""#
						))),#
						lwb#
					)$estimate[1]#
				}	#
			} else {#
				if ("W" %in% weights) {#
					A[[i]][[j]]$JoinCountTest.W <- NA#
					A[[i]][[j]]$MoranI.W <- NA#
				}#
				if ("B" %in% weights) {#
					A[[i]][[j]]$JoinCountTest.B <- NA#
					A[[i]][[j]]$MoranI.B <- NA#
				}	#
				if ("C" %in% weights) {#
					A[[i]][[j]]$JoinCountTest.C <- NA#
					A[[i]][[j]]$MoranI.C <- NA#
				}	#
				if ("U" %in% weights) {#
					A[[i]][[j]]$JoinCountTest.U <- NA#
					A[[i]][[j]]$MoranI.U <- NA#
				}	#
				if ("S" %in% weights) {#
					A[[i]][[j]]$JoinCountTest.S <- NA#
					A[[i]][[j]]$MoranI.S <- NA#
				}	#
				if ("minmax" %in% weights) {#
					A[[i]][[j]]$JoinCountTest.minmax <- NA#
					A[[i]][[j]]$MoranI.minmax <- NA#
				}	#
			}#
		}#
		A[[i]] <- do.call(rbind.data.frame, A[[i]])#
		A[[i]]$population <- unique(eval(parse(#
			text=paste(#
				"population_data$", #
				population.grouping.variable, #
				sep=""#
			)#
		)))[i]#
	}
setwd('/Users/KSauby/Documents/Projects/ACS/R')
weights="S"
setwd('/Users/KSauby/Documents/Projects/ACS/R')
population_data %<>% arrange_(.dots=population.grouping.variable)#
	# for each population.grouping.variable combo, calculate summary statistics for m and number of species patches#
	# this calculates the m statistics for the unique Network sizes#
	Y1 = population_data %>%#
		group_by_(.dots=lapply(#
			c("NetworkID", population.grouping.variable), #
			as.symbol#
		)) %>%#
		summarise(m = m[1]) %>%#
		group_by_(.dots=population.grouping.variable) %>%#
		summarise(#
			m_min_unique_neigh = min(m),#
			m_max_unique_neigh = max(m),#
			m_mean_unique_neigh = mean(m),#
			m_var_unique_neigh = var(m),#
			n_Species_Patches = length(unique(NetworkID[which(m>1)]))#
		) %>%#
		ungroup %>%#
		as.data.frame#
	# this calculates the m statistics for all units#
	Y2 = population_data %>%#
		group_by_(.dots=population.grouping.variable) %>%#
		summarise(#
			m_min = min(m),#
			m_max = max(m),#
			m_mean = mean(m),#
			m_var = var(m)#
		) %>%#
		ungroup %>%#
		as.data.frame#
	Z = population_data %>%#
		group_by_(.dots=population.grouping.variable) %>%#
		summarise(N = length(m)) %>%#
		ungroup %>%#
		as.data.frame#
	Y1 %<>% merge(Y2, by=population.grouping.variable) %>%#
		merge(Z, by=population.grouping.variable)	#
	# spatial statistics and other characteristics of variables#
	A <- list()#
	for (i in 1:length(unique(eval(parse(#
		text=paste(#
			"population_data$", #
			population.grouping.variable, #
			sep=""#
	)))))) #
	{#
		temp <- population_data[which(#
			eval(parse(#
				text=paste(#
					"population_data$", #
					population.grouping.variable, #
					sep=""#
				))#
			) == unique(eval(parse(#
				text=paste(#
					"population_data$", #
					population.grouping.variable, #
					sep=""#
				)#
			)))[i]#
		), ]#
		temp %<>% arrange(x,y)#
		# spatial statistics#
		coordinates(temp) = ~ x+y#
		A[[i]] <- list()#
		for (j in 1:length(summary.variables)) {#
			A[[i]][[j]] <- data.frame(variable = summary.variables[j])#
			tempvar <- eval(parse(text =#
				paste("temp$", summary.variables[j], sep="")#
			))#
			A[[i]][[j]]$Mean_tempvar 	<- Mean(tempvar)#
			A[[i]][[j]]$Var_tempvar 	<- PopVariance(tempvar)#
			A[[i]][[j]]$CV_tempvar 		<- popCV(tempvar)#
			A[[i]][[j]]$Total_tempvar 	<- Sum(tempvar)#
			A[[i]][[j]]$SSQ_R			<- calculateSSQR(#
				patch_data = as.data.frame(temp),#
				variable = summary.variables[j],#
				population.grouping.variable#
			)$SSQ_R#
			if (length(tempvar[which(tempvar > 0)]) > 0) {#
				# join counts and moran's i#
				nb <- cell2nb(nrow = 30, ncol = 30)#
				if ("W" %in% weights) {#
					lwb <- nb2listw(nb, style = "W") # convert to weights#
					# I think cells are indexed by row, then column#
					A[[i]][[j]]$JoinCountTest.W <- joincount.test(as.factor(#
						eval(parse(text=paste(#
							"temp$",#
							summary.variables[j],#
							sep=""#
						)))),#
						lwb#
					)[[2]]$estimate[1]#
					A[[i]][[j]]$MoranI.W <- moran.test(#
						eval(parse(text=paste(#
							"temp$",#
							summary.variables[j],#
							sep=""#
						))),#
						lwb#
					)$estimate[1]#
				}#
				if ("B" %in% weights) {#
					lwb <- nb2listw(nb, style = "B") # convert to weights#
					# I think cells are indexed by row, then column#
					A[[i]][[j]]$JoinCountTest.B <- joincount.test(as.factor(#
						eval(parse(text=paste(#
							"temp$",#
							summary.variables[j],#
							sep=""#
						)))),#
						lwb#
					)[[2]]$estimate[1]#
					A[[i]][[j]]$MoranI.B <- moran.test(#
						eval(parse(text=paste(#
							"temp$",#
							summary.variables[j],#
							sep=""#
						))),#
						lwb#
					)$estimate[1]#
				}	#
				if ("C" %in% weights) {#
					lwb <- nb2listw(nb, style = "C") # convert to weights#
					# I think cells are indexed by row, then column#
					A[[i]][[j]]$JoinCountTest.C <- joincount.test(as.factor(#
						eval(parse(text=paste(#
							"temp$",#
							summary.variables[j],#
							sep=""#
						)))),#
						lwb#
					)[[2]]$estimate[1]#
					A[[i]][[j]]$MoranI.C <- moran.test(#
						eval(parse(text=paste(#
							"temp$",#
							summary.variables[j],#
							sep=""#
						))),#
						lwb#
					)$estimate[1]#
				}	#
				if ("U" %in% weights) {#
					lwb <- nb2listw(nb, style = "U") # convert to weights#
					# I think cells are indexed by row, then column#
					A[[i]][[j]]$JoinCountTest.U <- joincount.test(as.factor(#
						eval(parse(text=paste(#
							"temp$",#
							summary.variables[j],#
							sep=""#
						)))),#
						lwb#
					)[[2]]$estimate[1]#
					A[[i]][[j]]$MoranI.U <- moran.test(#
						eval(parse(text=paste(#
							"temp$",#
							summary.variables[j],#
							sep=""#
						))),#
						lwb#
					)$estimate[1]#
				}	#
				if ("S" %in% weights) {#
					lwb <- nb2listw(nb, style = "S") # convert to weights#
					# I think cells are indexed by row, then column#
					A[[i]][[j]]$JoinCountTest.S <- joincount.test(as.factor(#
						eval(parse(text=paste(#
							"temp$",#
							summary.variables[j],#
							sep=""#
						)))),#
						lwb#
					)[[2]]$estimate[1]#
					A[[i]][[j]]$MoranI.S <- moran.test(#
						eval(parse(text=paste(#
							"temp$",#
							summary.variables[j],#
							sep=""#
						))),#
						lwb#
					)$estimate[1]#
				}	#
				if ("minmax" %in% weights) {#
					lwb <- nb2listw(nb, style = "minmax") # convert to weights#
					# I think cells are indexed by row, then column#
					A[[i]][[j]]$JoinCountTest.minmax <- joincount.test(as.factor(#
						eval(parse(text=paste(#
							"temp$",#
							summary.variables[j],#
							sep=""#
						)))),#
						lwb#
					)[[2]]$estimate[1]#
					A[[i]][[j]]$MoranI.minmax <- moran.test(#
						eval(parse(text=paste(#
							"temp$",#
							summary.variables[j],#
							sep=""#
						))),#
						lwb#
					)$estimate[1]#
				}	#
			} else {#
				if ("W" %in% weights) {#
					A[[i]][[j]]$JoinCountTest.W <- NA#
					A[[i]][[j]]$MoranI.W <- NA#
				}#
				if ("B" %in% weights) {#
					A[[i]][[j]]$JoinCountTest.B <- NA#
					A[[i]][[j]]$MoranI.B <- NA#
				}	#
				if ("C" %in% weights) {#
					A[[i]][[j]]$JoinCountTest.C <- NA#
					A[[i]][[j]]$MoranI.C <- NA#
				}	#
				if ("U" %in% weights) {#
					A[[i]][[j]]$JoinCountTest.U <- NA#
					A[[i]][[j]]$MoranI.U <- NA#
				}	#
				if ("S" %in% weights) {#
					A[[i]][[j]]$JoinCountTest.S <- NA#
					A[[i]][[j]]$MoranI.S <- NA#
				}	#
				if ("minmax" %in% weights) {#
					A[[i]][[j]]$JoinCountTest.minmax <- NA#
					A[[i]][[j]]$MoranI.minmax <- NA#
				}	#
			}#
		}#
		A[[i]] <- do.call(rbind.data.frame, A[[i]])#
		A[[i]]$population <- unique(eval(parse(#
			text=paste(#
				"population_data$", #
				population.grouping.variable, #
				sep=""#
			)#
		)))[i]#
	}
setwd('/Users/KSauby/Documents/Projects/ACS/R')
B <- do.call(rbind.data.frame, A)#
	B %<>% arrange(variable, population)
head(B)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
ratio.variables
l=1
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp <- B %>% filter(variable == ratio.variables[l])#
			AuxVar <- B %>% filter(variable ==str_sub(ratio.variables[l],-7,-1))
temp %>% head
AuxVar %>% head
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp$Total_tempvar/AuxVar$Total_tempvar
setwd('/Users/KSauby/Documents/Projects/ACS/R')
population.grouping.variable
setwd('/Users/KSauby/Documents/Projects/ACS/R')
summary.variables
j=4
setwd('/Users/KSauby/Documents/Projects/ACS/R')
summary.variables[j]
summary.variables[j] %in% ratio.variables
summary.variables[3] %in% ratio.variables
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp_ratio <- temp %>% #
					filter_(~ str_sub(summary.variables[j],-7,-1) == 1)
dim(temp)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
A <- list()
i=1
setwd('/Users/KSauby/Documents/Projects/ACS/R')
paste(#
			"population_data$", #
			population.grouping.variable, #
			sep=""#
	)
i
''
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp <- population_data[which(#
			eval(parse(text=population_variable)) == #
			unique(eval(parse(text=population_variable))))[i]#
		), ]#
		temp %<>% arrange(x,y)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp <- population_data[which(#
			eval(parse(text=population_variable)) == #
			unique(eval(parse(text=population_variable)))[i]#
		), ]#
		temp %<>% arrange(x,y)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
population_variable <- paste(#
		"population_data$", #
		population.grouping.variable, #
		sep=""#
	)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp <- population_data[which(#
			eval(parse(text=population_variable)) == #
			unique(eval(parse(text=population_variable)))[i]#
		), ]#
		temp %<>% arrange(x,y)
dim(temp)
head(tempo)
head(temp)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
coordinates(temp) = ~ x+y#
		A[[i]] <- list()
j
setwd('/Users/KSauby/Documents/Projects/ACS/R')
A[[i]][[j]] <- data.frame(variable = summary.variables[j])#
			tempvar <- eval(parse(text =#
				paste("temp$", summary.variables[j], sep="")#
			))#
			A[[i]][[j]]$Mean_tempvar 	<- Mean(tempvar)#
			A[[i]][[j]]$Var_tempvar 	<- PopVariance(tempvar)#
			A[[i]][[j]]$CV_tempvar 		<- popCV(tempvar)#
			A[[i]][[j]]$Total_tempvar 	<- Sum(tempvar)#
			A[[i]][[j]]$SSQ_R			<- calculateSSQR(#
				patch_data = as.data.frame(temp),#
				variable = summary.variables[j],#
				population.grouping.variable#
			)$SSQ_R
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp_ratio <- temp %>% #
					filter_(~ str_sub(summary.variables[j],-7,-1) == 1)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp_ratio <- as.data.frame(temp) %>% #
					filter_(~ str_sub(summary.variables[j],-7,-1) == 1)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp_ratio <- temp %>%#
					as.data.frame %>%#
					filter_(~ str_sub(summary.variables[j],-7,-1) == 1)
dim(temp_ratio)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
str_sub(summary.variables[j],-7,-1)
head(temp)
temp %>% as.data.frame %?% filter(Stricta==1) %>% dim
temp %>% as.data.frame %>% filter(Stricta==1) %>% dim
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp %>%#
					as.data.frame %>%#
					filter_(~ str_sub(summary.variables[j],-7,-1) == 1)#
			}
setwd('/Users/KSauby/Documents/Projects/ACS/R')
str_sub(summary.variables[j],-7,-1)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
quot(str_sub(summary.variables[j])
)
?guo
?quo
setwd('/Users/KSauby/Documents/Projects/ACS/R')
quo(str_sub(summary.variables[j])
)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
which_column = quo(str_sub(summary.variables[j],-7,-1))#
				temp_ratio <- temp %>%#
					as.data.frame %>%#
					filter(!!which_column == 1)
dim(temp_ratio)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
which_column = quo(parse(text=str_sub(summary.variables[j],-7,-1)))#
				temp_ratio <- temp %>%#
					as.data.frame %>%#
					filter(!!which_column == 1)#
			}
dim(temp_ratio)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp_ratio <- temp %>%#
					as.data.frame %>%#
					filter_(interp(~str_sub(summary.variables[j],-7,-1) == 1))
dim(temp_ratio)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp_ratio <- temp %>%#
					as.data.frame %>%#
					filter_(interp(~str_sub(summary.variables[j],-7,-1)) == 1)
dim(temp_ratio)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
interp(~str_sub(summary.variables[j],-7,-1))
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp_ratio <- temp %>%#
					as.data.frame#
				temp_ratio[temp_ratio[colnames(temp_ratio)==str_sub(summary.variables[j],-7,-1)]==1, ]
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp_ratio <- temp %>%#
					as.data.frame#
				temp_ratio %<>% #
					.[.[colnames(.)==str_sub(summary.variables[j],-7,-1)]==1, ]
setwd('/Users/KSauby/Documents/Projects/ACS/R')
temp_ratio
dim(str_sub(summary.variables[j],-7,-1))
dim(temp_ratio)
setwd('/Users/KSauby/Documents/Projects/ACS/R')
#' Calculate Summary Statistics for Patch Population Data#
#' #
#' @param population_data Data on multiple realizations of patches of the species of interest within the grid of locations (created by \code{createSpeciesPatchPopulations} function).#
#' @param summary.variables Vector of variables for which summary statistics should be calculated.#
#' @param population.grouping.variable Categorical variable identifying the different populations.#
#' @param ratio.variables Variables for which to use ratio estimators#
#' @param weights Vector of spatial weight matrix styles. Can take on values "W", "B", "C", "U", "S", and "minmax". See nb2listw for more details.#
#' @return Dataframe including summary statistics for each column identified in \code{summary.variables} and for each category identified in \code{grouping.variables}.#
#' @examples#
#' library(magrittr)#
#' library(dplyr)#
#' occupancy.variables = c(#
#' 	"Stricta",#
#' 	"Pusilla",#
#' 	"Cactus",#
#' 	"CACA_on_Pusilla",#
#' 	"CACA_on_Stricta",#
#' 	"MEPR_on_Pusilla",#
#' 	"MEPR_on_Stricta",#
#' 	"Old_Moth_Evidence_Pusilla",#
#' 	"Old_Moth_Evidence_Stricta"#
#' 	# "Percent_Cover_Pusilla", # how do I do these? they are occupancy nor abundance#
#' 	# "Percent_Cover_Stricta",#
#' 	# "Height_Pusilla",#
#' 	# "Height_Stricta",#
#' )		#
#' summary.variables = occupancy.variables#
#' grouping.variables = c("n.networks", "realization")#
#' # create realizations#
#' x_start = 1#
#' x_end = 30#
#' y_start = 1#
#' y_end = 30#
#' n.networks = c(5, 15, 10, 20, 30, 40)#
#' n.realizations = 1#
#' SpeciesInfo = PlotSurveys_season1#
#' start.seed=1#
#' buffer=5#
#' cactus.realizations <- createSpeciesPatchPopulations(x_start, x_end,#
#' 	y_start, y_end, buffer, n.networks, n.realizations, SpeciesInfo, start.seed,#
#' 	occupancy.variables)#
#' patch_data_summary <- calculatePopulationSummaryStatistics(cactus.realizations, #
#' 	summary.variables=occupancy.variables, grouping.variables=grouping.variables)#
#' patch_data_summary %<>% #
#' 	round(3) %>% #
#' 	arrange(n.networks) %>% #
#' 	dplyr::select(#
#' 		starts_with("Pusilla"), #
#' 		starts_with("Stricta"), #
#' 		starts_with("Cactus"), #
#' 		starts_with("CACA_on_Pusilla"),#
#' 		starts_with("CACA_on_Stricta"),#
#' 		starts_with("MEPR_on_Pusilla"),#
#' 		starts_with("MEPR_on_Stricta"),#
#' 		starts_with("Old_Moth_Evidence_Pusilla"),#
#' 		starts_with("Old_Moth_Evidence_Stricta"),#
#' 		everything()#
#' 	)#
#' write.csv(patch_data_summary, file=paste("patch_data_summary", #
#' format(Sys.time(), "%Y-%m-%d_%H-%M"), ".csv", sep=""))#
#' @export#
#' @importFrom dplyr group_by_#
#' @importFrom dplyr ungroup#
#' @importFrom stringr str_sub#
#
calculatePopulationSummaryStatistics <- function(#
	population_data, #
	summary.variables, #
	ratio.variables=NULL, #
	population.grouping.variable,#
	weights="S"#
) {#
	population_data %<>% arrange_(.dots=population.grouping.variable)#
	# for each population.grouping.variable combo, calculate summary statistics for m and number of species patches#
	# this calculates the m statistics for the unique Network sizes#
	Y1 = population_data %>%#
		group_by_(.dots=lapply(#
			c("NetworkID", population.grouping.variable), #
			as.symbol#
		)) %>%#
		summarise(m = m[1]) %>%#
		group_by_(.dots=population.grouping.variable) %>%#
		summarise(#
			m_min_unique_neigh = min(m),#
			m_max_unique_neigh = max(m),#
			m_mean_unique_neigh = mean(m),#
			m_var_unique_neigh = var(m),#
			n_Species_Patches = length(unique(NetworkID[which(m>1)]))#
		) %>%#
		ungroup %>%#
		as.data.frame#
	# this calculates the m statistics for all units#
	Y2 = population_data %>%#
		group_by_(.dots=population.grouping.variable) %>%#
		summarise(#
			m_min = min(m),#
			m_max = max(m),#
			m_mean = mean(m),#
			m_var = var(m)#
		) %>%#
		ungroup %>%#
		as.data.frame#
	Z = population_data %>%#
		group_by_(.dots=population.grouping.variable) %>%#
		summarise(N = length(m)) %>%#
		ungroup %>%#
		as.data.frame#
	Y1 %<>% merge(Y2, by=population.grouping.variable) %>%#
		merge(Z, by=population.grouping.variable)	#
	# spatial statistics and other characteristics of variables#
	A <- list()#
	population_variable <- paste(#
		"population_data$", #
		population.grouping.variable, #
		sep=""#
	)#
	for (i in 1:length(unique(eval(parse(text=population_variable))))) {#
		temp <- population_data[which(#
			eval(parse(text=population_variable)) == #
			unique(eval(parse(text=population_variable)))[i]#
		), ]#
		temp %<>% arrange(x,y)#
		# spatial statistics#
		coordinates(temp) = ~ x+y#
		A[[i]] <- list()#
		for (j in 1:length(summary.variables)) {#
			A[[i]][[j]] <- data.frame(variable = summary.variables[j])#
			if (summary.variables[j] %in% ratio.variables) {#
				temp_ratio <- temp %>% as.data.frame#
				temp_ratio %<>% #
					.[.[colnames(.)==str_sub(summary.variables[j],-7,-1)]==1, ]	#
				tempvar <- eval(parse(text =#
						paste("temp_ratio$", summary.variables[j], sep="")#
					))#
				coordinates(temp_ratio) = ~ x+y#
			} else {#
				tempvar <- eval(parse(text =#
					paste("temp$", summary.variables[j], sep="")#
				))	#
			}#
			A[[i]][[j]]$Mean_tempvar 	<- Mean(tempvar)#
			A[[i]][[j]]$Var_tempvar 	<- PopVariance(tempvar)#
			A[[i]][[j]]$CV_tempvar 		<- popCV(tempvar)#
			A[[i]][[j]]$Total_tempvar 	<- Sum(tempvar)#
			A[[i]][[j]]$SSQ_R			<- calculateSSQR(#
				patch_data = as.data.frame(temp),#
				variable = summary.variables[j],#
				population.grouping.variable#
			)$SSQ_R#
			if (length(tempvar[which(tempvar > 0)]) > 0) {#
				# join counts and moran's i#
				nb <- cell2nb(nrow = 30, ncol = 30)#
				if ("W" %in% weights) {#
					lwb <- nb2listw(nb, style = "W") # convert to weights#
					# I think cells are indexed by row, then column#
					A[[i]][[j]]$JoinCountTest.W <- joincount.test(as.factor(#
						eval(parse(text=paste(#
							"temp$",#
							summary.variables[j],#
							sep=""#
						)))),#
						lwb#
					)[[2]]$estimate[1]#
					A[[i]][[j]]$MoranI.W <- moran.test(#
						eval(parse(text=paste(#
							"temp$",#
							summary.variables[j],#
							sep=""#
						))),#
						lwb#
					)$estimate[1]#
				}#
				if ("B" %in% weights) {#
					lwb <- nb2listw(nb, style = "B") # convert to weights#
					# I think cells are indexed by row, then column#
					A[[i]][[j]]$JoinCountTest.B <- joincount.test(as.factor(#
						eval(parse(text=paste(#
							"temp$",#
							summary.variables[j],#
							sep=""#
						)))),#
						lwb#
					)[[2]]$estimate[1]#
					A[[i]][[j]]$MoranI.B <- moran.test(#
						eval(parse(text=paste(#
							"temp$",#
							summary.variables[j],#
							sep=""#
						))),#
						lwb#
					)$estimate[1]#
				}	#
				if ("C" %in% weights) {#
					lwb <- nb2listw(nb, style = "C") # convert to weights#
					# I think cells are indexed by row, then column#
					A[[i]][[j]]$JoinCountTest.C <- joincount.test(as.factor(#
						eval(parse(text=paste(#
							"temp$",#
							summary.variables[j],#
							sep=""#
						)))),#
						lwb#
					)[[2]]$estimate[1]#
					A[[i]][[j]]$MoranI.C <- moran.test(#
						eval(parse(text=paste(#
							"temp$",#
							summary.variables[j],#
							sep=""#
						))),#
						lwb#
					)$estimate[1]#
				}	#
				if ("U" %in% weights) {#
					lwb <- nb2listw(nb, style = "U") # convert to weights#
					# I think cells are indexed by row, then column#
					A[[i]][[j]]$JoinCountTest.U <- joincount.test(as.factor(#
						eval(parse(text=paste(#
							"temp$",#
							summary.variables[j],#
							sep=""#
						)))),#
						lwb#
					)[[2]]$estimate[1]#
					A[[i]][[j]]$MoranI.U <- moran.test(#
						eval(parse(text=paste(#
							"temp$",#
							summary.variables[j],#
							sep=""#
						))),#
						lwb#
					)$estimate[1]#
				}	#
				if ("S" %in% weights) {#
					lwb <- nb2listw(nb, style = "S") # convert to weights#
					# I think cells are indexed by row, then column#
					A[[i]][[j]]$JoinCountTest.S <- joincount.test(as.factor(#
						eval(parse(text=paste(#
							"temp$",#
							summary.variables[j],#
							sep=""#
						)))),#
						lwb#
					)[[2]]$estimate[1]#
					A[[i]][[j]]$MoranI.S <- moran.test(#
						eval(parse(text=paste(#
							"temp$",#
							summary.variables[j],#
							sep=""#
						))),#
						lwb#
					)$estimate[1]#
				}	#
				if ("minmax" %in% weights) {#
					lwb <- nb2listw(nb, style = "minmax") # convert to weights#
					# I think cells are indexed by row, then column#
					A[[i]][[j]]$JoinCountTest.minmax <- joincount.test(as.factor(#
						eval(parse(text=paste(#
							"temp$",#
							summary.variables[j],#
							sep=""#
						)))),#
						lwb#
					)[[2]]$estimate[1]#
					A[[i]][[j]]$MoranI.minmax <- moran.test(#
						eval(parse(text=paste(#
							"temp$",#
							summary.variables[j],#
							sep=""#
						))),#
						lwb#
					)$estimate[1]#
				}	#
			} else {#
				if ("W" %in% weights) {#
					A[[i]][[j]]$JoinCountTest.W <- NA#
					A[[i]][[j]]$MoranI.W <- NA#
				}#
				if ("B" %in% weights) {#
					A[[i]][[j]]$JoinCountTest.B <- NA#
					A[[i]][[j]]$MoranI.B <- NA#
				}	#
				if ("C" %in% weights) {#
					A[[i]][[j]]$JoinCountTest.C <- NA#
					A[[i]][[j]]$MoranI.C <- NA#
				}	#
				if ("U" %in% weights) {#
					A[[i]][[j]]$JoinCountTest.U <- NA#
					A[[i]][[j]]$MoranI.U <- NA#
				}	#
				if ("S" %in% weights) {#
					A[[i]][[j]]$JoinCountTest.S <- NA#
					A[[i]][[j]]$MoranI.S <- NA#
				}	#
				if ("minmax" %in% weights) {#
					A[[i]][[j]]$JoinCountTest.minmax <- NA#
					A[[i]][[j]]$MoranI.minmax <- NA#
				}	#
			}#
		}#
		A[[i]] <- do.call(rbind.data.frame, A[[i]])#
		A[[i]]$population <- unique(eval(parse(#
			text=paste(#
				"population_data$", #
				population.grouping.variable, #
				sep=""#
			)#
		)))[i]#
	}#
	B <- do.call(rbind.data.frame, A)#
	B %<>% arrange(variable, population) %>%#
		setnames("Mean_tempvar", "Mean") %>%#
		setnames("Var_tempvar", "Var") %>%#
		setnames("CV_tempvar", "CV") %>%#
		setnames("Total_tempvar", "Total")#
	return(list(Y1, B))#
}
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
CactusRealizationSummary <- createCactusRealizationSummary(CactusRealizations)
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
pop_1_stricta <- CactusRealizations %>% filter(population==1, Stricta==1)#
	mean_pop_1_CACA_on_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==1, variable=="CACA_on_Stricta") %$% #
		Mean#
	mean_pop_1_MEPR_on_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==1, variable=="MEPR_on_Stricta") %$% #
		Mean#
	mean_pop_1_Old_Moth_Evidence_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==1, variable=="Old_Moth_Evidence_Stricta") %$% #
		Mean#
	var_pop_1_CACA_on_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==1, variable=="CACA_on_Stricta") %$% #
		Var#
	var_pop_1_MEPR_on_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==1, variable=="MEPR_on_Stricta") %$% #
		Var#
	var_pop_1_Old_Moth_Evidence_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==1, variable=="Old_Moth_Evidence_Stricta") %$% #
		Var#
	expect_that(#
		mean_pop_1_CACA_on_Stricta,#
		equals(mean(pop_1_stricta$CACA_on_Stricta))#
	)#
	expect_that(#
		mean_pop_1_MEPR_on_Stricta,#
		equals(mean(pop_1_stricta$MEPR_on_Stricta))#
	)#
	expect_that(#
		mean_pop_1_Old_Moth_Evidence_Stricta,#
		equals(mean(pop_1_stricta$Old_Moth_Evidence_Stricta))#
	)#
	expect_that(#
		var_pop_1_CACA_on_Stricta,#
		equals(PopVariance(pop_1_stricta$CACA_on_Stricta))#
	)#
	expect_that(#
		var_pop_1_MEPR_on_Stricta,#
		equals(var(pop_1_stricta$MEPR_on_Stricta))#
	)#
	expect_that(#
		var_pop_1_Old_Moth_Evidence_Stricta,#
		equals(var(pop_1_stricta$Old_Moth_Evidence_Stricta))#
	)
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
expect_that(#
		mean_pop_1_CACA_on_Stricta,#
		equals(mean(pop_1_stricta$CACA_on_Stricta))#
	)#
	expect_that(#
		mean_pop_1_MEPR_on_Stricta,#
		equals(mean(pop_1_stricta$MEPR_on_Stricta))#
	)#
	expect_that(#
		mean_pop_1_Old_Moth_Evidence_Stricta,#
		equals(mean(pop_1_stricta$Old_Moth_Evidence_Stricta))#
	)#
	expect_that(#
		var_pop_1_CACA_on_Stricta,#
		equals(PopVariance(pop_1_stricta$CACA_on_Stricta))#
	)#
	expect_that(#
		var_pop_1_MEPR_on_Stricta,#
		equals(PopVariance(pop_1_stricta$MEPR_on_Stricta))#
	)#
	expect_that(#
		var_pop_1_Old_Moth_Evidence_Stricta,#
		equals(PopVariance(pop_1_stricta$Old_Moth_Evidence_Stricta))#
	)
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
pop_6_stricta <- CactusRealizations %>% filter(population==6, Stricta==1)#
	mean_pop_6_CACA_on_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==6, variable=="CACA_on_Stricta") %$% #
		Mean#
	mean_pop_6_MEPR_on_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==6, variable=="MEPR_on_Stricta") %$% #
		Mean#
	mean_pop_6_Old_Moth_Evidence_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==6, variable=="Old_Moth_Evidence_Stricta") %$% #
		Mean#
	var_pop_6_CACA_on_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==6, variable=="CACA_on_Stricta") %$% #
		Var#
	var_pop_6_MEPR_on_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==6, variable=="MEPR_on_Stricta") %$% #
		Var#
	var_pop_6_Old_Moth_Evidence_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==6, variable=="Old_Moth_Evidence_Stricta") %$% #
		Var#
	expect_that(#
		mean_pop_6_CACA_on_Stricta,#
		equals(mean(pop_6_stricta$CACA_on_Stricta))#
	)#
	expect_that(#
		mean_pop_6_MEPR_on_Stricta,#
		equals(mean(pop_6_stricta$MEPR_on_Stricta))#
	)#
	expect_that(#
		mean_pop_6_Old_Moth_Evidence_Stricta,#
		equals(mean(pop_6_stricta$Old_Moth_Evidence_Stricta))#
	)#
	expect_that(#
		var_pop_6_CACA_on_Stricta,#
		equals(PopVariance(pop_6_stricta$CACA_on_Stricta))#
	)#
	expect_that(#
		var_pop_6_MEPR_on_Stricta,#
		equals(PopVariance(pop_6_stricta$MEPR_on_Stricta))#
	)#
	expect_that(#
		var_pop_6_Old_Moth_Evidence_Stricta,#
		equals(PopVariance(pop_6_stricta$Old_Moth_Evidence_Stricta))#
	)
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
actusRealizationSummary[[2]]
CactusRealizationSummary[[2]]
setwd('/Users/KSauby/Documents/Projects/ACS/tests/testthat')
# population 1#
	pop_1_stricta <- CactusRealizations %>% filter(population==1, Stricta==1)#
	mean_pop_1_CACA_on_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==1, variable=="CACA_on_Stricta") %$% #
		Mean#
	mean_pop_1_MEPR_on_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==1, variable=="MEPR_on_Stricta") %$% #
		Mean#
	mean_pop_1_Old_Moth_Evidence_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==1, variable=="Old_Moth_Evidence_Stricta") %$% #
		Mean#
	var_pop_1_CACA_on_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==1, variable=="CACA_on_Stricta") %$% #
		Var#
	var_pop_1_MEPR_on_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==1, variable=="MEPR_on_Stricta") %$% #
		Var#
	var_pop_1_Old_Moth_Evidence_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==1, variable=="Old_Moth_Evidence_Stricta") %$% #
		Var#
	CV_pop_1_CACA_on_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==1, variable=="CACA_on_Stricta") %$% #
		CV#
	CV_pop_1_MEPR_on_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==1, variable=="MEPR_on_Stricta") %$% #
		CV#
	CV_pop_1_Old_Moth_Evidence_Stricta <- CactusRealizationSummary[[2]] %>% #
		filter(population==1, variable=="Old_Moth_Evidence_Stricta") %$% #
		CV#
	expect_that(#
		mean_pop_1_CACA_on_Stricta,#
		equals(mean(pop_1_stricta$CACA_on_Stricta))#
	)#
	expect_that(#
		mean_pop_1_MEPR_on_Stricta,#
		equals(mean(pop_1_stricta$MEPR_on_Stricta))#
	)#
	expect_that(#
		mean_pop_1_Old_Moth_Evidence_Stricta,#
		equals(mean(pop_1_stricta$Old_Moth_Evidence_Stricta))#
	)#
	expect_that(#
		var_pop_1_CACA_on_Stricta,#
		equals(PopVariance(pop_1_stricta$CACA_on_Stricta))#
	)#
	expect_that(#
		var_pop_1_MEPR_on_Stricta,#
		equals(PopVariance(pop_1_stricta$MEPR_on_Stricta))#
	)#
	expect_that(#
		var_pop_1_Old_Moth_Evidence_Stricta,#
		equals(PopVariance(pop_1_stricta$Old_Moth_Evidence_Stricta))#
	)#
	expect_that(#
		CV_pop_1_CACA_on_Stricta,#
		equals(popCV(pop_1_stricta$CACA_on_Stricta))#
	)#
	expect_that(#
		CV_pop_1_MEPR_on_Stricta,#
		equals(popCV(pop_1_stricta$MEPR_on_Stricta))#
	)#
	expect_that(#
		CV_pop_1_Old_Moth_Evidence_Stricta,#
		equals(popCV(pop_1_stricta$Old_Moth_Evidence_Stricta))#
	)
setwd('/Users/KSauby/Documents/Projects')
setwd("./ACS")#
#setwd("./modresproc")#
devtools::test()#
devtools::document()#
devtools::install()
